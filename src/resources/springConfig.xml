<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<context:property-placeholder location="classpath:properties/*.properties" />

	<!-- 使Spring关注Annotation -->
	<context:annotation-config />

	<!-- 让Spring通过自动扫描来查询和管理Bean -->
	<context:component-scan base-package="com.xinlai.zhnx" >
		<!-- 添加数据库后删除两个regex 
		<context:exclude-filter type="regex" expression="com.xinlai.zhnx.watercloud.dao.*"/>
		<context:exclude-filter type="regex" expression="com.xinlai.zhnx.watercloud.service.*"/>
		-->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 数据源配置信息  -->
	<bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	   <!-- 配置初始化大小、最小、最大 -->
	   <property name="initialSize" value="1" />
	   <property name="minIdle" value="1" /> 
	   <property name="maxActive" value="20" />
	
	   <!-- 配置获取连接等待超时的时间 -->
	   <property name="maxWait" value="60000" />
	
	   <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	   <property name="timeBetweenEvictionRunsMillis" value="60000" />
	
	   <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	   <property name="minEvictableIdleTimeMillis" value="300000" />
	   <property name="validationQuery" value="SELECT 'x'" />
	   <property name="testWhileIdle" value="true" />
	   <property name="testOnBorrow" value="true" />
	   <property name="testOnReturn" value="true" />
	   
	   <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	   <property name="poolPreparedStatements" value="true" />
	   <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	<!-- 数据源事务 -->
	<bean id="transactionDataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<property name="targetDataSource" ref="defaultDataSource" />
	</bean>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="transactionDataSourceProxy" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="allManagerMethod"
			expression="execution (* com.xinlai.zhnx..*.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" />
	</aop:config>
	<!-- 整合mybatis -->
	<bean id="myBatisSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="transactionDataSourceProxy" />
		<property name="configLocation" value="classpath:mybatis-configuration.xml" />
		<property name="mapperLocations" value="classpath*:com/xinlai/zhnx/**/dao/*.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xinlai.zhnx.*.*.dao" />
		<property name="sqlSessionFactoryBeanName" value="myBatisSqlSessionFactory" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="myBatisSqlSessionFactory"></constructor-arg>
	</bean>
	<bean id="sqlSessionBatch" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="myBatisSqlSessionFactory" />
		<constructor-arg index="1" value="BATCH" />
	</bean>
	<!-- quartz -->
	<bean id="quartzScheduler" name="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="defaultDataSource" />   
		<property name="configLocation" value="classpath:/properties/quartz.properties" />
		<property name="applicationContextSchedulerContextKey" value="applicationContextKey" />
		<property name="autoStartup" value="false"/>  
	</bean>
	<bean id="scheduleManager" class="com.xinlai.zhnx.common.job.ScheduleManager" init-method="start">
		<property name="scheduler" ref="quartzScheduler" />
	</bean>
</beans>