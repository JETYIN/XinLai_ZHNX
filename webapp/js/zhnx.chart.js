/*!
 * -------------------------------------------------------------------
 * ------------------------------基础图表库------------------------------
 * -------------------------------------------------------------------
 */


/**
 * 
 * 图表基础类
 * 
 * @class zhnx.chart.base 所有基础图表的基类
 */
zhnx.chart.base = {
	svg: undefined,
	windowid: undefined,
	selector: undefined,
	width:0,
	height:0,
	padding:{top:10, right:10, bottom:10, left:10},
	series: undefined,
	interval:undefined,
	delayTime: 30 * 1000,
	fillColor: {},
	baseInit: function(selector){
		var that = this;
		this.id = this.args.id;
		this.selector = selector;
		// 根据窗口定义窗口大小
		var windowSize = zhnx.utils.getDomWidHei(selector);
		this.width = windowSize.width;
		this.height = windowSize.height;
		this.svg = zhnx.utils.transformD3dom(selector).append("svg").attr({
			"width": that.width,
			"height": that.height
		});
		// viewBox
		if(this.args != undefined && this.args.viewBox != undefined){
			var viewBoxArray = this.args.viewBox.split(" ");
			this.width = parseFloat(viewBoxArray[2]) - parseFloat(viewBoxArray[0]);
			this.height = parseFloat(viewBoxArray[3]) - parseFloat(viewBoxArray[1]);
			this.svg.attr({
				"viewBox": that.args.viewBox
			});
		}
	},
	destroy: function(){
		if(this.interval){
			clearInterval(this.interval);
		}
		
		if(this.svg != undefined){
			this.svg.selectAll("*").remove();
			this.svg.remove();
		}
		this.svg = null;
	},
	repaint: function(){
		
	},
	setdata: function(){
		
	},
	taketurns: function(){
		var that = this;
		if(this.interval){
			clearInterval(this.interval);
		}
		this.interval = setInterval(function(){
			that.intervalfunc();
		}, that.delayTime);
	},
	intervalfunc: function(){
		this.repaint();
	},
	evalfunc: function(execString){
		var that = this;
		eval(execString);
	},
	
	// 获取坐标轴的最大比例值，ticks是将坐标轴分为几段, dat是要在坐标轴上显示的数据数组
	getMaxVaule : function(ticks, dat){
        var gap = Math.floor(d3.max(dat)/ticks);
        var v = [];
        var gapStr = gap.toString();
        for(var i=0; i<gapStr.length; ++i){
            v.push(Number(gapStr.charAt(i)));
        }
        if(gapStr.length>=2){
            if(v[1]>=5){
                v[0] += 1;
                for(var i=1; i<gapStr.length; ++i){
                    v[i] = 0;
                }
            }else{
                v[1] = 5;
                for(var i=2; i<gapStr.length; ++i){
                    v[i] = 0;
                }
            }
        }else{
            v[0] += 1;
        }
        var temp = "";
        for(var i=0; i<gapStr.length; ++i){
            temp += v[i].toString();
        }
        return ticks*Number(temp);
    },
    
    // 改变字体位置，如果有重叠的字体,参数svg可以传svg,也可以传group,要调整的文字所在的组，fontsize字体大小
	changeFontPos : function(svg,fontSize){
		var yValue = [];
        var xValue = [];
        var widthValue = [];
        var blChange = false;
        if(!svg.selectAll("text").empty()){
        	svg.selectAll("text").each(function(){
                yValue.push(Number(d3.select(this).attr("y")));
                xValue.push(Number(d3.select(this).attr("x")));
                widthValue.push(Number(d3.select(this).text().length));
            });
        }        
        for(var i=0; i<yValue.length; ++i){
            for(var j=i+1; j<yValue.length; ++j){
                if(Math.abs(yValue[j]-yValue[i])<Number(fontSize) && Math.abs(xValue[j]-xValue[i])<widthValue[i]*Number(fontSize)){
                    yValue[j] += Number(fontSize);
                    blChange = true;
                }
            }
        }
        if(blChange){
        	svg.selectAll("text").each(function(d, i){
                d3.select(this).attr("y", yValue[i].toString());
            });
        }        
    },
    
    // 通用柱状图
    drawBar : function(svg, args){
    	var option = {
			padding : {
				top : 50,
				right : 10,
				bottom : 40,
				left : 60
			},
			title : {
				text : ""
			},
			xAxis : {
				unit : '',
				gap : true,
				gapWidth : 55,
				axisPathStyle : {
					stroke: "#05a8f7",
				},
				axisLineStyle : {
					stroke: "#05a8f7",
				}
			},
			yAxis : {
				unit : '人',
				axisPathStyle : {
					stroke: "#05a8f7",
				},
				axisLineStyle : {
					stroke: "#05a8f7",
				}
			},
			legend : {
				top:-30,
				right : -500,
				orient: 'horizontal',	//图例横向
			},
			grid : {
				borderColor : "#05a8f7",
				vertical : false,
			},
			bar:{
				barWidth : 20,
				gapWidth : 5,
				textStyle:{
					color : '#fff',
					fontSize : 14
				},
			}	
    	};
    	var opt = $.extend(true, {}, option, args.option);
		var chart = xCharts(svg.node(), opt);
		chart.FormateData(args.series);
		
		if(chart.series.legend[0].length>1){
			//chart.ChartConfig.padding.right = 100;
			if(chart.series.legend[0].length==2){	//图例位置
				chart.ChartConfig.legend.right = -200;
			}
			else if(chart.series.legend[0].length==3){
				chart.ChartConfig.legend.right = -300;
			}
			else if(chart.series.legend[0].length==4){
				chart.ChartConfig.legend.right = -400;
			}
			else if(chart.series.legend[0].length==5){
				chart.ChartConfig.legend.right = -500;
			}
			else if(chart.series.legend[0].length==6){
				chart.ChartConfig.legend.right = -600;
			}
			chart.drawLegend(chart.series.legend[0]);
		}	
		if(chart.series.label[0].length>6&&chart.series.label[0].length<10){//>10x轴市县个数>6
			if(chart.series.legend[0].length==1||chart.series.legend[0].length==2){
				chart.ChartConfig.bar.gapWidth = 10; 
			}
			else if(chart.series.legend[0].length==3){
				chart.ChartConfig.bar.barWidth = 16;
			}
			else if(chart.series.legend[0].length>=4){//图例个数
				chart.ChartConfig.bar.barWidth = 13; 
				chart.ChartConfig.bar.gapWidth = 2; 
			}
//			else if(chart.series.legend[0].length==4){//图例个数
//				chart.ChartConfig.bar.barWidth = 13; 
//				chart.ChartConfig.bar.gapWidth = 2; 
//			}
		}
		else if(chart.series.label[0].length<=6){//0-6
			if(chart.series.legend[0].length==1||chart.series.legend[0].length==2){
				chart.ChartConfig.bar.barWidth = 25; 
				chart.ChartConfig.bar.gapWidth = 10; 
			}
			else if(chart.series.legend[0].length==3){
				chart.ChartConfig.xAxis.gapWidth = 75;
			}
			else if(chart.series.legend[0].length<6&&chart.series.legend[0].length>=4){
				chart.ChartConfig.xAxis.gapWidth = 95;
				chart.ChartConfig.bar.barWidth = 18; 
			}
			else if(chart.series.legend[0].length>=6){
				chart.ChartConfig.xAxis.gapWidth = 95;
				chart.ChartConfig.bar.barWidth = 16; 
			}
		}
		var xInfo = chart.drawXAxis(chart.series.label[0]);
		var yInfo = chart.drawYAxis(chart.series.data[0]);
		chart.drawGrid(xInfo, yInfo);
//		if(chart.series.data[0].length>3){
//			chart.ChartConfig.bar.gapWidth = 2; 
//		}
		chart.drawBar(xInfo, yInfo, chart.series.data[0]);
    } ,
    drawRing: function(svg,args,index){
    	var that = this;
//    	console.log(args)
    	var option = {
			padding : {
				top : 40,
				right : 50,
				bottom : 40,
				left : 40
			},
			title : {
				text : ""
			},
			color : [ '#0CE5DA', '#E4109D', '#E1E315', '#40FD0D'],
			grid : {
				borderColor : "#05a8f7",
				vertical : false,
			},
			legend : {
				show : true,
				right : -320,
				top : 255,
				orient: 'horizontal',	//图例横向
				textStyle : {
					orient: 'vertical',//vertical文字在图例下方
				},
				icon:{
					shape: 'circleArc' // 'circle', emptyCircle
				}
			},
			pie:{
				selectedMode: 'multiple',
				radius: [0, 0.6],
				roseType: "circleArea",
				animationMode:"EachSection",
				label: {
					normal: {
						show: true,
						doubleLable:{
							show:false,	//出现文字和数据
						},
						textStyle: {
							color: [ '#0CE5DA', '#E4109D', '#E1E315', '#40FD0D']
								}
						}
				},
				itemStyle: {
					normal: {
						borderColor: "none",
						borderWidth: 0
					}
				},
				labelLine:{
					normal:{
						length: 70,
						length2: 40,
						lineStyle:{
							color: [ '#0CE5DA', '#E4109D', '#E1E315', '#40FD0D']
						}
					}
				},
				center:{
					show: true,
					color: "white",
					borderWidth: 0,
					width:40,
					height:40
				},
				smallPie:{	//不需数据的环
					show: true,		//显示不需数据的环
					inner: 100,
					outer: 105,
					color: "#0CE5DA",
					dataNum: 100,	//圆环里面有多少段
					intervalNum: 0.05,	//每段环之间间隔大小，0为没有间隔
					animateTime: 1000
				},
				pieCircle:{	//不需数据的圆
					show: true,		//显示圆
					r: 107,
					cx: 0,
					cy: 0,
					color: "none",
					borderWidth: 1,
					border: "white"
				},
				pieCircle2:{	//不需数据的圆2
					show: false,		//显示圆
				}
			}		
    	};
    	var opt = $.extend(true, {}, option, args.option);
    	this.chart = xCharts(svg.node(), opt);
		this.chart.FormateData(args.series);
//		chart.drawTitle();
		this.chart.drawLegend(args.series.data[0].label);
		this.chart.drawPie(args.series.data[0].data, args.series.data[0].label);
		this.chart.setOuterEvent({
			pathClick: function(dStart,dEnd,idx){
				that.pathXchartClickCommand({
					type: 'click',
					context: that.id,
					contextType: 'chaObj',
					execString: "that.chart.pieClick("+dStart+","+dEnd+","+idx+","+index+");",
					execMode: "evalfunc"
				});
			}
		});
		this.chart.setOuterEvent({
			svgRectClick: function(dStart,dEnd,idx){
				that.pathBgXchartClickCommand({
					type: 'click',
					context: that.id,
					contextType: 'chaObj',
					execString: "that.chart.pieBgClick();",
					execMode: "evalfunc"
				});
			}
		});
    }
};

// ---------------------------------------------------------------图表----------------------------------------------------//
/**
 * args = { selector:String, title:String,
 * series:[{city:String,quantity:integer}] }
 * 
 * @param args
 *            zhnx.chart.petal({ selector: piebarchartwin, title: "水量信息",
 *            labels: [ '银川', '石嘴山', '吴忠', '固原', '中卫' ], series: [10, 9, 15, 3,
 *            8] });
 */
zhnx.chart.petal = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.petal.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.petal,
	_defaults : {},
	args: undefined,
	font12Height : 12,
	font12Width : 6, 
	font28Height : 28, 
	font28Width : 14,
	padding:{left: 0, right: 0, top: 50, bottom: 0},
	labels: undefined,
	series: undefined,
	units: "",
	title: "",
	titleAlign: "middle", // start、 middle、 end
	titleUseHTML: false, // true、 false
	classifyTotalPiedata: undefined,
	color:[d3.rgb(4, 188, 254).toString(), d3.rgb(10, 150, 210).toString(), d3.rgb(10, 60, 120).toString(),
	       d3.rgb(50, 70, 100).toString(), d3.rgb(0, 255, 128).toString(), d3.rgb(37, 162, 239).toString()],
	colorScale: undefined,
	innerRadius: 0,
	outerRadius:undefined,
	radiusPadding: 20,
	minPointRadius: 20,
	radiusReverse: false,
	splitLineEnable: true,
	splitPadding: 0.01,
	dataHaloEnable:false,
	durationTime: 1500,
	centerCircleEnable: false,
	centerCircleRadius: 8,
	centerCircleStrokeWidth:0,
	centerTooltipEnable: false,
	textLineEnable: true,
	textLineMaxTimes: 1.4,
	textLineMinTimes: 1.15,
	valueEnable: false,
	valuePercent: false,
	init : function(args){
		// 基本初始化
		this.baseInit(this.args.selector);
		// 数据初始化
		var that = this;
	    this.labels = this.args.labels, this.dataset = this.args.series; this.series = this.args.series;
	    // 标题相关
	    this.title = this.args.title != undefined ? this.args.title : this.title;
	    this.titleAlign = this.args.titleAlign != undefined ? this.args.titleAlign : this.titleAlign;
	    this.titleUseHTML = this.args.titleUseHTML != undefined ? this.args.titleUseHTML : this.titleUseHTML;
	    // 边距
	    this.padding = this.args.padding != undefined ? this.args.padding : this.padding;
	    // 单位
	    this.units = this.args.units != undefined ? this.args.units : this.units;
	    // 填充色
	    this.color = this.args.color != undefined ? this.args.color : this.color;
	    // 内外圆半径
	    this.innerRadius = this.args.innerRadius != undefined ? this.args.innerRadius : this.innerRadius;
	    this.outerRadius = this.args.outerRadius != undefined
	    	? this.args.outerRadius
	    	: Math.min(this.width - this.padding.left - this.padding.right, this.height - this.padding.top - this.padding.bottom) / 2;
	    // 半径padding
	    this.radiusPadding = this.args.radiusPadding != undefined ? this.args.radiusPadding : this.radiusPadding;
	    // 最小显示半径
	    this.minPointRadius = this.args.minPointRadius != undefined ? this.args.minPointRadius : this.minPointRadius;
	    // 半径scale反转
	    this.radiusReverse = this.args.radiusReverse != undefined ? this.args.radiusReverse : this.radiusReverse;
	    // 分割线
	    this.splitLineEnable = this.args.splitLineEnable != undefined ? this.args.splitLineEnable : this.splitLineEnable;
	    // 分割padding
	    this.splitPadding = this.args.splitPadding != undefined ? this.args.splitPadding : this.splitPadding;
	    // 数据外圈光晕
	    this.dataHaloEnable = this.args.dataHaloEnable != undefined ? this.args.dataHaloEnable : this.dataHaloEnable;
	    // 中心圆
	    this.centerCircleEnable = this.args.centerCircleEnable != undefined ? this.args.centerCircleEnable : this.centerCircleEnable;
	    this.centerCircleColor = this.args.centerCircleColor != undefined ? this.args.centerCircleColor : this.centerCircleColor;
	    this.centerCircleRadius = this.args.centerCircleRadius != undefined ? this.args.centerCircleRadius : this.centerCircleRadius;
	    this.centerCircleStrokeWidth = this.args.centerCircleStrokeWidth != undefined ? this.args.centerCircleStrokeWidth : this.centerCircleStrokeWidth;
	    this.centerCircleStroke = this.args.centerCircleStroke != undefined ? this.args.centerCircleStroke : this.centerCircleStroke;
	    // 中心tooltip
	    this.centerTooltipEnable = this.args.centerTooltipEnable != undefined ? this.args.centerTooltipEnable : this.centerTooltipEnable;
	    this.centerTooltipColor = this.args.centerTooltipColor != undefined ? this.args.centerTooltipColor : this.centerTooltipColor;
	    // 文字线条
	    this.textLineEnable = this.args.textLineEnable != undefined ? this.args.textLineEnable : this.textLineEnable;
	    this.textLineMaxTimes = this.args.textLineMaxTimes != undefined ? this.args.textLineMaxTimes : this.textLineMaxTimes;
	    this.textLineMinTimes = this.args.textLineMinTimes != undefined ? this.args.textLineMinTimes : this.textLineMinTimes;
	    // 弧形中心点值
	    this.valueEnable = this.args.valueEnable != undefined ? this.args.valueEnable : this.valueEnable;
	    this.valuePercent = this.args.valuePercent != undefined ? this.args.valuePercent : this.valuePercent;
	    
	    // 绘制初始化
	    this.drawInit();
	    this.drawTitle();
	    this.drawData();
	    // 分割线
	    this.drawSplitLine();
	    // 中心圆
		this.drawCenterCircle();
		// 中心tooltip
		this.drawCenterTooltip();
		
		this.taketurns(this.repaint);
	},
	drawInit: function(){
		var that = this;
	    // 定义SVG节点
	    this.classifyArcsGroup = this.svg.append("g");
	    this.splitLineGroup = this.svg.append("g");
	    this.textLineGroup = this.svg.append("g");
	    this.centerCircleGroup = this.svg.append("g");
	    this.centerTooltipGroup = this.svg.append("g");
	    this.valueGroup = this.svg.append("g");
	    this.tooltipText = $("<div/>");
	    // 数据分类总和
	    this.classifyTotalDataset = this.series.map(function(d){
	    	return d3.mean(d.data) * d.data.length;
	    });
	    // 数据分类
    	this.classifyMaxDataset = this.series.map(function(d){
    		return d3.max(d.data);
    	});
	    // 数据分类
    	this.classifyDataset = this.series.map(function(d){
    		return d.data;
    	});
	    // 数据分类
    	this.classifyNameset = this.series.map(function(d){
    		return d.name;
    	});
	    // 数据分类总和角度数据
	    this.classifyTotalPiedata = d3.layout.pie()(this.classifyTotalDataset);
	    this.classifyTotalPiedata = this.classifyTotalPiedata.map(function(d){
	    	d.endAngle = Math.max(0, d.endAngle - that.splitPadding);
	    	return d;
	    });
	    // 颜色比例尺
	    this.colorScale = d3.scale.ordinal().domain(d3.range(this.classifyTotalDataset.length)).range(this.color);
	    // 半径最大比例尺
	    var rangeArray = [this.minPointRadius, this.outerRadius - this.radiusPadding];
	    rangeArray = this.radiusReverse ? rangeArray.reverse() : rangeArray;
	    this.classifyMaxRadiusScale = d3.scale.linear()
	    	.domain([0, d3.max(this.classifyMaxDataset)]).range(rangeArray);
        // 饼图中心点
        this.pieCenterX = (that.width - that.padding.left - that.padding.right) / 2;
        this.pieCenterY = (that.height - that.padding.top - that.padding.bottom) / 2;
	},
	drawTitle:function(){
		var that = this;
		if(this.titleUseHTML){
			var titletext = $("<div/>").css({
				"float": that.titleAlign == "start" ? "left" : "right",
				"width": that.width,
				"height": 30,
				"position":"absolute",
				"top": 25,
				"left": 0
			}).html(this.title);
			this.args.selector.append(titletext);
		}else{
			var titleText = this.svg.append("g").append("text").datum(this.title)
			.attr({
				"x": function(d){
					return that.titleAlign == "start" ? 0 : that.titleAlign == "middle" ? that.width / 2 : that.width;
				},
				"y": function (d) {
					return 30;
				},
				"font-size": "22px",
				"fill": d3.rgb(255, 168, 1).toString(),
				"text-anchor": that.titleAlign,
				"dominant-baseline": "middle"
			}).text(function (d) {
				return d;
			});
		}
	},
    drawData: function(){
    	var that = this;
    	// 清空数据节点组
    	this.classifyArcsGroup.selectAll("*").remove();
        this.classifyArcsGroup.selectAll("g").data(this.classifyTotalPiedata)
        	.enter().append("g")
            .attr({
            	"transform": "translate(" + (that.pieCenterX + that.padding.left) + "," + (that.pieCenterY + that.padding.top) + ")"
            })
            .each(function(d, i){
            	that.drawSingleData(d3.select(this), d, i);
            });
        this.textLineGroup.selectAll("*").remove();
        this.textLineGroup.attr({
        	"transform": "translate(" + (that.pieCenterX + that.padding.left) + "," + (that.pieCenterY + that.padding.top) + ")"
        });
        this.valueGroup.selectAll("*").remove();
        this.valueGroup.attr({
        	"transform": "translate(" + (that.pieCenterX + that.padding.left) + "," + (that.pieCenterY + that.padding.top) + ")"
        });
        this.centerTooltipGroup.selectAll("*").remove();
        this.tooltipText.empty();
    },
    drawSingleData: function(parentGroup, piedata, classifyIdx){
    	var that = this,
	    	classifyData = this.classifyDataset[classifyIdx],
	    	classifyName = this.classifyNameset[classifyIdx];
    	
    	// 数据排序
    	var classify = classifyName.map(function(d, i){
    		return {name:d,data:classifyData[i]};
    	}).sort(function(a, d){
    		return d.data - a.data;
    	});
    	classifyData = classify.map(function(d){
    		return d.data;
    	});
    	classifyName = classify.map(function(d){
    		return d.name;
    	});
    	// 每个分类使用的半径比例尺
    	var classifyRadiusScale = d3.scale.ordinal().domain(d3.range(classifyName.length))
    		.rangeBands([this.classifyMaxRadiusScale(this.classifyMaxDataset[classifyIdx]), that.minPointRadius], 0)
    	var classifyOpacityScale = d3.scale.ordinal().domain(d3.range(classifyName.length)).rangeBands([0.5, 0.9], 0);
    	// 每个分类组的开始角度
        var start = {startAngle: piedata.startAngle, endAngle: piedata.startAngle};
        // 绘制圆弧光晕
        if(this.dataHaloEnable){
        	var arcsHalo = parentGroup.append("g").selectAll("path").data(classifyData).enter().append("path")
        	.attr({
        		"fill": function (d, i) {
        			return that.colorScale(classifyIdx);
        		},
        		"fill-opacity":function(d, i){
        			return classifyOpacityScale(i) + classifyOpacityScale.rangeBand();
        		}
        	}).transition().duration(that.durationTime)
        	.attrTween('d', function (d, i) {
        		var arc = d3.svg.arc().innerRadius(classifyRadiusScale(i) + classifyRadiusScale.rangeBand())
        		.outerRadius(classifyRadiusScale(i) + classifyRadiusScale.rangeBand() + 20);
        		var inter = d3.interpolate(start, piedata);
        		return function (t) {
        			return arc(inter(t));
        		}
        	});
        }
        // 绘制圆弧
    	var arcs = parentGroup.append("g").selectAll("path").data(classifyData).enter().append("path")
    		.attr({
                "fill": function (d, i) {
                    return that.colorScale(classifyIdx);
                },
                "fill-opacity":function(d, i){
                	return classifyOpacityScale(i) + classifyOpacityScale.rangeBand() - 0.4;
                }
    		})
	        .on("mouseover", function(d, i){
	        	zhnx.getTooltip().style({
	        		"opacity": "0.9",
	        		"width": "130px",
	        		"height": "50px",
	        		"line-height": "23px",
	        		"z-index": "99999",
	        		"left": (d3.event.pageX - 75) + "px",
	        		"top": (d3.event.pageY - 67) + "px"
	        	})
	        	.html(that.labels[classifyIdx] + "<br>" + classifyName[i] + ":" + d);
	        })
	        .on("mouseout", function(){
	        	zhnx.getTooltip().style({
	        		"opacity": 0,
	        		"z-index": "-1"
	        	});
	        });
    	// 弧形动画
    	arcs.transition().duration(that.durationTime)
            .attrTween('d', function (d, i) {
            	var arc = d3.svg.arc().innerRadius(that.innerRadius)
            		.outerRadius(classifyRadiusScale(i) + classifyRadiusScale.rangeBand());
                var inter = d3.interpolate(start, piedata);
                return function (t) {
                    return arc(inter(t));
                }
            })
            .each("end", function(){
            	// 最小弧形中心点
            	var minCentroid = d3.svg.arc()
            		.innerRadius(that.innerRadius)
            		.outerRadius(classifyRadiusScale(classifyName.length - 1) + classifyRadiusScale.rangeBand())
            		.centroid(piedata);
            	// 计算最小弧形中心点 数值
            	var minData = d3.min(that.classifyDataset[classifyIdx]);
            	// 文本
            	that.drawTextLine(minData, minCentroid, that.labels[classifyIdx]);
            	// 值
            	arcs.each(function(d, i){
                	var centroid = d3.svg.arc().innerRadius(that.innerRadius)
    	        		.outerRadius(classifyRadiusScale(i) + classifyRadiusScale.rangeBand())
    	        		.centroid(piedata);
        			that.drawValue(centroid, d);
        		})
            });
    },
    drawTextLine: function(minData, minCentroid, label){
    	var that = this, translationX = 40;
    	var rangeArray = [this.textLineMaxTimes, this.textLineMinTimes];
    	rangeArray = this.radiusReverse ? rangeArray.reverse() : rangeArray;
        var textLineScale = d3.scale.linear().domain([0, d3.max(this.classifyTotalDataset)]).range(rangeArray);
        var textLineTimes = textLineScale(minData);
        
        var firstDurationTime = that.textLineEnable ? that.durationTime * 2 / 3 : 0;
        var secondDurationTime = that.textLineEnable ? that.durationTime / 3 : 0;
        
        this.textLineGroup.append("polyline")
        	.attr({
        		"points": function(){
        			return minCentroid.join(",")
    				+ " " +
    				minCentroid.join(",")
    				+ " " +
    				minCentroid.join(",");
        		},
            	"stroke": d3.rgb(255, 255, 255).toString(),
                "fill-opacity": "0",
                "stroke-opacity": that.textLineEnable ? 1 : 0
        	})
        	.transition().duration(firstDurationTime)
        	.attr({
        		"points": function(){
        			return minCentroid.join(",")
    				+ " " +
    				minCentroid.map(function(d){
    					return d * 2 * textLineTimes;
    				}).join(",")
    				+ " " +
    				minCentroid.map(function(d){
    					return d * 2 * textLineTimes;
    				}).join(",");
        		},
        	})
        	.transition().duration(secondDurationTime)
        	.attr({
        		"points": function(){
        			return minCentroid.join(",")
    				+ " " +
    				minCentroid.map(function(d){
    					return d * 2 * textLineTimes;
    				}).join(",")
    				+ " " +
    				minCentroid.map(function(d, i){
    					return i == 0 ? d * 2 * textLineTimes + (d > 0 ? translationX : -translationX) : d * 2 * textLineTimes;
    				}).join(",");
        		},
        	})
        	.each("end", function(){
                that.textLineGroup.append("circle")
    	    	.attr({
    	    		"cx": function(){
            			return minCentroid[0] * 2 * textLineTimes + (minCentroid[0] > 0 ? translationX : -translationX)
    	    		},
    	    		"cy": function(){
            			return minCentroid[1] * 2 * textLineTimes;
    	    		},
    	    		"r": "2",
                    "fill-opacity": that.textLineEnable ? 1 : 0,
            		"fill": d3.rgb(255, 255, 255).toString()
    	    	});
                that.drawText(textLineTimes, minCentroid, label, translationX);
        	});
    },
    drawText: function(textLineTimes, minCentroid, label, translationX){
    	this.textLineGroup.append("text").datum(label)
        	.attr({
        		"x": function(){
        			return minCentroid[0] * 2 * textLineTimes + (minCentroid[0] > 0 ? translationX : -translationX)
        		},
        		"y": function(){
        			return minCentroid[1] * 2 * textLineTimes - 5;
        		},
        		"text-anchor": function(){
        			return minCentroid[0] < 0 ? "start" : "end";
        		},
        		"fill": d3.rgb(255, 255, 255).toString(),
        		"font-size": "16px",
        		"font-family": "黑体",
        		"fill-opacity": 0
        	})
        	.text(function(d){
        		return d;
        	})
        	.transition().duration(this.durationTime / 2)
        	.attr({
        		"fill-opacity": 1
        	});
    	this.changeFontPos(this.textLineGroup,14);
    },
    drawValue: function(centroid, value){
    	var that = this;
    	if(!this.valueEnable){
    		return false;
    	}
    	this.valueGroup.append("text").datum(value)
    		.attr({
    			"x": centroid[0] * 1.2,
    			"y": centroid[1] * 1.2,
        		"fill": "#00FEFF",
        		"font-size": "16px",
        		"font-family": "黑体",
				"text-anchor": "middle",
				"dominant-baseline": "middle",
        		"fill-opacity": 0
    		})
    		.text(function(d, i){
    			if(that.valuePercent){
    				d = d3.round((that.classifyTotalDataset[i] / (d3.mean(that.classifyTotalDataset) * that.classifyTotalDataset.length)) * 100, 2) + "%";
    			}
    			return d;
    		})
        	.transition().duration(this.durationTime / 2)
        	.attr({
        		"fill-opacity": 1
        	});
    },
	drawSplitLine: function(){
		var that = this;
		// 是否绘制分割线
	    if(!this.splitLineEnable){
	    	return false;
	    }
	    // 清空分割线组
        this.splitLineGroup.selectAll("*").remove();
        // 绘制分割线
        this.splitLineGroup.selectAll("line").data(this.classifyTotalPiedata).enter().append("line")
            .attr({
                "transform": "translate(" + this.padding.left + "," + this.padding.top + ")",
                "stroke-width": 1.2,
                "stroke": d3.rgb(255, 255, 255).toString(),
                "x1": that.pieCenterX,
                "y1": that.pieCenterY,
                "x2": that.pieCenterX,
                "y2": that.pieCenterY
            })
            .transition().duration(1000).ease("circle-out")
            .attr({
                "x2": function (d, i) {
            		return that.pieCenterX + Math.sin(d.startAngle) * that.outerRadius;
                },
                "y2": function (d, i) {
            		return that.pieCenterY - Math.cos(d.startAngle) * that.outerRadius;
                }
            });
	},
	drawCenterCircle: function(){
		var that = this;
		if(!this.centerCircleEnable){
			return false;
		}
		this.centerCircleGroup
			.attr({
				"transform": "translate(" + that.padding.left + "," + that.padding.top + ")"
			})
			.append("circle")
			.attr({
				"cx": that.pieCenterX,
				"cy": that.pieCenterY,
				"fill": that.centerCircleColor,
				"r": that.centerCircleRadius,
				"stroke-width": that.centerCircleStrokeWidth,
				"stroke": that.centerCircleStroke,
				"stroke-opacity": 0.4
			});
	},
	drawCenterTooltip: function(){
		var that = this;
		if(!this.centerTooltipEnable){
			return false;
		}
		
		var labelLengthData = this.labels.map(function(d){
			return d.length;
		});
		var lineHeight = 22, tooltipWidth = (d3.max(labelLengthData) + 8) * lineHeight * 2 / 3, tooltipHeight = labelLengthData.length * lineHeight;
		this.centerTooltipGroup
			.attr({
				"transform": "translate(" + that.padding.left + "," + that.padding.top + ")"
			})
			.append("rect")
			.attr({
				"x": that.pieCenterX,
				"y": that.pieCenterY - tooltipHeight,
				"rx": 8,
				"ry": 8,
				"width": tooltipWidth,
				"height": tooltipHeight,
				"fill": that.centerTooltipColor,
				"fill-opacity": 0.5
			});
		this.tooltipText.css({
			"width": tooltipWidth,
			"height": tooltipHeight,
			"position":"absolute",
			"top": that.padding.top + that.pieCenterY - tooltipHeight,
			"left": that.padding.left + that.pieCenterX
		});
		var tooltips = [];
		$.each(this.labels, function(i, d){
			var value = d3.round((that.classifyTotalDataset[i] / (d3.mean(that.classifyTotalDataset) * that.classifyTotalDataset.length)) * 100, 2);
			var oneTooltip = $("<div/>").css({
				"width": "100%",
				"height": lineHeight + "px",
				"line-height": lineHeight + "px",
    			"border-radius": "4px"
			})
			.append($("<span/>")
					.css({
						"float":"left",
						"padding-left":(lineHeight / 2) + "px",
						"font-size": "12px",
						"font-family": "黑体",
						"color": d3.rgb(255, 255, 255).toString()
					}).html(d)
			)
			.append($("<span/>")
					.css({
						"float":"right",
						"padding-right":(lineHeight / 2) + "px",
						"font-size": "12px",
						"font-family": "黑体",
						"color": that.centerCircleColor
					}).html(value + "%")
			).data('value', value);
			tooltips.push(oneTooltip);
		});
		// 排序
		tooltips.sort(function(a, b){
			return b.data('value') - a.data('value');
		});
		for(var i = 0; i < tooltips.length; i++){
			that.tooltipText.append(tooltips[i]);
		}
		this.args.selector.append(this.tooltipText);
	},
	repaint: function(){
		this.drawData();
		this.drawCenterTooltip();
	},
	intervalfunc: function(){
		this.repaint();
	}
});
/**
 * 地图
 * 
 * @param args
 *            zhnx.chart.map({ selector: zhnx.windows.map({ selector:
 *            "#centerZone", title: "地图" }), labels: ["饮水困难人员（万名）",
 *            "饮水困难师生（万名）", "水表个数（个）", "工程数量（项）", "启动智能人饮系统县数（个）"], series: [ {
 *            cities: ["吴忠市", "中卫市", "固原市", "银川市", "石嘴山市"], cdrs: [[106.2886,
 *            37.8675], [105.2368, 37.3825], [106.3589, 35.8593], [106.3586,
 *            38.3375], [106.4495, 38.9015]], cps: [[106.853, 37.3755],
 *            [105.4028, 36.9525], [106.1389, 35.9363], [106.3586, 38.1775],
 *            [106.4795, 39.0015]], data: [56.32, 51.113, 59.26, 15.291, 12.491] }, {
 *            cities: ["吴忠市", "中卫市", "固原市", "银川市", "石嘴山市"], cdrs: [[106.2886,
 *            37.8675], [105.2368, 37.3825], [106.3589, 35.8593], [106.3586,
 *            38.3375], [106.4495, 38.9015]], cps: [[106.853, 37.3755],
 *            [105.4028, 36.9525], [106.1389, 35.9363], [106.3586, 38.1775],
 *            [106.4795, 39.0015]], data: [56.32, 51.113, 59.26, 15.291, 6.491] }, {
 *            cities: ["吴忠市", "中卫市", "固原市", "银川市", "石嘴山市"], cdrs: [[106.2886,
 *            37.8675], [105.2368, 37.3825], [106.3589, 35.8593], [106.3586,
 *            38.3375], [106.4495, 38.9015]], cps: [[106.853, 37.3755],
 *            [105.4028, 36.9525], [106.1389, 35.9363], [106.3586, 38.1775],
 *            [106.4795, 39.0015]], data: [56.32, 51.113, 59.26, 15.291, 6.491] }, {
 *            cities: ["吴忠市", "中卫市", "固原市", "银川市", "石嘴山市"], cdrs: [[106.2886,
 *            37.8675], [105.2368, 37.3825], [106.3589, 35.8593], [106.3586,
 *            38.3375], [106.4495, 38.9015]], cps: [[106.853, 37.3755],
 *            [105.4028, 36.9525], [106.1389, 35.9363], [106.3586, 38.1775],
 *            [106.4795, 39.0015]], data: [56.32, 51.113, 59.26, 15.291, 6.491] }, {
 *            cities: ["吴忠市", "中卫市", "固原市", "银川市", "石嘴山市"], cdrs: [[106.2886,
 *            37.8675], [105.2368, 37.3825], [106.3589, 35.8593], [106.3586,
 *            38.3375], [106.4495, 38.9015]], cps: [[106.853, 37.3755],
 *            [105.4028, 36.9525], [106.1389, 35.9363], [106.3586, 38.1775],
 *            [106.4795, 39.0015]], data: [56.32, 51.113, 59.26, 15.291, 6.491] } ]
 *            });
 */
zhnx.chart.map = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.map.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.map,
	_defaults: {},
	args: {},
	scalePropation: 5500 * 1.74, // 地图缩放比例
	nxcp: [105.9961, 37.3096],
	cities: [
         {"name": "吴忠市", "cdr": [106.2886, 37.8675], "cp": [106.853, 37.3755]},
         {"name": "中卫市", "cdr": [105.2368, 37.3825], "cp": [105.4028, 36.9525]},
         {"name": "固原市", "cdr": [106.292724609375, 36.09349937380574], "cp": [106.1389, 35.9363]},
         {"name": "银川市", "cdr": [106.3586, 38.3375], "cp": [106.3586, 38.1775]},
         {"name": "石嘴山市", "cdr": [106.4495, 38.9015], "cp": [106.4795, 39.0015]}
    ],
    currentLegIdx:0,
    legendTypes:[],
    series:undefined,
    migrationData:undefined,
    antipovertyData:undefined,
	cityNameGroup: undefined,
	cityCpGroup: undefined,
	cityPathGroup: undefined,
	legendGroup:undefined,
	dataGroup: undefined,
	dataMoveInGroup: undefined,
	dataMoveOutGroup: undefined,
	data_group_htm: $("<div/>"),
	projection: undefined,
	currentMapName: "NX",
	currentMapData: "NX",
	durationTime: 800,
	operable: true,
	zoomIn: true,
	zoomOut: true,
	init: function(){
		// 基本初始化
		this.baseInit(this.args.selector);
		// 节点初始化
		this.drawInit();
		// 绘制地图
		this.drawMap(this.args.mapName);
		// 绘制数据
		this.drawData(this.args.mapName);
		// taketurns
		this.taketurns();
	},
	drawInit: function(){
	    // 定义SVG节点
	    this.mapPathGroup = this.svg.append("g");
	    this.cityNameGroup = this.svg.append("g");
	    this.cityCpGroup = this.svg.append("g");
	    // 数据部分
	    this.descriptionlegendGroup = this.svg.append("g");
	    this.dataGroup = this.svg.append("g");
	    // 地图label
	    this.mapMarking = this.svg.append("g");
	},
	drawMap: function(mapName){
		// 初始化数据
		this.currentMapName = mapName;
		// 修改背景图
		$("#center").addClass("centerHasMap").removeClass("centerNoMap");
		// 绘制地图
		switch (mapName) {
		case "NX":
			this.drawMap_Fg(zhnx.cityLocations["NX"].code, this.nxcp, this.scalePropation, this.cities);
			this.drawMap_Bg(mapName, "svg/map/map_nx.svg");
			break;
		case "YC":
			this.drawMap_Fg(zhnx.cityLocations["YC"].code, this.cities[3].cp, this.scalePropation * 2.1, [this.cities[3]]);
			this.drawMap_Bg(mapName, "svg/map/map_yc.svg");
			break;
		case "SZS":
			this.drawMap_Fg(zhnx.cityLocations["SZS"].code, this.cities[4].cp, this.scalePropation * 1.95, [this.cities[4]]);
			this.drawMap_Bg(mapName, "svg/map/map_szs.svg");
			break;
		case "WZ":
			this.drawMap_Fg(zhnx.cityLocations["WZ"].code, this.cities[0].cp, this.scalePropation * 1.7, [this.cities[0]]);
			this.drawMap_Bg(mapName, "svg/map/map_wz.svg");
			break;
		case "GY":
			this.drawMap_Fg(zhnx.cityLocations["GY"].code, this.cities[2].cp, this.scalePropation * 2, [this.cities[2]]);
			this.drawMap_Bg(mapName, "svg/map/map_gy.svg");
			break;
		case "ZW":
			this.drawMap_Fg(zhnx.cityLocations["ZW"].code, this.cities[1].cp, this.scalePropation * 1.85, [this.cities[1]]);
			this.drawMap_Bg(mapName, "svg/map/map_zw.svg");
			break;
		case "XHG":
			this.drawMap_Fg(zhnx.cityLocations["XHG"].code, this.cities[2].cp, this.scalePropation * 2.02, [this.cities[2]]);
			this.drawMap_Bg(mapName, "svg/map/map_xhg.svg");
			break;
		}
	},
	drawMap_Fg: function(cityCode, center, scale, cityNames){
		var that = this, map_offset_left = 5, map_offset_top = 5, codeZn = zhnx.cityCodeAbbrs[cityCode];
		switch(codeZn){
		case "GY":
			map_offset_left = -20;
			map_offset_top = -10;
			break;
		case "WZ":
			map_offset_left = 68;
			map_offset_top = 18;
			break;
		case "ZW":
			map_offset_left = 55;
			map_offset_top = -5;
			break;
		case "XHG":
			map_offset_left = 18;
			map_offset_top = 65;
			break;
		}
        this.projection = d3.geo.mercator().translate([this.width / 2 + map_offset_left, this.height / 2 + map_offset_top]).center(center).scale(scale);
        var cityNameRectWid = 90, cityNameRectHei = 25;
        var geoPath = d3.geo.path().projection(this.projection);
        // 城市中心坐标点
        this.cityCpGroup.selectAll("*").remove();
        this.cityCpGroup.append("g").selectAll("circle").data(cityNames).enter()
        .append("circle")
        .attr({
        	"cx": function(d, i){
        		return that.projection(d.cdr)[0] - 10;
        	},
	        "cy": function (d, i) {
	            return that.projection(d.cdr)[1];
	        },
	        "r": 5,
            "fill": d3.rgb(255, 168, 1).toString()
        });
        // 城市名称背景矩形
        this.cityNameGroup.selectAll("*").remove();
        this.cityNameGroup.append("g").selectAll("rect").data(cityNames).enter()
        .append("rect")
        .attr({
        	"class": "point",
            // 各城市x坐标映射
        	"x": function (d, i) {
                return that.projection(d.cdr)[0];
            },
            // 各城市y坐标映射
            "y": function (d, i) {
                return that.projection(d.cdr)[1] - cityNameRectHei + cityNameRectHei / 2;
            },
            "width": cityNameRectWid,
            "height": cityNameRectHei,
            "fill": "#284e6b",
            "stroke": "#3691C5",
            "stroke-width": "1px"
        });
        this.cityNameGroup.append("g").selectAll("rect").data(cityNames).enter()
        .append("rect")
        .attr({
        	"class": "point",
            // 各城市x坐标映射
        	"x": function (d, i) {
                return that.projection(d.cdr)[0] - 1;
            },
            // 各城市y坐标映射
            "y": function (d, i) {
                return that.projection(d.cdr)[1] - cityNameRectHei + cityNameRectHei / 2 - 2;
            },
            "width": cityNameRectWid,
            "height": cityNameRectHei,
            "fill-opacity": 0,
            "stroke": "#20BFFD",
            "stroke-width": "1px",
            "stroke-dasharray": "30,3,8,20"
        });
        // 城市名称
        this.cityNameGroup.append("g").selectAll("rect").data(cityNames).enter()
        .append("text")
        .attr({
            "class": "citiesName",
            "x": function (d, i) {
                return that.projection(d.cdr)[0];
            },
            "y": function (d, i) {
                return that.projection(d.cdr)[1] - cityNameRectHei + cityNameRectHei / 2;
            },
            "transform": "translate(" + (cityNameRectWid / 2) + "," + (cityNameRectHei / 2) + ")",
            "fill": d3.rgb(255, 168, 1).toString(),
            "text-anchor": "middle",
            "dominant-baseline": "middle",
            "font-family": "Microsoft Yahei"
        })
        .text(function (d) {
            return d.name;
        });
        // 地图
        d3.json("data/" + cityCode + ".json", function (errot, root) {
        	// 清空地图内容
            that.mapPathGroup.selectAll("*").remove();
            // 绘制地图
            var wait = null;
            that.mapPathGroup.selectAll("path").data(root.features).enter()
                .append("path")
                .attr({
                    "stroke": d3.rgb(106, 186, 252).toString(),
                    "stroke-width": 0,
                    "fill": "rgba(0, 0, 0, 0)",
                    "d": function(d, i){
                    	return geoPath(d);
                    }
                })
                .on("click", function(d, i){
                	if(!that.operable){
                		return false;
                	}
                	if (wait) {
                		window.clearTimeout(wait);
                        wait = null;
                	} else {
                		wait = setTimeout(function(e){
                        	if(zhnx.cityCodeAbbrs[d.properties.id] != undefined){
                        		that.mapClick(zhnx.cityCodeAbbrs[d.properties.id]);
                        		that.commandClick({
                        			type: 'click',
                        			context: that.id,
                        			contextType: 'chaObj',
                        			execString: "that.mapClick('" + zhnx.cityCodeAbbrs[d.properties.id] + "')",
                        			execMode: "evalfunc"
                        		});
                        	}
                        	wait = null;
                		}, 300);
                	}
                	d3.event.stopPropagation();
                })
                .on("dblclick", function(d, i){
                	if(!that.operable){
                		return false;
                	}
                	if(!that.zoomIn){
                		return false;
                	}
                	if(zhnx.cityCodeAbbrs[d.properties.id] != undefined){
                		that.mapDbClick(zhnx.cityCodeAbbrs[d.properties.id]);
                		that.commandDbclick({
                			type: 'click',
                			context: that.id,
                			contextType: 'chaObj',
                			execString: "that.mapDbClick('" + zhnx.cityCodeAbbrs[d.properties.id] + "')",
                			execMode: "evalfunc"
                		});
                	}
                	d3.event.stopPropagation();
                });
            that.svg.on("dblclick", function(){
            	if(!that.operable){
            		return false;
            	}
            	if(!that.zoomOut){
            		return false;
            	}
        		that.mapDbClick("NX");
        		that.commandDbclick({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.mapDbClick('NX')",
        			execMode: "evalfunc"
        		});
            	d3.event.stopPropagation();
            });
        });
	},
	drawMap_Bg: function(mapName, map_file_path){
		var that = this;
		d3.xml(map_file_path, function(error, xmlDocument){
			var map_bg_id = "map_chart_bg_svg";
			$("#" + map_bg_id).empty().remove();
			// 加载宁夏地图
			var nx_map_height = 900, nx_map_width = 600;
			if(mapName == "SZS"){
				nx_map_width = 330;
			}else if(mapName == "YC"){
				nx_map_width = 380;
			}
			that.selector.append($(xmlDocument.documentElement).attr("id", map_bg_id).css({
				"position": "absolute",
				"top": (that.height - nx_map_height) / 2,
				"left": (that.width - nx_map_width) / 2,
				"width": nx_map_width,
				"height": nx_map_height,
				"z-index": -1
			}));
		});
	},
	drawMapMarking: function(){
		this.mapMarking.select("text").remove();
		var cityCode = zhnx.cityLocations[this.currentMapData].code, text = "区";
		if(cityCode.startWith("6400")){
			text = "区";
		}else{
			if(cityCode.endWith("00000000")){
				text = "市";
			}else{
				text = "县";
			}
		}
		if(this.currentMapName == 'XHG'){
			text = "西海固";
		}
		this.mapMarking.append("text").attr({
			"x" : this.width / 2,
			"y" : this.height - 40,
			"fill": d3.rgb(255, 168, 1).toString(),
			"font-size": "32px",
			"font-weight": "bold"
		}).text(text);
	},
	drawDataInit: function(urlParams, callback){
		var that = this;
		callback = callback || $.noop;
		// 绘制数据图
		$.ajax({
			url: this.args.url,
			type: "post",
			data: urlParams,
			success: function(d){
				that.series = d;
				callback(d);
			}
		});
	},
	drawData: function(currentMapData){
		currentMapData = currentMapData == 'XHG' ? "GY" : currentMapData;
		var that = this, allType = [], urlParams;
		// svg
		this.dataGroup.attr({
			"id": "data_svg"
		}).selectAll("*").remove();
		// html
		this.data_group_htm.remove();
		this.data_group_htm = $("<div/>").css({
			"position": "absolute",
			"width": this.width,
			"height": this.height,
			"left": 0,
			"top": 0,
			"pointer-events": "none"
		});
		this.selector.append(this.data_group_htm);
		// 初始化数据
		this.currentMapData = currentMapData;
		switch (that.args.drawType) {
		case "Description":
			var cityCode = zhnx.cityLocations[that.currentMapData].code;
			urlParams = {areaCode: cityCode};
			this.drawDataInit(urlParams, function(data){
				that.currentLegIdx = 0;
				$.each(data, function(i, d){
					allType.push(d.type);
				});
				that.legendTypes = allType;
				that.drawDescriptionLegend(allType);
				that.drawDescriptionData();
				that.drawMapMarking();
			});
			break;
		case "Migration":
			var moveInCode = that.args.moveIn, moveOutCode = that.args.moveOut;
			urlParams = {moveInareaCode: that.args.moveIn, moveOutareaCode: that.args.moveOut};
			this.drawDataInit(urlParams, function(data){
				that.migrationData = data;
				that.drawMigrationData(data);
			});
			break;
		case "NotOperable":
			break;
		case "Antipoverty":
			this.drawDataInit(urlParams, function(data){
// console.info(data);
				that.antipovertyData = data;
				var color = ["#12A8E7", "#DB991E"];
				that.drawAntipovertyData(that.antipovertyData, color);
				that.drawAntipovertyLegend(that.antipovertyData, color);
			});
			break;
		}
	},
	drawAntipovertyData: function(data, color){
		var that = this, cps = [[103.743896484375, 38.50948995925553], [107.0562744140625, 36.954281585675965]];
		// 清空节点
		this.dataGroup.selectAll("*").remove();
		for(var i = 0; i < data.length; i++){
			var yearData = data[i].data;
			this.dataGroup.selectAll("circle" + i).data(yearData).enter()
				.append("circle")
				.attr({
					"cx": function(d, i){
						var cp = zhnx.cityLocations[zhnx.cityCodeAbbrs[d.areaCode]].cp;
						return that.projection(cp)[0];
					},
					"cy": function(d, i){
						var cp = zhnx.cityLocations[zhnx.cityCodeAbbrs[d.areaCode]].cp;
						return that.projection(cp)[1];
					},
					"r": 28,
					"fill": color[i]
				});
			this.dataGroup.selectAll("text" + i).data(yearData).enter()
				.append("text")
				.attr({
					"x": function(d, i){
						var cp = zhnx.cityLocations[zhnx.cityCodeAbbrs[d.areaCode]].cp;
						return that.projection(cp)[0];
					},
					"y": function(d, i){
						var cp = zhnx.cityLocations[zhnx.cityCodeAbbrs[d.areaCode]].cp;
						return that.projection(cp)[1];
					},
					"fill": "#FFF",
					"font-size": 16,
		            "text-anchor": "middle",
	                "dominant-baseline": "middle"
				})
				.text(function(d){
					return d.areaName;
				});
			var areaName = [];
			for(var j = 0; j < yearData.length; j++){
				areaName.push(yearData[j].areaName);
			}
			var descContent = "<span class='map_desc_content_legName'>" + areaName.join("、") + "<span>";
			descContent = "<div class='map_desc_content'>" + data[i].year + "脱贫摘帽县<br>" + descContent + "</div>";
			that.drawTongyongRect(cps[i], descContent);
		}
	},
	drawAntipovertyLegend: function(data, color){
		this.antipovertyLegendGroup = this.dataGroup.append("g");
		this.antipovertyLegendGroup.attr({
			"transform": function(){
				return "translate(850, 860)";
			}
		}).selectAll("g").data(data).enter()
		.append("g").attr({
			"transform": function(d, i){
				return "translate(0, " + (i * 25) +")";
			}
		}).each(function(d, i){
			d3.select(this).append("circle").attr({
				"cx": 10,
				"cy": 10,
				"r": 8,
				"fill": function(t, n){
					return color[i];
				}
			});
			d3.select(this).append("text").attr({
				"x": 24,
				"y": 15,
				"fill": "#FFF",
				"font-size": 14,
				"font-family":"Microsoft Yahei"
			}).text(function(d){
				return d.year + "摘帽县";
			});
		});
	},
	reDrawMigrationData: function(currentMapData, moveIn, moveOut){
		if(moveIn != undefined && moveIn != "" && moveIn != null){
			this.args.moveIn = moveIn;
		}
		if(moveOut != undefined && moveOut != "" && moveOut != null){
			this.args.moveIn = moveOut;
		}
		this.drawData(currentMapData);
	},
	drawMigrationData: function(data){
		// 清空节点
		this.dataGroup.selectAll("*").remove();
		this.data_group_htm.empty();
		// 预定义箭头
	    this.dataGroup.append("defs").append("marker").attr({
	    	"id": "moveInMarkerArrow",
	    	"markerWidth": "12",
	    	"markerHeight": "12",
	    	"refX": "6",
	    	"refY": "6",
	    	"orient": "auto"
	    }).append("path").attr({
	    	"d": "M2,2 L10,6 L2,10 L6,6 L2,2",
	    	"fill": "#F8E218"
	    });
	    this.dataGroup.append("defs").append("marker").attr({
	    	"id": "moveOutMarkerArrow",
	    	"markerUnits":"strokeWidth",
	    	"markerWidth": "12",
	    	"markerHeight": "12",
	    	"refX": "6",
	    	"refY": "6",
	    	"orient": "auto"
	    }).append("path").attr({
	    	"d": "M2,2 L10,6 L2,10 L6,6 L2,2",
	    	"fill": "#04FCDA"
	    });
		this.drawMoveInData(data.moveIn);
		this.drawMoveOutData(data.moveOut);
		this.drawMigrationLegend();
	},
	drawMoveInData: function(data){
		var that = this;
	    // 迁徙图数据
	    this.dataMoveInGroup = this.dataGroup.append("g");
	    var moveInCity = zhnx.cityLocations[zhnx.cityCodeAbbrs[this.args.moveIn]], total = 0;
	    var sx = this.projection(moveInCity.cp)[0], sy = this.projection(moveInCity.cp)[1];
	    // 源坐标点
	    this.dataMoveInGroup.append("circle").attr({
	    	"cx": sx,
	    	"cy": sy,
	    	"r": 5,
	    	"fill": "#04FCDA"
	    });
	    this.dataMoveInGroup.append("text").attr({
	    	"x": sx,
	    	"y": sy - 12,
			"fill": "#FFF",
			"font-family":"Microsoft Yahei",
            "text-anchor": "middle"
	    }).text(moveInCity.name);
	    for(var i = 0; i < data.length; i++){
	    	var targetCity = zhnx.cityLocations[zhnx.cityCodeAbbrs[data[i].areaCode]];
		    var tx = that.projection(targetCity.cp)[0], ty = that.projection(targetCity.cp)[1];
		    var linePath = d3.svg.line().interpolate("basis");
		    var middlePoint = [Math.max(sx,tx), (Math.max(sy,ty) - Math.min(sy,ty)) / 4 + Math.min(sy,ty)];
		    var path = that.dataMoveInGroup.append("path")
		    .attr({
		    	"d": linePath([[tx, ty],middlePoint,[sx, sy]]),
		    	"stroke": "#F8E218",
		    	"stroke-width": "2px",
		    	"fill": "none"
		    });
		    var totalLength = path.node().getTotalLength();
			path.attr({
				"stroke-dashoffset": totalLength,
				"stroke-dasharray": totalLength + " " + totalLength
			})
			.transition().duration(that.durationTime * 3).delay(i * 100)
			.attr({
				"stroke-dashoffset": 0
			});
			// 箭头
			that.dataMoveInGroup.append("path").attr({
		    	"d": "M0,0 L0,0",
		    	"fill": "#04FCDA",
		    	"marker-end": "url(#moveInMarkerArrow)"
		    }).transition().duration(that.durationTime * 3).delay(i * 100)
			.attrTween("transform", that.translateAlong(path.node()));
			// 目标坐标点
			that.dataMoveInGroup.append("circle").attr({
		    	"cx": tx,
		    	"cy": ty,
		    	"r": 5,
		    	"fill": "#F8E218"
		    });
			that.dataMoveInGroup.append("text").attr({
		    	"x": tx,
		    	"y": ty - 12,
				"fill": "#FFF",
				"font-family":"Microsoft Yahei",
	            "text-anchor": "middle"
		    }).text(targetCity.name);
			
			var circle = this.dataMoveInGroup.append("circle").attr({
				"r": 2.5,
				"fill": "#FFF",
				"fill-opacity": 0.8,
				"stroke": "none",
				"stroke-width": 2
			}).style({
				"-webkit-tap-highlight-color": "rgba(0,0,0,1)"
			});
			this.lightAnimate(circle, path, this.durationTime * 5, i * 200);
			total += data[i].y;
	    }
	    // 说明信息
		var descContent = "<br><span class='map_desc_content_legName'>迁入<span>"
			+ "<span class='map_desc_content_data'>" + total + "</span>";
	    descContent = "<div class='map_desc_content'>" + moveInCity.name + "移民搬迁户数" + descContent + "</div>";
	    this.drawTongyongRect([103.743896484375, 38.50948995925553], descContent);
	},
	drawMoveOutData: function(data){
	    // 迁徙图数据
	    this.dataMoveOutGroup = this.dataGroup.append("g");
	    var moveOutCity = zhnx.cityLocations[zhnx.cityCodeAbbrs[this.args.moveOut]], total = 0;
	    var sx = this.projection(moveOutCity.cp)[0], sy = this.projection(moveOutCity.cp)[1];
	    for(var i = 0; i < data.length; i++){
	    	var targetCity = zhnx.cityLocations[zhnx.cityCodeAbbrs[data[i].areaCode]];
		    var tx = this.projection(targetCity.cp)[0], ty = this.projection(targetCity.cp)[1];
			// 目标坐标点
		    this.dataMoveOutGroup.append("circle").attr({
		    	"cx": tx,
		    	"cy": ty,
		    	"r": 5,
		    	"fill": "#04FCDA"
		    });
		    this.dataMoveOutGroup.append("text").attr({
		    	"x": tx,
		    	"y": ty - 12,
				"fill": "#FFF",
				"font-family":"Microsoft Yahei",
	            "text-anchor": "middle"
		    }).text(targetCity.name);
		    var linePath = d3.svg.line().interpolate("basis");
		    var middlePoint = [Math.max(sx,tx), (Math.max(sy,ty) - Math.min(sy,ty)) / 4 + Math.min(sy,ty)];
		    var path = this.dataMoveOutGroup.append("path")
		    .attr({
		    	"d": linePath([[sx, sy],middlePoint,[tx, ty]]),
		    	"stroke": "#04FCDA",
		    	"stroke-width": "2px",
		    	"fill": "none"
		    });
		    var totalLength = path.node().getTotalLength();
			path.attr({
				"stroke-dashoffset": totalLength,
				"stroke-dasharray": totalLength + " " + totalLength
			})
			.transition().duration(this.durationTime * 3).delay(i * 100)
			.attr({
				"stroke-dashoffset": 0
			});
			// 箭头
			this.dataMoveOutGroup.append("path").attr({
		    	"d": "M0,0 L0,0",
		    	"fill": "#F8E218",
		    	"marker-end": "url(#moveOutMarkerArrow)"
		    }).transition().duration(this.durationTime * 3).delay(i * 100)
			.attrTween("transform", this.translateAlong(path.node()));
			
			var circle = this.dataMoveOutGroup.append("circle").attr({
				"r": 2.5,
				"fill": "#FFF",
				"fill-opacity": 0.8,
				"stroke": "none",
				"stroke-width": 2
			}).style({
				"-webkit-tap-highlight-color": "rgba(0,0,0,0)"
			});
			this.lightAnimate(circle, path, this.durationTime * 5, i * 100);
			
			// total
			total += data[i].y;
	    }
	    // 源坐标点
	    this.dataMoveInGroup.append("circle").attr({
	    	"cx": sx,
	    	"cy": sy,
	    	"r": 5,
	    	"fill": "#F8E218"
	    });
	    this.dataMoveInGroup.append("text").attr({
	    	"x": sx,
	    	"y": sy - 12,
			"fill": "#FFF",
			"font-family":"Microsoft Yahei",
            "text-anchor": "middle"
	    }).text(moveOutCity.name);
	    // 说明信息
		var descContent = "<br><span class='map_desc_content_legName'>迁出<span>"
			+ "<span class='map_desc_content_data'>" + total + "</span>";
	    descContent = "<div class='map_desc_content'>" + moveOutCity.name + "移民搬迁户数" + descContent + "</div>";
	    this.drawTongyongRect([106.89697265625, 36.97183825093165], descContent);
	},
	drawMigrationLegend: function(){
		this.migrationLegendGroup = this.dataGroup.append("g");
		this.migrationLegendGroup.attr({
			"transform": function(){
				return "translate(800, 760)";
			}
		}).selectAll("g").data(["迁出地", "迁入地"]).enter()
		.append("g").attr({
			"transform": function(d, i){
				return "translate(0, " + (i * 22) +")";
			}
		}).each(function(d, i){
			d3.select(this).append("circle").attr({
				"cx": 10,
				"cy": 10,
				"r": 5,
				"fill": function(){
					return i % 2 == 0 ? "#F8E218" : "#04FCDA";
				}
			});
			d3.select(this).append("text").attr({
				"x": 24,
				"y": 15,
				"fill": "#FFF",
				"font-family":"Microsoft Yahei"
			}).text(d);
		});
	},
	translateAlong: function(path) {
		var l = path.getTotalLength();
		return function(d, i, a) {
			return function(t) {
				var ps = path.getPointAtLength(Math.max(0, t * l - 1));
				var pe = path.getPointAtLength(t * l);
				var angl = Math.atan2(pe.y - ps.y, pe.x - ps.x) * (180 / Math.PI);
				var rot_tran = "rotate(" + angl + ")";
				return "translate(" + pe.x + "," + pe.y + ") " + rot_tran;
			};
		};
	},
	lightAnimate: function(circle, path, durationTime, delayTime){
		var that = this;
		circle.transition()
			.duration(durationTime).delay(delayTime)
			.attrTween("transform", that.translateAlong(path.node()))
			.each("end", function(){
				that.lightAnimate(circle, path, durationTime, delayTime);
			});
	},
	drawDescriptionData: function(){
		var that = this, LegData = this.series[this.currentLegIdx];
		// 如果没有数据
		if(LegData == undefined){
			return false;
		}
		// 清空节点
		this.dataGroup.selectAll("*").remove();
		this.data_group_htm.empty();
		// 绘制地图上的数据
// console.log(LegData)
		$.each(LegData.data, function(i, d){
			// 汇总数据
			if(d.type == 'total'){
				if(that.currentMapName == "NX" && that.currentMapData != "NX"){
					var descContent = "<br><span class='map_desc_content_legName'>" + that.switch2NameZn(LegData.type) + "<span>"
									+ "<span class='map_desc_content_data'>" + d.y + "</span>";
					var total_cp = [103.743896484375, 38.50948995925553], cityName = zhnx.cityLocations[that.currentMapData].name;
					switch (that.currentMapData) {
					case "WZ":
					case "YC":
						total_cp = [103.41430664062499, 37.01571219880126];
						break;
					}
					descContent = "<div class='map_desc_content'>" + cityName + descContent + "</div>";
					that.drawTongyongRect(total_cp, descContent);
				}
				return true;
			}
			// 详细数据
			var iconData = [{iconName:that.switch2IconName(LegData.type), data:100, shap:"circle", shapColor:"#B82333"}];
			var descContent = zhnx.cityLocations[zhnx.cityCodeAbbrs[d.areaCode]].name
							+ "<br><span class='map_desc_content_legName'>" + that.switch2NameZn(LegData.type) + "<span>"
							+ "<span class='map_desc_content_data'>" + d.y + "</span>";
			var cp = zhnx.cityLocations[zhnx.cityCodeAbbrs[d.areaCode]].cp, rp = zhnx.cityLocations[zhnx.cityCodeAbbrs[d.areaCode]].rp;
			that.drawIconGroup(cp, iconData);
			if(that.currentMapName == "NX" && that.currentMapData != "NX"){
				rp = zhnx.cityLocations[zhnx.cityCodeAbbrs[d.areaCode]].rp2;
				descContent = "<div class='map_desc_content_huzhuerji'>" + descContent + "</div>"
				that.drawFazhanxuqiuRect(rp, rp, descContent);
			}else{
				descContent = "<div class='map_desc_content'>" + descContent + "</div>"
				that.drawTongyongRect(rp, descContent);
			}
		});
	},
	drawDescriptionLegend: function(allType){
		var that = this;
		this.descriptionlegendGroup.selectAll("*").remove();
		// 位移信息
		var translate = "translate(800, 700)";
		if(this.currentMapName == 'NX' && this.currentMapData == 'GY'){
			translate = "translate(800, 600)";
		}else if(this.currentMapName == 'ZW'){
			translate = "translate(890, 750)";
		}
		this.descriptionlegendGroup.attr({
			"transform": function(){
				return translate;
			}
		}).selectAll("g").data(allType).enter()
		.append("g").attr({
			"cursor": "pointer",
			"transform": function(d, i){
				return "translate(0, " + (i * 22) +")";
			}
		}).each(function(d, i){
			var legendGroup = this;
			zhnx.utils.loadSvg("svg/ico/" + that.switch2IconName(d) + ".svg", function(importedNode){
				var plane = legendGroup.appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 20,
					"height": 20
				});
				d3.select(legendGroup).append("text").attr({
					"x": 24,
					"y": 15,
					"fill": "#FFF",
					"font-family":"Microsoft Yahei"
				}).text(function(d, i){
					return that.switch2NameZn(d);
				});
			});
		}).on("click", function(d, i){
			that.mapLegendClick(i);
    		that.commandLegendClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.mapLegendClick(" + i + ")",
    			execMode: "evalfunc"
    		});
        	d3.event.stopPropagation();
		});
	},
	drawIconGroup: function(cp, data){
		var that = this, icon_width = 25, icon_height = 25;
		var x = that.projection(cp)[0], y = that.projection(cp)[1];
		$.each(data, function(i, icondata){
			zhnx.utils.loadSvg("svg/ico/" + icondata.iconName + ".svg", function(importedNode){
				if(icondata.shap == "circle"){
					var fillColor = icondata.shapColor;
					try{
						var styleContent = importedNode.getElementsByTagName("style")[0].innerHTML;
						fillColor = styleContent.match(/#\w+/)[0];
					}catch(e){
						console.info(e);
					}
					that.dataGroup.append("circle")
					.attr({
						"cx": x - icon_width / 2 - (i * icon_width * 2),
						"cy": y - icon_height / 2,
						"r": 0,
						"fill": fillColor,
						"fill-opacity":0
					}).transition().duration(that.durationTime).attr({
						"r": icon_width,
						"fill-opacity":0.9
					});
				}
				that.dataGroup.each(function(){
					var plane = this.appendChild(importedNode.cloneNode(true));
					d3.select(plane).attr({
						"width": icon_width,
						"height": icon_height,
						"x": x - icon_width - (i * icon_width * 2),
						"y": y - icon_height,
						"fill-opacity": 0
					}).transition().duration(that.durationTime).attr({
						"fill-opacity": 1
					});
					d3.select(plane).selectAll("path").style({
						"fill": "#FFF"
					});
				});
			});
		});
	},
	drawTongyongRect: function(cp, htmlString){
		var that = this, x = that.projection(cp)[0], y = that.projection(cp)[1], rect_width = 329, rect_height = 159;
		zhnx.utils.loadSvg("svg/rect/tongyong.svg", function(importedNode){
			// svg
			that.dataGroup.each(function(){
				var plane = this.appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": rect_width,
					"height": rect_height,
					"x": x,
					"y": y
				});
				var leftRectGroup = d3.select(plane).select(".tongyong_svg_left_group");
				var rect = d3.select(plane).select("rect"), width = rect.attr("width");
				leftRectGroup.attr({
					"transform": "translate(-" + (rect_width - parseFloat(rect.attr("x"))) + ", 0)"
				}).transition().duration(that.durationTime).ease("circle-out").attr({
					"transform": "translate(" + 0 + ", 0)"
				});
				rect.attr({
					"width": 0
				}).transition().duration(that.durationTime).ease("circle-out").attr({
					"width": width
				});

				// html
				var rectContent = $("<div/>").css({
					"position": "absolute",
					"padding-left": "50px",
					"width": rect_width - 75,
					"height": rect_height,
					"left": x,
					"top": y,
					"opacity": 0
				}).html(htmlString);
				that.data_group_htm.append(rectContent);
				rectContent.delay(that.durationTime).animate({
					"opacity": 1
				}, that.durationTime);
			});
		});
	},
	drawFazhanxuqiuRect: function(startCp, endCp, htmlString){
		var that = this, sx = that.projection(startCp)[0], sy = that.projection(startCp)[1],
			ex = that.projection(endCp)[0], ey = that.projection(endCp)[1],
			rect_width = 280, rect_height = 90;
		zhnx.utils.loadSvg("svg/rect/fazhanxuqiu_tuopinxuqiu.svg", function(importedNode){
			// svg
			that.dataGroup.each(function(){
				// 边框
				var plane = this.appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": rect_width,
					"height": rect_height,
					"x": ex,
					"y": ey,
					"fill-opacity":0.5
				}).transition().duration(that.durationTime).attr({
					"fill-opacity":1
				}).each("end", function(){
					// html
					var rectContent = $("<div/>").css({
						"position": "absolute",
						"padding-left": "50px",
						"width": rect_width - 75,
						"height": rect_height,
						"left": ex,
						"top": ey
					}).html(htmlString);
					that.data_group_htm.append(rectContent);
				});
			});
		});
	},
	switch2IconName: function(key){
		var value = "pingkunrenkou_ren";
		switch (key) {
		case "population":
			value = "pingkunrenkou_ren";
			break;
		case "household":
			value = "pingkunhu_hu";
			break;
		case "village":
			value = "pingkuncun_ge";
			break;
		case "country":
			value = "shejipinkunrenkouxianshu";
			break;
		case "缺水":
			value = "queshui";
			break;
		case "缺劳力":
			value = "quelaoli";
			break;
		case "缺技术":
			value = "quejishu";
			break;
		case "缺土地":
			value = "quetudi";
			break;
		case "缺资金":
			value = "quezijin";
			break;
		case "因学":
			value = "yinxue";
			break;
		case "因残":
			value = "yincan";
			break;
		case "因灾":
			value = "yinzai";
			break;
		case "因病":
			value = "yinbing";
			break;
		case "交通条件落后":
			value = "jiaotongtiaojianluohou";
			break;
		case "自身发展力不足":
			value = "zishenfazhanlibuzu";
			break;
		case "住房改善":
			value = "zhufanggaishan";
			break;
		case "医疗救助":
			value = "yiliaojiuzhu";
			break;
		case "扶持资金":
			value = "fuchijijin";
			break;
		case "技术技能":
			value = "jishujineng";
			break;
		case "教育扶贫":
			value = "jiaoyufuchi";
			break;
		case "社会救助":
			value = "shehuijiuzhu";
			break;
		case "移民搬迁":
			value = "yiminbanqian";
			break;
		case "致富信息":
			value = "zhifuxinxi";
			break;
		case "饮水":
			value = "yinshui";
			break;
		case "养殖需求":
			value = "yangzhifuchi";
			break;
		case "种植需求":
			value = "zhongzhifuchi";
			break;
		case "养殖设施":
			value = "yangzhisheshifuchi";
			break;
		case "种植设施":
			value = "zhongzhisheshifuchi";
			break;
		case "农机设施需求":
			value = "nongjijufuchi";
			break;
		case "技术需求":
			value = "jishuxuqiu";
			break;
		case "个体经营需求":
			value = "getijingyingfuchi";
			break;
		case "广播电视-已通":
			value = "guangbodianshi";
			break;
		case "广播电视-未通":
			value = "guangbodianshi";
			break;
		case "宽带-已通":
			value = "kuandai";
			break;
		case "宽带-未通":
			value = "kuandai";
			break;
		case "手机上网-已通":
			value = "shoujishangwang";
			break;
		case "手机上网-未通":
			value = "shoujishangwang";
			break;
		}
		return value;
	},
	switch2NameZn: function(key){
		var value;
		switch (key) {
		case "population":
			value = "贫困人口数量";
			break;
		case "household":
			value = "贫困户数";
			break;
		case "village":
			value = "涉及贫困人口村数";
			break;
		case "country":
			value = "涉及贫困人口县数";
			break;
		default:
			value = key;
			break;
		}
		return value;
	},
	mapClick: function(mapName){
		this.taketurns();
		this.drawData(mapName);
		// 提供外部接口
		this.click(mapName);
	},
	mapDbClick: function(mapName){
		this.taketurns();
		this.drawMap(mapName);
		this.drawData(mapName);
		// 提供外部接口
		this.dbclick(mapName);
	},
	mapLegendClick: function(i){
		this.currentLegIdx = i;
		this.drawDescriptionData();
		this.taketurns();
		// 提供外部接口
		this.legendClick(i);
	},
	click: function(mapName){
		
	},
	dbclick: function(mapName){
		
	},
	legendClick: function(i){
		
	},
	commandClick: function(commandArgs){
		
	},
	commandDbclick: function(commandArgs){
		
	},
	commandLegendClick: function(commandArgs){
		
	},
	getDataGD3Obj: function(){
		return this.dataGroup;
	},
	repaint: function(){
		switch (this.args.drawType) {
		case "Description":
			this.currentLegIdx = ++ this.currentLegIdx == this.legendTypes.length ? 0 : this.currentLegIdx;
			this.drawDescriptionData();
			break;
		case "Migration":
			this.drawMigrationData(this.migrationData);
			break;
		case "NotOperable":
			break;
		}
	},
	intervalfunc: function(){
		this.repaint();
	},
	destroy: function(){
		$("#center").addClass("centerNoMap").removeClass("centerHasMap");
		if(this.interval){
			clearInterval(this.interval);
		}
		
		if(this.svg != undefined){
			this.svg.selectAll("*").remove();
			this.svg.remove();
		}
		this.svg = null;
	}
});
/**
 * 水平柱图
 * 
 * @param args
 * 
 * var landscapebarwin = zhnx.windows.minor({selector: ".zone", title:
 * "最大耗水量"}); zhnx.chart.landscapeBar({ selector: landscapebarwin, title:
 * "最大耗水量前10大企业", subTitle: "（立方米）", labels: ["银川", "石嘴山", "吴忠", "固原", "中卫"],
 * series: [ [{ year: "2013", company: ["企业1", "企业2", "企业3", "企业4", "企业5",
 * "企业6", "企业7", "企业8", "企业9", "企业10"], data: [25560, 15600, 9600, 8600, 5600,
 * 5600, 3600, 2600, 1500, 250] }, { year: "2014", company: ["企业1", "企业2",
 * "企业3", "企业4", "企业5", "企业6", "企业7", "企业8", "企业9", "企业10"], data: [25560,
 * 15600, 9600, 8600, 5600, 5600, 3600, 2600, 1500, 250] }], [{ year: "2013",
 * company: ["企业1", "企业2", "企业3", "企业4", "企业5", "企业6", "企业7", "企业8", "企业9",
 * "企业10"], data: [25560, 15600, 9600, 8600, 5600, 5600, 3600, 2600, 1500, 250] }, {
 * year: "2014", company: ["企业1", "企业2", "企业3", "企业4", "企业5", "企业6", "企业7",
 * "企业8", "企业9", "企业10"], data: [25560, 15600, 9600, 8600, 5600, 5600, 3600,
 * 2600, 1500, 250] }], [{ year: "2013", company: ["企业1", "企业2", "企业3", "企业4",
 * "企业5", "企业6", "企业7", "企业8", "企业9", "企业10"], data: [25560, 15600, 9600, 8600,
 * 5600, 5600, 3600, 2600, 1500, 250] }, { year: "2014", company: ["企业1", "企业2",
 * "企业3", "企业4", "企业5", "企业6", "企业7", "企业8", "企业9", "企业10"], data: [25560,
 * 15600, 9600, 8600, 5600, 5600, 3600, 2600, 1500, 250] }], [{ year: "2013",
 * company: ["企业1", "企业2", "企业3", "企业4", "企业5", "企业6", "企业7", "企业8", "企业9",
 * "企业10"], data: [25560, 15600, 9600, 8600, 5600, 5600, 3600, 2600, 1500, 250] }, {
 * year: "2014", company: ["企业1", "企业2", "企业3", "企业4", "企业5", "企业6", "企业7",
 * "企业8", "企业9", "企业10"], data: [25560, 15600, 9600, 8600, 5600, 5600, 3600,
 * 2600, 1500, 250] }], [{ year: "2013", company: ["企业1", "企业2", "企业3", "企业4",
 * "企业5", "企业6", "企业7", "企业8", "企业9", "企业10"], data: [25560, 15600, 9600, 8600,
 * 5600, 5600, 3600, 2600, 1500, 250] }, { year: "2014", company: ["企业1", "企业2",
 * "企业3", "企业4", "企业5", "企业6", "企业7", "企业8", "企业9", "企业10"], data: [25560,
 * 15600, 9600, 8600, 5600, 5600, 3600, 2600, 1500, 250] }] ] });
 */
zhnx.chart.landscapeBar = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.landscapeBar.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.landscapeBar,
	args: {},
	_defaults: {},
	series: undefined,
	title: undefined,
	subTitle: undefined,
	padding: {left: 80, right: 60, top: 70, bottom: 30},
	rectPadding: 4,
	rectHeight: 24,
	font12Width: 6,
	colors: [d3.rgb(106, 186, 252), d3.rgb(255, 168, 1), d3.rgb(14, 80, 132)],
	durationTime: 1000,
	cityIndex: 0,
	yearIndex: 0,
	svg: undefined,
    titleGroup: undefined,
    subTitleGroup: undefined,
    xAxisRectGroup: undefined,
    xAxisTextGroup: undefined,
    dataRectGroup: undefined,
    dataTextGroup: undefined,
    yAxisRectGroup: undefined,
    yAxisTextGroup: undefined,
    legRectGroup: undefined,
    legTextGroup: undefined,
	xScale: undefined,
	yScale: undefined,
	opcityScale: undefined,
	colorScale: undefined,
	interval: undefined,
	init: function(){
		// 基本初始化
		this.baseInit(this.args.selector);
		// 参数转换
	    this.series = this.args.series, this.title = this.args.title, this.subTitle = this.args.subTitle, this.city = this.args.labels;
	    // 间距
	    this.padding = this.args.padding != undefined ? this.args.padding : this.padding;
	    
	    this.drawInit();
	    this.drawTitle();
	    this.drawSubTitle();
	    this.drawXAxis();
	    this.drawDataInit();
	    this.taketurns();
	},
	drawInit: function(){
	    // 定义SVG节点
	    this.titleGroup = this.svg.append("g");
	    this.subTitleGroup = this.svg.append("g");
	    this.xAxisRectGroup = this.svg.append("g");
	    this.xAxisTextGroup = this.svg.append("g");
	    this.dataRectGroup = this.svg.append("g");
	    this.dataTextGroup = this.svg.append("g");
	    this.yAxisRectGroup = this.svg.append("g");
	    this.yAxisTextGroup = this.svg.append("g");
	    this.legRectGroup = this.svg.append("g");
	    this.legTextGroup = this.svg.append("g");
	},
	drawTitle: function(){
		var that = this;
	    this.titleGroup.append("text").datum(this.title)
	        .attr({
	            "x": function (d) {
	                return that.width / 2;
	            },
	            "y": function (d) {
	                return 30;
	            },
	            "font-size": "22px",
	            "font-weight":"bold",
	            "font-family": "黑体",
	            "fill": d3.rgb(229, 117, 9).toString(),
	            "text-anchor": "middle",
                "dominant-baseline": "middle"
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawSubTitle: function(){
		var that = this;
	    this.subTitleGroup.append("text").datum(this.subTitle)
	        .attr({
	            "x": function (d) {
	                return that.width - that.padding.right - zhnx.utils.countStringLen(d) * that.font12Width;
	            },
	            "y": function (d) {
	                return that.padding.top - 5;
	            },
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString()
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawXAxis: function(){
		var that = this;
		var oneRectWidth = (this.width - this.padding.left - this.padding.right - (this.rectPadding * this.city.length)) / this.city.length;
		this.xAxisRectGroup.selectAll("rect")
	        .data(this.city).enter().append("rect")
	        .attr({
	            "x": function (d, i) {
	                return (oneRectWidth + that.rectPadding) * i + that.padding.left;
	            },
	            "y": function (d, i) {
	                return that.height - that.padding.bottom;
	            },
	            "width": function (d, i) {
	                return oneRectWidth;
	            },
	            "height": function (d, i) {
	                return that.rectHeight;
	            },
	            "fill": function (d, i) {
                    return that.cityIndex == i ? d3.rgb(255, 168, 1).toString() : "rgba(0, 0, 0, 0)";
                },
	            "stroke": d3.rgb(255, 168, 1).toString(),
                "cursor": "pointer"
	        })
	        .on("click", function(d, i){
	        	that.cityIndex = i;
	    		that.taketurns();
	        	that.repaint();
	        });
		this.xAxisTextGroup.selectAll("text")
	        .data(this.city).enter().append("text")
	        .attr({
	            "x": function (d, i) {
	                return (oneRectWidth + that.rectPadding) * i + that.padding.left + oneRectWidth / 2;
	            },
	            "y": function (d, i) {
	                return that.height - that.padding.bottom + that.rectHeight / 2;
	            },
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString(),
                "text-anchor": "middle",
                "dominant-baseline": "middle",
                "cursor": "pointer"
	        })
	        .text(function (d) {
	            return d;
	        })
	        .on("click", function(d, i){
	        	that.cityIndex = i;
	        	that.taketurns();
	        	that.repaint();
	        });
	},
	drawDataInit: function(){
        // 定义一个数组
        var citySeries = this.series[this.cityIndex], company = citySeries[this.yearIndex].company, dataset = citySeries[this.yearIndex].data;
        var years = citySeries.map(function (d, i) {
            return d.year;
        });
        // x轴的比例尺
        this.xScale = d3.scale.linear().domain([0, d3.max(dataset)]).range([this.width - this.padding.left - this.padding.right - 50, 0]);
        // y轴的比例尺
        this.yScale = d3.scale.ordinal().domain(d3.range(dataset.length)).rangeBands([0, this.height - this.padding.top - this.padding.bottom], 0.05);
        // 透明度比例尺
        this.opcityScale = d3.scale.linear().domain([0, dataset.length]).range([1, 0.2]);
        // 颜色比例尺
        this.colorScale = d3.scale.ordinal().domain(d3.range(years.length)).range(this.colors);
        
        // 清空重绘数据节点
		this.dataRectGroup.selectAll("*").remove();
		this.dataTextGroup.selectAll("*").remove();
		this.yAxisRectGroup.selectAll("*").remove();
		this.yAxisTextGroup.selectAll("*").remove();
		this.legRectGroup.selectAll("*").remove();
		this.legTextGroup.selectAll("*").remove();
        // 绘制数据相关节点
        this.drawYAxis(company, dataset);
        this.drawData(dataset);
	    this.drawLegend(years);
	},
	drawYAxis: function(company, dataset){
		var that = this;
		var yAxis = this.yAxisTextGroup.attr({
	        "transform": "translate(" + (that.width - that.padding.right) + "," + that.padding.top + ")"
	    }).call(d3.svg.axis().scale(that.yScale).orient("right"));
		yAxis.selectAll("text").data(company)
			.attr({
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString()
	        }).text(function (d) {
		        return d;
		    });
		yAxis.select("path")
			.attr({
				"fill": "none"
			});
	},
	drawData: function(dataset){
		var that = this;
        this.dataRectGroup.attr("class", "barRectGroup").selectAll("rect")
	        .data(dataset).enter().append("rect")
	        .attr({
	            "transform": "translate(" + that.padding.left + "," + that.padding.top + ")",
	            "fill": that.colorScale(that.yearIndex),
	            "fill-opacity": function (d, i) {
	                return that.opcityScale(i);
	            },
	            "x": that.width - that.padding.right - that.padding.left,
	            "width": 0
	        })
	        .transition().duration(that.durationTime)
	        .attr({
	            "x": function (d) {
	                return that.xScale(d);
	            },
	            "y": function (d, i) {
	                return that.yScale(i) + that.rectPadding / 2;
	            },
	            "width": function (d) {
	                return that.width - that.padding.left - that.padding.right - that.xScale(d);
	            },
	            "height": that.yScale.rangeBand() - that.rectPadding
	        });
        this.dataTextGroup.selectAll("text")
	        .data(dataset).enter().append("text").attr("transform", "translate(" + that.padding.left + "," + that.padding.top + ")")
	        .attr({
	            "x": function (d, i) {
	                return that.width - that.padding.left - that.padding.right - (d.toString().length * 6) - 10;
	            },
	            "y": function (d, i) {
	                return that.yScale(i) + that.yScale.rangeBand() / 2;
	            },
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(106, 186, 252).toString(),
	            "dominant-baseline": "middle"
	        })
	        .transition().duration(0).delay(that.durationTime)
	        .attr({
	            "fill": d3.rgb(255, 255, 255).toString()
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawLegend: function(years){
		var that = this;
		var legends = this.legRectGroup.selectAll("g")
	        .data(years).enter().append("g")
	        .attr({
	            "transform": function (d, i) {
	                return "translate(" + 6 + "," + (that.padding.top + ((that.rectPadding + 12) * i) + 12) + ")";
	            },
                "cursor": "pointer"
	        }).on("click", function (d, i) {
	        	that.yearIndex = i;
	        	that.legendClick();
	        });
		legends.append("rect")
	        .attr({
	            "width": 12,
	            "height": 12,
	            "fill": function (d, i) {
	                return that.colorScale(i);
	            }
	        });
		legends.append("text")
	        .attr({
	            "x": function (d, i) {
	                return 18;
	            },
	            "y": 6,
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString(),
	            "dominant-baseline": "middle"
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawXAxisFocus: function(){
		var that = this;
		this.xAxisRectGroup.selectAll("rect")
			.attr({
                "fill": function (d, i) {
                    return that.cityIndex == i ? d3.rgb(255, 168, 1).toString() : "rgba(0, 0, 0, 0)";
                }
            });
	},
	legendClick: function(){
		this.taketurns();
		this.repaint();
	},
	repaint: function(){
		this.drawXAxisFocus();
		this.drawDataInit();
	},
	intervalfunc: function(){
		this.cityIndex = ++ this.cityIndex == this.city.length ? 0 : this.cityIndex;
		this.repaint();
	}
});
/**
 * 雨点图 zhnx.chart.raindropBar({ selector: raindropchartwin, title: "现代水利基础设施数量",
 * labels: ["2013年", "2014年", "2015年"], series: [{ name: "银川", data: [4000,
 * 8000, 16000] }, { name: "石嘴山", data: [5000, 9000, 14000] }, { name: "吴忠",
 * data: [3000, 9000, 13000] }, { name: "固原", data: [5000, 11000, 15000] }, {
 * name: "中卫", data: [2000, 6000, 11000] }] });
 * 
 * @param args
 */
zhnx.chart.raindropBar = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.raindropBar.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.raindropBar,
	args: {},
	_defaults: {},
	padding: {left: 80, right: 0, top: 70, bottom: 40},
	font12Height: 12,
	font12Width: 6,
	font28Height: 28, 
	font28Width: 14,
	raindropWidth: 10,
	raindropHeight: 16.2,
	unit: 1000,
	series: undefined,
	title: undefined,
	labels: undefined,
	svg: undefined,
	xScale: undefined,
	yScale: undefined,
	yAxisData: undefined,
	init: function(){
		// 基本初始化
		this.baseInit(this.args.selector);
		
	    this.series = this.args.series, this.title = this.args.title, this.labels = this.args.labels;
	    
	    this.drawInit();
	    this.drawTitle();
	    this.drawSubTitle();
	    this.drawXAxis();
	    this.drawYAxis();
	    this.drawData();
	    this.taketurns();
	},
	drawInit: function(){
	    // 定义水滴数据节点
		this.svg.append("defs").append("g").attr({
	        "id": "raindrop_FILL"
	    }).append("path").attr({
	        "fill": "#11B3FF",
	        "stroke": "none",
	        "d": "M 6.4 19.15 Q 7.9 20.6 9.95 20.6 12.05 20.6 13.5 19.15 14.95 17.7 14.95 15.6 14.95 13.85 13.9" +
	        	 " 12.5 12.25 9.75 9.85 4.4 7.9 9.7 6.05 12.5 5.9 12.65 5.8 12.8 4.95 14.05 4.95 15.6 4.95 17.7 6.4 19.15 Z"
	    });
		this.dataGroup = this.svg.append("g");
	},
	drawTitle: function(){
		var that = this;
	    this.svg.append("g").append("text").datum(this.title)
	        .attr({
	            "x": function (d) {
	                return (that.width - zhnx.utils.countStringLen(d) * that.font28Width) / 2;
	            },
	            "y": function (d) {
	                return 35;
	            },
	            "font-size": "22px",
	            "fill": d3.rgb(229, 117, 9).toString()
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawSubTitle: function(){
		var that = this;
	    var subTitleText = this.svg.append("g").datum("=1千台")
	        .attr({
	            "transform": function (d) {
	                return "translate(" + (that.width - that.padding.right - (that.raindropWidth * 3) - zhnx.utils.countStringLen(d) * that.font12Width) + "," + (that.padding.top - 20) + ")"
	            }
	        });
	    subTitleText.append("use").attr({
	        "xlink:href": "#raindrop_FILL"
	    });
	    subTitleText.append("g")
	        .attr({
	            "transform": function (d) {
	                return "translate(" + (that.raindropWidth * 2) + "," + (that.font12Height * 1.5) + ")"
	            }
	        })
	        .append("text").datum("=1千台")
	        .attr({
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString()
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawXAxis: function(){
		var that = this;
	    // X轴
	    this.xScale = d3.scale.ordinal().domain(d3.range(this.labels.length)).rangeBands([0, this.width - this.padding.left - this.padding.right], 0.2);
	    var xAxis = this.svg.append("g").attr({
	        "transform": "translate(" + that.padding.left + "," + (that.height - that.padding.bottom) + ")"
	    }).call(d3.svg.axis().scale(this.xScale).orient("bottom"));
	    xAxis.selectAll("text").data(this.labels)
	        .attr({
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString()
	        }).text(function (d) {
	        return d;
	    });
	    xAxis.select("path").attr({
	        "fill": "rgba(0,0,0,0)"
	    });
	},
	drawYAxis: function(){
		var that = this;
		this.yAxisData = d3.map(this.series, function (d) {
				            return d.name;
				        }).keys();
	    this.yScale = d3.scale.ordinal().domain(d3.range(this.series.length)).rangeBands([0, this.height - this.padding.top - this.padding.bottom], 0.2);
	    var yAxis = this.svg.append("g")
	        .attr({
	            "transform": "translate(" + that.padding.left + "," + that.padding.top + ")"
	        }).call(d3.svg.axis().scale(this.yScale).orient("left"));

	    yAxis.selectAll("text").data(this.yAxisData)
	        .attr({
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString()
	        }).text(function (d) {
	        return d;
	    });
	    yAxis.select("path").attr({
	        "fill": "rgba(0,0,0,0)"
	    });
	},
	drawData: function(){
		var that = this;
	    // 绘制数量
	    var dataset = d3.map(this.series, function (d) {
	        return d.data
	    }).keys();
	    // 清空节点
	    this.dataGroup.selectAll("*").remove();
	    this.dataGroup.selectAll("g").data(dataset).enter()
	        .append("g")
	        .attr({
	            "transform": function (d, i) {
	                return "translate(" + that.padding.left + "," + (that.padding.top + that.yScale(i)) + ")";
	            }
	        })
	        .each(function (d, i) {
	        	that.drawShape(this, d, i);
	        });
	},
	drawShape: function(raindropGroup, d, rowNum){
		var that = this;
        d3.select(raindropGroup).selectAll("g").data(d.split(",")).enter()
            .append("g")
            .attr({
                "transform": function (d, i) {
                    return "translate(" + that.xScale(i) + ", 0)";
                }
            })
            .each(function (d, i) {
                // raindropNum 雨滴数、 scaleNum 缩放比例、splitNum 缩放数、 modulo 换行数
                var raindropNum = Math.floor(parseInt(d) / that.unit), scaleNum = 1, splitNum = 5, modulo = raindropNum > 2 * splitNum ? 2 * splitNum : splitNum;
                if (raindropNum <= splitNum) {
                    scaleNum = 1.5;
                } else if (raindropNum > 2 * splitNum) {
                    scaleNum = 0.5;
                }
                d3.select(this).selectAll("g").data(d3.range(raindropNum))
                	.enter().append("g")
                    .attr({
                        "transform": function (d, i) {
                            var matrix = "matrix( 1, 0, 0, 1, 0,0)";
                            var translateX = (i % modulo) * (that.raindropWidth * scaleNum);
                            var translateY = (Math.floor(i / modulo) % modulo * (that.raindropHeight * scaleNum));
                            var translate = "translate(" + translateX + ", " + translateY + ")";
                            var scale = "scale(" + scaleNum + ")";
                            return matrix + " " + translate + " " + scale;
                        }
                    })
                    .append("use")
                    .attr({
                        "xlink:href": "#raindrop_FILL",
                        "fill-opacity":0
                    })
                    .transition().duration(500).delay(function(d, i){
                    	return i * 200
                    }).ease("circle-out")
                    .attr({
                        "fill-opacity":1
                    });
            })
	        .on("mouseover", function(d, i){
	        	zhnx.getTooltip().style({
	        		"opacity": "0.9",
	        		"width": "130px",
	        		"height": "50px",
	        		"line-height": "23px",
	        		"z-index": "99999",
	        		"left": (d3.event.pageX - 75) + "px",
	        		"top": (d3.event.pageY - 67) + "px"
	        	})
	        	.html(that.yAxisData[rowNum] + "<br>" + that.labels[i] + ":" + d + "台");
	        })
	        .on("mouseout", function(){
	        	zhnx.getTooltip().style({
	        		"opacity": 0,
	        		"z-index": "-1"
	        	});
	        });
	},
	repaint: function(){
		this.drawData();
	}
});

/**
 * 人口雨点图 zhnx.chart.peopleBar({ selector: raindroppeoplechartwin, title:
 * "启动智能人饮系统县数", labels: ["2013年", "2014年", "2015年"], series: [{ name: "银川",
 * data: [4, 8, 16] }, { name: "石嘴山", data: [5, 9, 14] }, { name: "吴忠", data:
 * [3, 9, 13] }, { name: "固原", data: [5, 11, 15] }, { name: "中卫", data: [2, 6,
 * 11] }] });
 * 
 * @param args
 */
zhnx.chart.peopleBar = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.peopleBar.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.peopleBar,
	args: {},
	_defaults: {},
	padding: {left: 50, right: 0, top: 40, bottom: 40},
	font12Height: 12,
	font12Width: 6,
	font28Height: 28, 
	font28Width: 14,
	peopleWidth: 10,
	peopleHeight: 30,
	unit: 1,
	series: undefined,
	title: undefined,
	labels: undefined,
	yAxisData: undefined,
	svg: undefined,
	xScale: undefined,
	yScale: undefined,
	init: function(){
		// 基本初始化
		this.baseInit(this.args.selector);
		
	    this.series = this.args.series, this.title = this.args.title, this.labels = this.args.labels;

	    this.drawInit();
	    this.drawTitle();
	    this.drawXAxis();
	    this.drawYAxis();
	    this.drawData();
	    this.taketurns();
	},
	drawInit: function(){
	    // 定义人员数据背景节点
		this.svg.append("defs").append("g").attr({
	        "id": "raindropPeopleBg_FILL"
	    }).append("path").attr({
	        "fill": d3.rgb(10, 66, 106).toString(),
	        "stroke": "none",
	        "d": "M 8.4 4.7" +
	        " L 5.9 4.7" +
	        " Q 6.2 4.55 6.45 4.25 7.2 3.55 7.2 2.5 7.2 1.45 6.45 0.7 5.75 0 4.7 0 3.65 0 2.9 0.7 2.2 1.45 2.2 2.5 2.2 3.55 2.9 4.25 3.2 4.55 3.5 4.7" +
	        " L 1 4.7" +
	        " Q 0 4.7 0 5.7" +
	        " L 0 20.65" +
	        " Q 0 21.65 1 21.65" +
	        " L 1.95 21.65 1.95 28.5" +
	        " Q 1.95 30 3.45 30" +
	        " L 5.95 30" +
	        " Q 7.45 30 7.45 28.5" +
	        " L 7.45 21.65 8.4 21.65" +
	        " Q 9.4 21.65 9.4 20.65" +
	        " L 9.4 5.7" +
	        " Q 9.4 4.7 8.4 4.7 Z"
	    });
	    // 定义人员数据节点
		this.svg.append("defs").append("g").attr({
	        "id": "raindropPeople_FILL"
	    }).append("path").attr({
	        "fill": "#00BEFD",
	        "stroke": "none",
	        "d": "M 8.4 4.7" +
	        " L 5.9 4.7" +
	        " Q 6.2 4.55 6.45 4.25 7.2 3.55 7.2 2.5 7.2 1.45 6.45 0.7 5.75 0 4.7 0 3.65 0 2.9 0.7 2.2 1.45 2.2 2.5 2.2 3.55 2.9 4.25 3.2 4.55 3.5 4.7" +
	        " L 1 4.7" +
	        " Q 0 4.7 0 5.7" +
	        " L 0 20.65" +
	        " Q 0 21.65 1 21.65" +
	        " L 1.95 21.65 1.95 28.5" +
	        " Q 1.95 30 3.45 30" +
	        " L 5.95 30" +
	        " Q 7.45 30 7.45 28.5" +
	        " L 7.45 21.65 8.4 21.65" +
	        " Q 9.4 21.65 9.4 20.65" +
	        " L 9.4 5.7" +
	        " Q 9.4 4.7 8.4 4.7 Z"
	    });
		this.dataGroup = this.svg.append("g");
	},
	drawTitle: function(){
		var that = this;
	    this.svg.append("g").append("text").datum(this.title)
	        .attr({
	            "x": function (d) {
	                return that.width / 2;
	            },
	            "y": function (d) {
	                return 25;
	            },
	            "font-size": "22px",
	            "fill": d3.rgb(255, 168, 1).toString(),
	            "text-anchor": "middle",
	            "dominant-baseline": "middle"
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawXAxis: function(){
		var that = this;
	    this.xScale = d3.scale.ordinal().domain(d3.range(this.labels.length)).rangeBands([0, this.width - this.padding.left - this.padding.right], 0.2);
	    var xAxis = this.svg.append("g").attr({
	        "transform": "translate(" + that.padding.left + "," + (that.height - that.padding.bottom) + ")"
	    }).call(d3.svg.axis().scale(this.xScale).orient("bottom").tickPadding(10));
	    xAxis.selectAll("text").data(this.labels)
	        .attr({
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString()
	        }).text(function (d) {
	        return d;
	    });
	    xAxis.select("path").attr({
	        "fill": "rgba(0,0,0,0)"
	    });
	},
	drawYAxis: function(){
		var that = this;
		this.yAxisData = d3.map(this.series, function (d) {
				            return d.name;
				        }).keys();
	    this.yScale = d3.scale.ordinal().domain(d3.range(this.series.length)).rangeBands([0, this.height - this.padding.top - this.padding.bottom], 0.2);
	    var yAxis = this.svg.append("g")
	        .attr({
	            "transform": "translate(" + that.padding.left + "," + that.padding.top + ")"
	        }).call(d3.svg.axis().scale(this.yScale).orient("left"));

	    yAxis.selectAll("text").data(this.yAxisData)
	        .attr({
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString(),
	            "text-anchor": "middle",
	            "dominant-baseline": "middle"
	        }).text(function (d) {
	        return d;
	    });
	    yAxis.select("path").attr({
	        "fill": "rgba(0,0,0,0)"
	    });
	},
	drawData: function(){
		var that = this;
	    // 绘制数量
	    var dataset = d3.map(this.series, function (d) {
	        return d.data
	    }).keys();
	    this.dataGroup.selectAll("*").remove();
	    this.dataGroup.selectAll("g").data(dataset).enter()
	        .append("g")
	        .attr({
	            "transform": function (d, i) {
	                return "translate(" + that.padding.left + "," + (that.padding.top + that.yScale(i)) + ")";
	            }
	        })
	        .each(function (d, i) {
	        	that.drawShape(this, d, i);
	        });
	},
	drawShape: function(peopleGroup, d, rowNum){
		var that = this;
        d3.select(peopleGroup).selectAll("g").data(d.split(",")).enter()
        .append("g")
        .attr({
            "transform": function (d, i) {
                return "translate(" + that.xScale(i) + ", 0)";
            }
        })
        .each(function (d, i) {
            // peopleNum 人员数、 scaleNum 缩放比例、splitNum 缩放数、 modulo 换行数
            var peopleNum = Math.floor(parseInt(d) / that.unit), scaleNum = 0.6, splitNum = 5, modulo = peopleNum > 2 * splitNum ? 2 * splitNum : splitNum;
            if (peopleNum <= splitNum) {
                scaleNum = 0.7;
            } else if (peopleNum > 2 * splitNum) {
                scaleNum = 0.5;
            }
            // 人员图标背景
            d3.select(this).selectAll("g").data(d3.range(Math.ceil(peopleNum / modulo) * modulo)).enter()
                .append("g")
                .attr({
                    "transform": function (d, i) {
                        var matrix = "matrix( 1, 0, 0, 1, 0,0)";
                        var translateX = (i % modulo) * (that.peopleWidth * scaleNum);
                        var translateY = (Math.floor(i / modulo) % modulo * (that.peopleHeight * scaleNum));
                        var translate = "translate(" + translateX + ", " + translateY + ")";
                        var scale = "scale(" + scaleNum + ")";
                        return matrix + " " + translate + " " + scale;
                    }
                }).append("use")
                .attr({
                    "xlink:href": "#raindropPeopleBg_FILL"
                });
            d3.select(this).selectAll(".raindropPeople").data(d3.range(peopleNum)).enter()
                .append("g")
                .attr({
                    "transform": function (d, i) {
                        var matrix = "matrix( 1, 0, 0, 1, 0,0)";
                        var translateX = (i % modulo) * (that.peopleWidth * scaleNum);
                        var translateY = (Math.floor(i / modulo) % modulo * (that.peopleHeight * scaleNum));
                        var translate = "translate(" + translateX + ", " + translateY + ")";
                        var scale = "scale(" + scaleNum + ")";
                        return matrix + " " + translate + " " + scale;
                    }
                }).append("use")
                .attr({
                    "xlink:href": "#raindropPeople_FILL",
                    "fill-opacity":0
                })
                .transition().duration(500).delay(function(d, i){
                	return i * 100
                })
                .attr({
                    "fill-opacity":1
                });
        })
        .on("mouseover", function(d, i){
        	zhnx.getTooltip().style({
        		"opacity": "0.9",
        		"width": "120px",
        		"height": "45px",
        		"line-height": "20px",
        		"z-index": "99999",
        		"left": (d3.event.pageX - 75) + "px",
        		"top": (d3.event.pageY - 67) + "px"
        	})
        	.html(that.yAxisData[rowNum] + "<br>" + that.labels[i] + ":" + d + "个");
        })
        .on("mouseout", function(){
        	zhnx.getTooltip().style({
        		"opacity": 0,
        		"z-index": "-1"
        	});
        });
	},
	repaint: function(){
		this.drawData();
	}
});

/**
 * 饼状柱图
 * 
 * @param args
 *            var piebarwin = zhnx.windows.minor({selector: ".zone", title:
 *            "供水保障率"}); zhnx.chart.pieBar({ selector: piebarwin, title:
 *            "供水保障率", labels: ["2013年", "2014年", "2015年"], series: [{ name:
 *            "银川", data: [0.4, 0.8, 0.16] }, { name: "石嘴山", data: [0.5, 0.9,
 *            0.14] }, { name: "吴忠", data: [0.3, 0.9, 0.13] }, { name: "固原",
 *            data: [0.5, 0.11, 0.15] }, { name: "中卫", data: [0.2, 0.6, 0.11] }]
 *            });
 */
zhnx.chart.pieBar = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.pieBar.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.pieBar,
	args: {},
	_defaults: {},
	padding: {left: 20, right: 0, top: 50, bottom: 40},
	font12Height: 12,
	font12Width: 6,
	font28Height: 28, 
	font28Width: 14,
	series: undefined,
	title: undefined,
	labels: undefined,
	innerRadius: 14,
	outerRadius: 17,
	durationTime: 2000,
	svg: undefined,
	xScale: undefined,
	yScale: undefined,
	dataset: undefined,
	interval: undefined,
	init: function(){
		// 基本初始化
		this.baseInit(this.args.selector);
		
	    this.series = this.args.series, this.title = this.args.title, this.labels = this.args.labels;

	    this.drawInit();
	    this.drawTitle();
	    this.drawXAxis();
	    this.drawYAxis();
	    this.drawData();
	    this.taketurns();
	},
	drawInit: function(){
		this.dataset = d3.map(this.series, function (d) {
	        return d.data
	    }).keys();
		
		this.dataGroup = this.svg.append("g");
	},
	drawTitle: function(){
		var that = this;
	    var titleText = this.svg.append("g").append("text").datum(this.title)
	        .attr({
	            "x": function (d) {
	                return that.width / 2;
	            },
	            "y": function (d) {
	                return 30;
	            },
	            "font-size": "22px",
	            "fill": d3.rgb(255, 168, 1).toString(),
	            "text-anchor": "middle",
	            "dominant-baseline": "middle"
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawXAxis: function(){
		var that = this;
	    this.xScale = d3.scale.ordinal().domain(d3.range(this.labels.length)).rangeBands([0, this.width - this.padding.left - this.padding.right], 0.05);
	    var xAxis =this.svg.append("g").attr({
	        "transform": "translate(" + that.padding.left + "," + (that.height - that.padding.bottom) + ")"
	    }).call(d3.svg.axis().scale(this.xScale).orient("bottom"));
	    xAxis.selectAll("text").data(this.labels)
	        .attr({
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString()
	        }).text(function (d) {
	        return d;
	    });
	    xAxis.select("path").attr({
	        "fill": "rgba(0,0,0,0)"
	    });
	},
	drawYAxis: function(){
		var that = this;
	    this.yScale = d3.scale.ordinal().domain(d3.range(this.series.length)).rangeBands([0, this.height - this.padding.top - this.padding.bottom], 0.1);
	    var yAxis = this.svg.append("g")
	        .attr({
	            "transform": "translate(" + (that.padding.left + that.xScale.rangeBand() / 3) + "," + that.padding.top + ")"
	        }).call(d3.svg.axis().scale(this.yScale).orient("left"));

	    yAxis.selectAll("text").data(d3.map(this.series, function (d) {
	            return d.name;
	        }).keys())
	        .attr({
	            "font-size": "12px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString()
	        }).text(function (d) {
	        return d;
	    });
	    yAxis.select("path").attr({
	        "fill": "rgba(0,0,0,0)"
	    });
	},
	drawData: function(){
		var that = this;
		this.dataGroup.selectAll("*").remove();
    	this.dataGroup.selectAll("g").data(this.dataset).enter()
        .append("g")
        .attr({
            "transform": function (d, i) {
                return "translate(" + that.padding.left + "," + (that.padding.top + that.yScale(i)) + ")";
            }
        })
        .each(function (d, i) {
        	that.drawShape(this, d, i);
        });
	},
	drawShape: function(circleGroup, d, i){
		var that = this;
        d3.select(circleGroup).selectAll("g").data(d.split(",")).enter()
        .append("g")
        .attr({
            "transform": function (d, i) {
                return "translate(" + that.xScale(i) + ", 0)";
            }
        })
        .each(function (d, i) {
            var data = [d, 1 - d], pie = d3.layout.pie(), piedata = pie(data);
            piedata.sort(function (a, b) {
                return data[0] == a ? 1 : -1;
            });
            for (var i = 0; i < piedata.length; i++) {
                var angleObj = piedata[i], angle = angleObj.endAngle - angleObj.startAngle;
                var startAngle = i == 0 ? 0 : piedata[i - 1].endAngle;
                var endAngle = startAngle + angle;
                angleObj.startAngle = startAngle;
                angleObj.endAngle = endAngle;
            }
            
            var arc = d3.svg.arc().innerRadius(that.innerRadius).outerRadius(that.outerRadius);
            var groups = d3.select(this).selectAll("g").data(piedata).enter()
                .append("g")
                .attr({
                    "transform": "translate(" + (that.xScale.rangeBand() / 2) + "," + (that.yScale.rangeBand() / 2) + ")"
                });
            groups.append("path")
                .attr({
                    "fill": function (d, i) {
                        return ["#00BEFD", d3.rgb(10, 66, 106).toString()][i % 2];
                    }
                })
                .transition().duration(that.durationTime)
                .attrTween('d', function (finish) {
                    var start = {
                        startAngle: 0,
                        endAngle: 0
                    };
                    var i = d3.interpolate(start, finish);
                    return function (d) {
                        return arc(i(d));
                    }
                });

            groups.append("text").datum(d)
                .attr({
                    "fill": "#00BEFD",
                    "font-size": "12px",
                    "dy": "2px",
                    "text-anchor": "middle",
                    "dominant-baseline": "middle"
                })
                .text(function (d) {
                    return d3.round(d * 100, 2) + "%";
                })
                .transition().duration(that.durationTime)
                .tween("text", function(d, i){
                	var inter = d3.interpolate(0, d);
            		return function(t) {
                        this.textContent = d3.round(inter(t) * 100, 2) + "%";
                    };
                });
        });
	},
	repaint: function(){
		this.drawData();
	}
});
/**
 * 特殊柱图 var specialbarchartwin = zhnx.windows.specialBar({selector: ".zone",
 * title: "防汛抗旱"}); zhnx.chart.specialBar({ selector: specialbarchartwin, title:
 * "防汛抗旱", labels: ["汛期流速", "降雨量"], units: ["L/S", "MM"], series: [{ name: "银川",
 * data: [23.7, 800] }, { name: "石嘴山", data: [36, 990] }, { name: "吴忠", data:
 * [11.2, 550] }, { name: "固原", data: [17.3, 750] }, { name: "中卫", data: [20.1,
 * 700] }] });
 * 
 * @param args
 */
zhnx.chart.specialBar = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.specialBar.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.specialBar,
	args: {},
	_defaults: {},
	padding: {left: 125, right: 25, top: 50, bottom: 40},
	font28Width: 14,
	font28Height: 28,
	units: undefined,
	splitLen: undefined,
	r: undefined,
	durationTime: undefined,
	svg: undefined,
	mapKeyData: undefined,
	nameMap: undefined,
	init: function(){
		// 基本初始化
		this.baseInit(this.args.selector);
		
	    this.series = this.args.series, this.title = this.args.title, this.labels = this.args.labels, this.units = this.args.units;
	    this.splitLen = (this.height - this.padding.top - this.padding.bottom) / 9, this.r = this.splitLen * 3, this.durationTime = 1000;
	    this.blankWidth = 24.12, this.blankHeight = 14.38, this.rect1Height = 4, this.rectBg1Height = 6, this.rect2Height = 12;
	    
	    this.drawInit();
	    this.drawTitle();
	    this.drawSubTitle();
	    this.drawArcs();
	    this.drawYAxis();
	    this.drawSpecialAxis();
	    this.drawXAxis();
	    this.drawData();
	    this.taketurns();
	},
	drawInit: function(){
		this.dataGroup = this.svg.append("g");
		this.arcsGroup = this.svg.append("g");
	},
	drawTitle: function(){
		var that = this;
	    this.svg.append("g").append("text").datum(this.title)
	        .attr({
	            "x": function (d) {
	                return that.font28Width;
	            },
	            "y": function (d) {
	                return 35;
	            },
	            "font-family": "黑体",
	            "font-size": "32px",
	            "fill": d3.rgb(255, 168, 1).toString(),
	            "font-weight": "bold"
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawSubTitle: function(){
		var that = this;
	    var labelsGroup = this.svg.append("g");
	    labelsGroup.append("g").selectAll("text").data(this.labels).enter()
	        .append("text")
	        .attr({
	            "transform": function (d, i) {
	                return "translate(" + (that.font28Width / 2) + "," + ((that.height - that.padding.top - that.padding.bottom) / (that.labels.length + 1) * (i + 1) + that.padding.top) + ")";
	            },
	            "font-family": "黑体",
	            "font-size": "22px",
	            "fill": d3.rgb(146, 85, 28).toString()
	        })
	        .text(function (d) {
	            return d;
	        });
	    labelsGroup.append("g").selectAll("text").data(this.units).enter()
	        .append("text")
	        .attr({
	            "transform": function (d, i) {
	                return "translate(" + (that.font28Width / 2) + "," + ((that.height - that.padding.top - that.padding.bottom) / (that.labels.length + 1) * (i + 1) + that.padding.top + (that.font28Height * 2 / 3)) + ")";
	            },
	            "font-size": "16px",
	            "fill": d3.rgb(255, 255, 255).toString()
	        })
	        .text(function (d) {
	            return "（" + d + "）";
	        });
	},
	drawArcs: function(){
		var that = this;
		this.arcsGroup.selectAll("*").remove();
	    this.arcsGroup.attr({
	            "transform": "translate(" + that.padding.left + "," + that.padding.top + ")"
	        });
	    var arc = d3.svg.arc().outerRadius(this.r).innerRadius(this.r);
	    this.arcsGroup.append("g").selectAll("g").data(d3.range(3)).enter()
	    	.append("g")
	    	.attr({
		        "transform": function(d, i){
		        	return "translate(" + that.r + "," + ( that.r - that.splitLen * 2 + i * 2 * that.splitLen ) + ")"
		        }
	    	})
	    	.append("path")
	    	.attr({
		        "fill": "rgba(0,0,0,0)",
		        "stroke": d3.rgb(33, 191, 252).toString()
	    	})
            .transition().duration(that.durationTime)
            .attrTween("d", function (d, i) {
                var start = {
                        startAngle: Math.PI,
                        endAngle: Math.PI
                    },
                    finish = {
                        startAngle: Math.PI,
                        endAngle: 2 * Math.PI
                    };
                if(i == 0){
                	finish.endAngle = Math.PI + Math.acos(1 / 3 * that.r / that.r);
                }
                var inter = d3.interpolate(start, finish);
                return function (d) {
                    return arc(inter(d));
                }
            })
            .each("end", function(){
        	    that.arcsGroup.append("g").append("path").datum(d3.rgb(33, 191, 252).toString())
    	        .attr({
    	            "fill": function (d) {
    	                return d;
    	            },
		            "fill-opacity": "0",
    	            "stroke": d3.rgb(33, 191, 252).toString(),
    	            "d": function (d, i) {
    	                var x1 = that.r - Math.sqrt(Math.pow(that.r, 2) - Math.pow(1 / 3 * that.r, 2)),
    	                    y1 = (that.height - that.padding.top - that.padding.bottom - that.splitLen - (4 / 3 * that.r)) - (2 / 3 * that.r);
    	                var x2 = that.r - Math.sqrt(Math.pow(that.r, 2) - Math.pow(1 / 3 * that.r, 2)),
    	                    y2 = (that.height - that.padding.top - that.padding.bottom - that.splitLen - (4 / 3 * that.r));
    	                var x3 = that.r - Math.sqrt(Math.pow(that.r, 2) - Math.pow(2 / 3 * that.r, 2)),
    	                    y3 = (that.height - that.padding.top - that.padding.bottom - that.splitLen - (10 / 6 * that.r));
    	                return "M " + x1 + "," + y1 +
    	                    " A " + that.r + "," + that.r + " 0 0 0 " + x2 + "," + y2 +
    	                    " A " + that.r + "," + that.r + " 0 0 1 " + x3 + "," + y3 +
    	                    " A " + that.r + "," + that.r + " 0 0 1 " + x1 + "," + y1;
    	            }
    	        })
	            .transition().duration(that.durationTime)
	            .attr({
		            "fill-opacity": "1"
	            });
            });

	    this.arcsGroup.append("g").selectAll("g").data(d3.range(3)).enter()
	    	.append("g")
	    	.attr({
		        "transform": function(d, i){
		        	return "translate(" + that.r + "," + (that.splitLen + that.r + i * 2 * that.splitLen) + ")"
		        }
	    	})
	    	.append("path")
	    	.attr({
		        "fill": "rgba(0,0,0,0)",
		        "stroke": "#EFA120"
	    	})
            .transition().duration(that.durationTime).delay(3 * that.durationTime)
            .attrTween("d", function (d, i) {
                var start = {
                        startAngle: 0,
                        endAngle: 0
                    },
                    finish = {
                        startAngle: -Math.PI,
                        endAngle: -Math.PI
                    };
                startAngle2 = -Math.acos(that.splitLen / that.r);
                if(i == 2){
                	finish.endAngle = startAngle2;
                }
                var inter = d3.interpolate(start, finish);
                return function (d) {
                	var angles = inter(d);
                	angles.startAngle = 0;
                    return arc(angles);
                }
            })
            .each("end", function(){
			    that.arcsGroup.append("g").append("path").datum("#EFA120")
			        .attr({
			            "fill": function (d) {
			                return d;
			            },
			            "fill-opacity": "0",
			            "stroke": "rgba(0,0,0,0)",
			            "d": function (d, i) {
			                var x1 = that.r - Math.sqrt(Math.pow(that.r, 2) - Math.pow(1 / 3 * that.r, 2)),
			                    y1 = (that.height - that.padding.top - that.padding.bottom - that.splitLen - (4 / 3 * that.r)) - (2 / 3 * that.r) + that.r;
			                var x2 = that.r - Math.sqrt(Math.pow(that.r, 2) - Math.pow(1 / 3 * that.r, 2)),
			                    y2 = (that.height - that.padding.top - that.padding.bottom - that.splitLen - (4 / 3 * that.r)) + that.r;
			                var x3 = that.r - Math.sqrt(Math.pow(that.r, 2) - Math.pow(2 / 3 * that.r, 2)),
			                    y3 = (that.height - that.padding.top - that.padding.bottom - that.splitLen - (10 / 6 * that.r)) + that.r;
			                return "M " + x1 + "," + y1 +
			                    " A " + that.r + "," + that.r + " 0 0 0 " + x2 + "," + y2 +
			                    " A " + that.r + "," + that.r + " 0 0 1 " + x3 + "," + y3 +
			                    " A " + that.r + "," + that.r + " 0 0 1 " + x1 + "," + y1;
			            }
			        })
		            .transition().duration(that.durationTime)
		            .attr({
			            "fill-opacity": "1"
		            });
            });
	},
	drawYAxis: function(){
		var that = this;
	    // yAxis
	    this.nameMap = d3.map(this.series, function (d) {
	        return d.name;
	    });
	    var yScale = d3.scale.ordinal().domain(d3.range(this.nameMap.keys().length)).rangeBands([0, this.height - this.padding.top - this.padding.bottom], 0.5);
	    var yAxis = this.svg.append("g")
	        .attr({
	            "transform": "translate(" + (that.padding.left + that.r) + "," + that.padding.top + ")"
	        });
	    yAxis.call(d3.svg.axis().scale(yScale).orient("left"));
	    yAxis.select("path").attr({
	        "fill": "rgba(0,0,0,0)"
	    });
	    yAxis.selectAll("text").data(this.nameMap.keys())
	        .attr({
	            "font-size": "22px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 255, 255).toString(),
	            "x": function (d, i) {
	                return -that.splitLen;
	            }
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawSpecialAxis: function(){
		var that = this;
	    // 特殊坐标轴
	    var defs = this.svg.append("defs");
	    defs.append("g").attr({
	            "id": "specalAxis_Fill"
	        })
	        .append("path")
	        .attr({
	            "fill": "#F1A708",
	            "stroke": "none",
	            "transform": "scale(1.2)",
	            "d": "M 5.15 0" +
	            " L 5.15 1 17.5 1 20.05 10.8 21.1 10.75 18.55 0.95 18.3 0 17.25 0 5.15 0" +
	            " M 9.75 2.4" +
	            " L 14.9 6.15 4.15 6.15 1 13.55 18.85 13.65 18.85 9.65 16.9 0.35 5.15 0.355 5.15 2.4 14.9 2.4 Z"
	        });
	    defs.append("pattern").attr("id", "barPatternRect")
	        .attr({
	            "x": 0,
	            "y": 0,
	            "width": "15",
	            "height": "20",
	            "patternUnits": "userSpaceOnUse",
	            "patternTransform": "rotate(45)"
	        })
	        .append("rect")
	        .attr({
	            "x": "0",
	            "y": "0",
	            "width": "10",
	            "height": "30",
	            "fill": d3.rgb(33, 191, 252).toString(),
	            "stroke": "rgba(0,0,0,0)"
	        });
	    this.svg.append("g")
	        .attr({
	            "transform": "translate(" + (that.padding.left + that.r) + "," + that.padding.top + ")"
	        })
	        .selectAll("g").data(d3.range(that.nameMap.keys().length)).enter()
	        .append("g")
	        .attr({
	            "transform": function (d, i) {
	                return "translate(" + 0 + "," + (i * (2 * that.splitLen) - that.blankHeight / 2) + ")";
	            }
	        })
	        .each(function (d, i) {
	            d3.select(this).append("use")
	                .attr({
	                    "xlink:href": "#specalAxis_Fill"
	                });
	            d3.select(this).append("rect")
	                .attr({
	                    "y": function () {
	                        return that.blankHeight;
	                    },
	                    "width": that.width - that.padding.left - that.padding.right - that.r,
	                    "height": that.rectBg1Height,
	                    "fill": "#F1A708",
	                    "stroke": "none"
	                });
	        });
	},
	drawXAxis: function(){
		var that = this;
		this.mapKeyData = d3.map(this.series, function (d) {
	        return d.data;
	    });
	    // X比例尺1
	    this.xScale1 = d3.scale.linear()
	        .domain([0, 100]).range([0, this.width - this.padding.left - this.padding.right - this.r - this.blankWidth]);
	    // X比例尺2
	    this.xScale2 = d3.scale.linear()
	        .domain([0, 2000]).range([0, this.width - this.padding.left - this.padding.right - this.r - 50]);
	    // xAxis
	    this.svg.append("g")
	        .attr({
	            "transform": "translate(" + (that.padding.left + that.r) + "," + that.padding.top + ")"
	        })
	        .selectAll("g").data(d3.range(this.mapKeyData.keys().length)).enter()
	        .append("g")
	        .attr({
	            "transform": function (d, i) {
	                return "translate(" + 0 + "," + (i * (2 * that.splitLen) + that.splitLen) + ")";
	            }
	        })
	        .each(function (d) {
	            var xAxis = d3.select(this).append("g").attr({
	                "transform": function (d, i) {
	                    return "translate(" + 0 + "," + that.rect2Height + ")";
	                }
	            });
	            xAxis.call(d3.svg.axis().scale(that.xScale2).orient("bottom").ticks(50).tickPadding(2).tickSize(-5, -10).tickFormat(d3.format("0")));
	            xAxis.selectAll("text")
	                .attr({
	                    "fill": d3.rgb(255, 255, 255).toString()
	                })
	                .each(function (d) {
	                    if (d3.select(this).text() != "0" && d3.select(this).text() != "1000" && d3.select(this).text() != "2000") {
	                        d3.select(this).text("");
	                    }
	                });
	            xAxis.select("path")
	                .attr({
	                    "stroke-width": 2,
	                    "stroke": d3.rgb(146, 85, 28).toString(),
	                    "fill": "rgba(0,0,0,0)"
	                });
	            xAxis.selectAll("line").attr({
	                "stroke": d3.rgb(146, 85, 28).toString(),
	                "stroke-width": 2
	            })
	        });
	},
	drawData: function(){
		var that = this;
        // 绘制数据柱
		this.dataGroup.selectAll("*").remove();
        this.dataGroup.attr({
                "transform": "translate(" + (that.padding.left + that.r) + "," + that.padding.top + ")"
            });
        this.dataGroup.selectAll("rect")
            .data(this.mapKeyData.keys().join(",").split(",").map(function (d) {
                return parseFloat(d);
            })).enter()
            .append("rect")
            .attr({
                "x": function (d, i) {
                    return [that.blankWidth, 2][i % 2];
                },
                "y": function (d, i) {
                    return [i * that.splitLen + 2, i * that.splitLen - 5][i % 2];
                },
                "width": 0,
                "height": function (d, i) {
                    return [that.rect1Height, that.rect2Height][i % 2];
                },
                "fill": function (d, i) {
                    return [d3.rgb(33, 191, 252).toString(), "url(#barPatternRect)"][i % 2];
                }
            })
            .transition().duration(that.durationTime)
            .delay(
                function (d, i) {
                    return [that.durationTime, that.durationTime * 4][i % 2];
                }
            )
            .attr({
                "width": function (d, i) {
                    return [that.xScale1(d), that.xScale2(d)][i % 2];
                }
            });
    	that.dataGroup.selectAll("text")
	        .data(that.mapKeyData.keys().join(",").split(",").map(function (d) {
	            return parseFloat(d);
	        })).enter()
	        .append("text")
	        .attr({
	            "x": function (d, i) {
	                return [that.blankWidth, 2][i % 2];
	            },
	            "y": function (d, i) {
	                return [i * that.splitLen, i * that.splitLen - 5][i % 2] + [that.rect1Height, that.rect2Height][i % 2] + 2;
	            },
	            "fill": d3.rgb(255, 255, 255).toString(),
	            "font-size": "16px"
	        })
	        .transition()
	        .delay(
                function (d, i) {
                    return [that.durationTime, that.durationTime * 4][i % 2];
                }
	        )
	        .text(function (d) {
	            return d;
	        })
	        .transition().duration(that.durationTime)
	        .attrTween("x", function(d, i){
	            var iter = d3.interpolate([that.blankWidth, 2][i % 2], [that.blankWidth, 2][i % 2] + [that.xScale1(d), that.xScale2(d)][i % 2] + that.font28Width / 2);
	            return function (t) {
	                return iter(t);
	            }
	        })
	        .tween("text", function(d){
	            var iter = d3.interpolate(0, d);
	            return function (t) {
	                this.textContent = d3.round(iter(t), 0);
	            }
	        });
	},
	repaint: function(){
		this.drawArcs();
		this.drawData();
	}
});
// Q--water--start
/**
 * liquidSpherical zhnx.chart.liquidSpherical({ selector: zhnx.windows.custom({
 * id: "widget6", pagePath: "module/waterCloud/agriculture", selector:
 * "#centerZone", title: "治理水土流失面积" }, 200, 200), value: 50, city: "银川",
 * valueLeft: 50, valueBottom: 75 })
 */
// 水波图开始
zhnx.chart.liquidSpherical = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
	}
	zhnx.chart.liquidSpherical.prototype = $.extend({}, zhnx.chart.base,{
		constructor: zhnx.chart.liquidSpherical,
		args: {},
		_defaults: {},
		radius:0,
		radius2:0,
		radius3:0,
		gauge:undefined,	
		elementId:undefined,
		value:undefined,
		city:undefined,
		dataSet:undefined,
		valueLeft:undefined,
		valueBottom:undefined,
		locationX:undefined,
		locationY:undefined,
		fillPercent:undefined,
		textRounder:undefined,
		textRiseScaleY:undefined,
		textRiseScaleY2:undefined,
		textRiseScaleY2L:undefined,
		textRiseScaleY2B:undefined,
		waveScaleX:undefined,
	    waveScaleY:undefined,
	    config:undefined,
	    totleTitle:undefined,
	    secTitle:undefined,
	    valueLeft:undefined,
	    valueBottom:undefined,
	    // 原config内参数
	    minValue: 0,     // 测量最小值
        maxValue: 100,   // 测量最大值
        circleThicknessBas: 0.2,   // 外圆厚度的百分比半径
        circleFillGapBas: 0.1,     // 和外圆的大小差距波圈外圆半径的比例。波和外圆之间的距离
        circleColor: "rgb(100,70,40)", // 外圆颜色
        circleColor2: "rgb(230,120,10)", // 次外圆颜色
        circleColor3: "rgb(250,165,0)", // 最外圈颜色
        waveHeight: 0.2,       // 波高
        waveCount: 1,           // 全波的数量每波圈的宽度
        waveRiseTime: 1000,     // 以毫秒为单位的时间波从0上升到它的最终高度
        waveAnimateTime: 5000, // 以毫秒为单位的时间为一波全波进入循环。
        waveRise: true,         // 波上升
        waveHeightScaling: true,// 波高扩展
        waveAnimate: true,      // 波动画
        waveColor: "rgba(37,162,239,.5)",   // 波颜色
        waveOffset: 0,
        textVertPosition: .8,
        textSize: 1,            // 文字大小
        textSizeLB: 1,          // 左边和下边的百分比文字大小
        valueCountUp: true,
        displayPercent: true,   // 显示百分比
        textColor: "white",   // 文字颜色
        waveTextColor: "rgb(4,188,254)",    // 波覆盖文字的时候文字的颜色
		init:function(){
			var that=this;
					
			this.elementId=this.args.selector;
			this.baseInit(this.elementId);
			
			this.id=this.args.id;
			this.city=this.args.city;
			this.value=this.args.value;
			// 最外标题
			this.totleTitle = this.args.totleTitle != undefined ? this.args.totleTitle : this.totleTitle;
			// 次标题
			this.secTitle = this.args.secTitle != undefined ? this.args.secTitle : this.secTitle;
			// 左侧百分比值（25）
			this.valueLeft = this.args.valueLeft != undefined ? this.args.valueLeft : this.valueLeft;
			// 下侧百分比值（50）
			this.valueBottom = this.args.valueBottom != undefined ? this.args.valueBottom : this.valueBottom;
			this.dataSet=this.args.dataSet;
					 
			this.drawInit();
			this.drawImgCircle();
			this.drawImgWave();
			this.drawLine();
			this.taketurns();
		},
		drawInit:function(){
			var that=this;
			// this.gauge =
			// zhnx.utils.transformD3dom(this.elementId).append("svg").attr("width",
			// this.width).attr("height", this.height);
			this.radius=Math.min(parseInt(this.svg.style("width")), parseInt(this.svg.style("height")))/4;  // 半径
			this.radius2=Math.min(parseInt(this.svg.style("width")), parseInt(this.svg.style("height")))/2.8;  // 半径
			this.radius3=Math.min(parseInt(this.svg.style("width")), parseInt(this.svg.style("height")))/2.2;  // 半径
			this.locationX=parseInt(this.svg.style("width"))/2-this.radius;      // x位置
			this.locationY=parseInt(this.svg.style("height"))/2-this.radius;     // y位置
			this.gaugeGroup = this.svg.append("g")
		        .attr('transform','translate('+this.locationX+','+this.locationY+')');

			this.fillPercent=Math.max(this.minValue, Math.min(this.maxValue, this.value))/this.maxValue;    /*
																											 * 填百分比，config的最大值和开始传入的value值相比较取小值，
																											 * 得到的小值和config的最小值相比较取大值，开始设置minValue为0，maxValue为100
																											 */
			this.waveHeightScale;    // 波高
		    if(this.waveHeightScaling){       // 波高扩展为true
		    	this.waveHeightScale = d3.scale.linear()     // 构建一个线性比例尺
		            .range([0,this.waveHeight,0])     // 取得或设置比例尺的范围
		            .domain([0,50,100]);
		    }
		    else{
		    	this.waveHeightScale = d3.scale.linear()
		            .range([this.waveHeight,this.waveHeight])
		            .domain([0,100]);
		    }

		    this.textPixels = (this.textSize*this.radius/2);    // 文字大小
		    this.textPixels1 = (this.textSize*this.radius/3);
		    this.textPixelsLB = (this.textSizeLB*this.radius/4);    // 左边和下边百分比文字大小

		    this.textFinalValue = parseFloat(this.value).toFixed(2);      // 文本最终值，将value转浮点数四舍五入，保留两位小数
		    this.textStartValue = this.valueCountUp?this.minValue:this.textFinalValue;
		    this.percentText = this.displayPercent?"%":"";         // 百分比文本，
		    this.percentText1 = this.displayPercent?"%":"";         // 百分比文本，
			var myText=this.city;
				   
		},
		drawImgCircle: function(){
			var that=this;
			
			this.gaugeGroup.selectAll(".textCirle").remove();
			this.gaugeGroup.selectAll(".liquidFillGaugeText").remove();
			this.gaugeGroup.selectAll(".liquidFillGaugeText1").remove();
			this.gaugeGroup.selectAll("path").remove();
			
			this.circleThickness = this.circleThicknessBas * this.radius;  // 圈厚度
			this.circleFillGap = this.circleFillGapBas * this.radius;
			
			this.circleFillGap2 = this.circleFillGap * this.radius2;
			this.circleFillGap3 = this.circleFillGap * this.radius3;
			this.fillCircleMargin = this.circleThickness + this.circleFillGap; // 填充圆边缘
			this.fillCircleRadius = this.radius - this.fillCircleMargin;
			
			this.gaugeCircleX = d3.scale.linear().range([0,2*Math.PI]).domain([0,1]);    // 定义域在0-1，值域在0-
			this.gaugeCircleY = d3.scale.linear().range([0,this.radius]).domain([0,this.radius]);
			    /* 规模控制表中的文本位置 */
			this.textRiseScaleY = d3.scale.linear()
			        .range([this.fillCircleMargin+this.fillCircleRadius*2,(this.fillCircleMargin+this.textPixels *.7)])
			        .domain([0,1]);

			this.textRiseScaleY2 = d3.scale.linear()
			        .range([this.fillCircleMargin+this.fillCircleRadius*2,(this.fillCircleMargin+this.textPixels *2)])
			        .domain([0,1]);

			this.textRiseScaleY2L = d3.scale.linear()
			        .range([this.fillCircleMargin+this.fillCircleRadius*2,(this.fillCircleMargin+this.textPixels)])
			        .domain([0,1]);

			this.textRiseScaleY2B = d3.scale.linear()
			        .range([this.fillCircleMargin+this.fillCircleRadius*2,(this.fillCircleMargin+this.textPixels *3)])
			        .domain([0,1]);
			gaugeCircleArc = d3.svg
		        .arc()           // 半径最小的外圈
		        .startAngle(this.gaugeCircleX(0))        // 设置开始角度访问器
		        .endAngle(this.gaugeCircleX(-this.dataSet[0].value/100))          // 设置结束角度访问器
		        .outerRadius(this.gaugeCircleY(this.radius))  // 设置外半径访问器
		        .innerRadius(this.gaugeCircleY(this.radius-this.circleThickness)); // 设置内半径访问器

			this.gaugeGroup.append("path")
		        .data(this.dataSet)
		        .attr({
		        	"class": "textCirle",
		        	"fill": this.circleColor,
		        	'transform': 'translate('+this.radius+','+this.radius+')'
		        })
		        .attr("d", gaugeCircleArc)
		        .on("mouseover",function(d,i){
						zhnx.getTooltip().style({
			        		"opacity": "0.9",
			        		"width": "130px",
			        		"height": "50px",
			        		"line-height": "23px",
			        		"z-index": "99999",
			        		"left": (d3.event.pageX - 75) + "px",
			        		"top": (d3.event.pageY - 67) + "px",
			        		 "font-family": "黑体"
			        	}).html("年份："+ that.dataSet[0].year +'<br/>'+"值为："+that.dataSet[0].value+"%")
			        }).on("mousemove",function(){
			        	zhnx.getTooltip().style({
			        		"opacity": "0.9",
			        		"width": "130px",
			        		"height": "50px",
			        		"line-height": "23px",
			        		"z-index": "99999",
			        		"left": (d3.event.pageX - 75) + "px",
			        		"top": (d3.event.pageY - 67) + "px",
			        		 "font-family": "黑体"
			        	})
			        	})
			        .on("mouseout",function(){
			        	zhnx.getTooltip().style({
			        		"opacity": "0",
			        		"z-index": "-1",
			        	})
			        	})
			        	.transition()
			        	.duration(800)     
			        	.attrTween("d", function(d) {            // 插值
			        		return function(t) {
			        			gaugeCircleArc.endAngle(that.gaugeCircleX(-that.dataSet[0].value/100) * t);
			        			return gaugeCircleArc();
			        		};
			        	})
		        		        	
		var gaugeCircleArc2 = d3.svg.arc()         // 半径次小的外圈
	    .startAngle(this.gaugeCircleX(0))        // 设置开始角度访问器
	    .endAngle(this.gaugeCircleX(-this.dataSet[1].value/100))          // 设置结束角度访问器
	    .outerRadius(this.gaugeCircleY(this.radius))  // 设置外半径访问器
	    .innerRadius(this.gaugeCircleY(this.radius2-this.circleThickness)); // 设置内半径访问器
	
	this.gaugeGroup.append("path")
	    .data(this.dataSet)
	    .attr({
	    	"class": "textCirle",
	    	"fill": this.circleColor2,
	    	'transform': 'translate('+this.radius+','+this.radius+')'
	    })
	    .attr("d", gaugeCircleArc2)
	    .on("mouseover",function(d,i){
						zhnx.getTooltip().style({
			        		"opacity": "0.9",
			        		"width": "130px",
			        		"height": "50px",
			        		"line-height": "23px",
			        		"z-index": "99999",
			        		"left": (d3.event.pageX - 75) + "px",
			        		"top": (d3.event.pageY - 67) + "px",
			        		"font-family": "黑体"
			        	}).html("年份："+ that.dataSet[1].year +'<br/>'+"值为："+that.dataSet[1].value+"%")
			        }).on("mousemove",function(){
			        	zhnx.getTooltip().style({
			        		"opacity": "0.9",
			        		"width": "130px",
			        		"height": "50px",
			        		"line-height": "23px",
			        		"z-index": "99999",
			        		"left": (d3.event.pageX - 75) + "px",
			        		"top": (d3.event.pageY - 67) + "px",
			        		"font-family": "黑体"
			        	})
			        	})
			        .on("mouseout",function(){
			        	zhnx.getTooltip().style({
			        		"opacity": "0",
			        		"z-index": "-1",
			        	})
			        	})
			        	.transition()
			        	.duration(800)     
			        	.attrTween("d", function(d) {            // 插值
			        		return function(t) {
			        			gaugeCircleArc2.endAngle(that.gaugeCircleX(-that.dataSet[1].value/100) * t);
			        			return gaugeCircleArc2();
			        		};
			        	})
			        	
			        	
	    var gaugeCircleArc3 = d3.svg.arc()      // 半径最大的外圈
	    .startAngle(this.gaugeCircleX(0))        // 设置开始角度访问器
	    .endAngle(this.gaugeCircleX(-this.dataSet[2].value/100))          // 设置结束角度访问器
	    .outerRadius(this.gaugeCircleY(this.radius2-this.circleThickness))  // 设置外半径访问器
	    .innerRadius(this.gaugeCircleY(this.radius3-this.circleThickness*2)); // 设置内半径访问器

	this.gaugeGroup.append("path")
	    .data(this.dataSet)
	    .attr("d", gaugeCircleArc3)
	    .attr({
	    	"fill": this.circleColor3,
	    	'transform': 'translate('+this.radius+','+this.radius+')'
	    })
	    .on("mouseover",function(d,i){
						zhnx.getTooltip().style({
			        		"opacity": "0.9",
			        		"width": "130px",
			        		"height": "50px",
			        		"line-height": "23px",
			        		"z-index": "99999",
			        		"left": (d3.event.pageX - 75) + "px",
			        		"top": (d3.event.pageY - 67) + "px",
			        		"font-family": "黑体"
			        	}).html("年份："+ that.dataSet[2].year +'<br/>'+"值为："+that.dataSet[2].value+"%")
			        }).on("mousemove",function(){
			        	zhnx.getTooltip().style({
			        		"opacity": "0.9",
			        		"width": "130px",
			        		"height": "50px",
			        		"line-height": "23px",
			        		"z-index": "99999",
			        		"left": (d3.event.pageX - 75) + "px",
			        		"top": (d3.event.pageY - 67) + "px",
			        		"font-family": "黑体"
			        	})
			        	})
			        .on("mouseout",function(){
			        	zhnx.getTooltip().style({
			        		"opacity": "0",
			        		"z-index": "-1",
			        	})
			        	})
			        	.transition()
			        	.duration(800)     
			        	.attrTween("d", function(d) {            // 插值
			        		return function(t) {
			        			gaugeCircleArc3.endAngle(that.gaugeCircleX(-that.dataSet[2].value/100) * t);
			        			return gaugeCircleArc3();
			        		};
			        	})
		},
		drawImgWave:function(){
			var that=this;
			
// this.gaugeGroup.selectAll("text").remove();
			this.gaugeGroup.selectAll("defs").remove();
			this.gaugeGroup.selectAll("g").remove();
			
			 var waveHeight = this.fillCircleRadius*this.waveHeightScale(this.fillPercent*100);
			    var waveLength = this.fillCircleRadius*2/this.waveCount;   // 波长，宽度/波的个数
			    var waveClipCount = 1+this.waveCount;
			    var waveClipWidth = waveLength*waveClipCount;       // 波夹宽度
			    
			    /* 舍入函数以便正确数量的小数点后总是显示为计算值。 */
			    this.textRounder=function(value){    // 舍入到最接近的整数
			        return Math.round(value);
			    };

			    if(parseFloat(this.textFinalValue) != parseFloat(this.textRounder(this.textFinalValue))){
			        this.textRounder = function(value){ return parseFloat(value).toFixed(1); };
			    }
			    if(parseFloat(this.textFinalValue) != parseFloat(this.textRounder(this.textFinalValue))){
			        this.textRounder = function(value){ return parseFloat(value).toFixed(2); };
			    }

			    /* 数据构建 */
			    var data=[];
			    for(var i = 0; i <= 40*waveClipCount; i++){
			        data.push({x: i/(40*waveClipCount), y: (i/(40))});
			    }
			    
			    /* 尺度大小控制剪切路径 */
			    var waveScaleX = d3.scale.linear().range([0,waveClipWidth]).domain([0,1]);
			    var waveScaleY = d3.scale.linear().range([0,waveHeight]).domain([0,1]);

			    /* 控制剪切路径位置 */
			    var waveRiseScale = d3.scale.linear()
			        .range([(this.fillCircleMargin+this.fillCircleRadius*2+waveHeight),(this.fillCircleMargin-waveHeight)])
			        .domain([0,1]);

			    var waveAnimateScale = d3.scale.linear()		// 波浪位置动画
		        .range([0, waveClipWidth-this.fillCircleRadius*2]) // Push the
																	// clip area
																	// one full
																	// wave then
																	// snap
																	// back.
		        .domain([0,1]);

			    var text1 = this.gaugeGroup.append("text")           // 添加中间部分的百分比
		        .text(this.textRounder(this.textStartValue) + this.percentText)
		        .attr({
		        	"class": "liquidFillGaugeText",
		        	"text-anchor": "middle",
		        	"font-size": this.textPixels + "px",
		        	"fill": this.textColor,
		        	"font-family": "黑体",
		        	'transform':'translate('+this.radius+','+this.textRiseScaleY(this.textVertPosition)+')'
		        	});

		    var text1_1 = this.gaugeGroup.append("text")         // 添加汉字部分
		        .text(this.city)
		        .attr({
		        	"class": "liquidFillGaugeText",
		        	"text-anchor": "middle",
		        	"font-size": this.textPixels1 + "px",
		        	"fill": this.textColor,
		        	"font-family": "黑体",
		        	'transform':'translate('+this.radius+','+this.textRiseScaleY2(this.textVertPosition)+')'
		        });
		    	    
		    /* 剪切波区域 */	    	    
		    var clipArea = d3.svg.area()        // 新建面积生成器
		        .x(function (d) {
		            return waveScaleX(d.x);
	        	})
		        .y0(function(d) {
		            return waveScaleY(Math.sin(Math.PI*2*that.waveOffset*-1 + Math.PI*2*(1-that.waveCount) + d.y*2*Math.PI));
		        } )
		        .y1(function(d) { 
		        	return that.fillCircleRadius*2 + waveHeight; 
		        	} );
		    
		    this.waveGroup = this.gaugeGroup.append("defs")
		        .append("clipPath")
		        .attr("id", "clipWave"+this.id);
		    
		    var wave = this.waveGroup.append("path")
		        .datum(data)
		        .attr("d", clipArea)
		        .attr("T", 0);

		    var fillCircleGroup = this.gaugeGroup.append("g")
		        .attr("clip-path", "url(#clipWave"+this.id+")");
		    
		    fillCircleGroup.append("circle")
		    	.attr({
		    		"cx": this.radius,
		    		"cy": this.radius,
		    		"r": this.fillCircleRadius,
		    		"fill": this.waveColor,
		    	});		      

		    var text2 =fillCircleGroup.append("text")
		        .text(this.textRounder(this.textStartValue) + this.percentText)
		        .attr({
		        	"class": "liquidFillGaugeText",
		        	"text-anchor": "middle",
		        	"font-size": this.textPixels + "px",
		        	"fill": this.waveTextColor,
		        	"font-family": "黑体",
		        	'transform':'translate('+this.radius+','+this.textRiseScaleY(this.textVertPosition)+')'
		        });
		   
		    var text2_1 =fillCircleGroup.append("text")
		        .text(this.city)
		        .attr({
		        	"class": "liquidFillGaugeText",
		        	"text-anchor": "middle",
		        	"font-size": this.textPixels1 + "px",
		        	"fill": this.waveTextColor,
		        	"font-family": "黑体",
		        	'transform':'translate('+this.radius+','+this.textRiseScaleY2(this.textVertPosition)+')'
		        })

		    if(this.valueCountUp){
		        var textTween = function(){
		            var i = d3.interpolate(that.textContent, that.textFinalValue);
		            return function(t) { 
		            	this.textContent = that.textRounder(i(t)) + that.percentText; 
		            	}
		        };
		   
		        text1.transition()
		            .duration(this.waveRiseTime)
		            .tween("text", textTween);
		        text2.transition()
		            .duration(this.waveRiseTime)
		            .tween("text", textTween);
		    }

		    var waveGroupXPosition = this.fillCircleMargin+this.fillCircleRadius*2-waveClipWidth;
		    if(this.waveRise){
		    	this.waveGroup.attr('transform','translate('+waveGroupXPosition+','+waveRiseScale(0)+')')
		            .transition()
		            .duration(this.waveRiseTime)
		            .attr('transform','translate('+waveGroupXPosition+','+waveRiseScale(this.fillPercent)+')')
		            .each("start", function(){ wave.attr('transform','translate(1,0)'); }); // This
																							// transform
																							// is
																							// necessary
																							// to
																							// get
																							// the
																							// clip
																							// wave
																							// positioned
																							// correctly
																							// when
																							// waveRise=true
																							// and
																							// waveAnimate=false.
																							// The
																							// wave
																							// will
																							// not
																							// position
																							// correctly
																							// without
																							// this,
																							// but
																							// it's
																							// not
																							// clear
																							// why
																							// this
																							// is
																							// actually
																							// necessary.
		    } else {
		    	this.waveGroup.attr('transform','translate('+waveGroupXPosition+','+waveRiseScale(fillPercent)+')');
		    }

		    if(this.waveAnimate) animateWave();	    
		   
		    function animateWave() {
		        wave.attr('transform','translate('+waveAnimateScale(wave.attr('T'))+',0)');
		        wave.transition()
		            .duration(that.waveAnimateTime * (1-wave.attr('T')))
		            .ease('linear')
		            .attr('transform','translate('+waveAnimateScale(1)+',0)')
		            .attr('T', 1)
		            .each('end', function(){
		                wave.attr('T', 0);
		                animateWave(that.waveAnimateTime);
		            });
		    }
			    
		},
		drawLine:function(){
			var that=this;
			
			this.gaugeGroup.selectAll(".liquidFillGaugeText1").remove();
			this.svg.selectAll(".lineRound").remove();
			
			var lineYTop = this.svg.append("line")
			.attr({
				"class": "lineRound",
				"x1": this.locationX + this.radius,
				"x2": this.locationX + this.radius,
				"y1": this.locationY - this.radius,
				"y2": this.locationY + this.radius2 - this.radius,
				"opacity": 0,
				"stroke": "white"
			})
	        .transition()
			.duration(800)  
			.delay(300)
			.attr("opacity",1)

	    var lineYBttom = this.svg.append("line")
	    	.attr({
	    		"class": "lineRound",
	    		"x1": this.locationX + this.radius,
	    		"x2": this.locationX + this.radius,
	    		"y1": this.locationY + 2 * this.radius,
	    		"y2": this.locationY + 2 * this.radius + (this.radius3 - this.radius),
	    		"stroke": "white",
	    		"opacity": 0
	    	})
	        .transition()
			.duration(800)  
			.delay(300)
			.attr("opacity",1)

	    var lineXLeft = this.svg.append("line")
	    	.attr({
				"class": "lineRound",
				"x1": this.locationX - this.radius,
				"x2": this.locationX,
				"y1": this.locationY + this.radius,
				"y2": this.locationY + this.radius,
				"stroke": "white",
				"opacity": 0
			})
	        .transition()
			.duration(800)  
			.delay(300)
			.attr("opacity",1)

	    var lineXRight = this.svg.append("line")
	    	.attr({
	    		"class": "lineRound",
	    		"x1": this.radius3 + this.locationX,
	    		"x2": this.radius3 + this.locationX + this.radius,
	    		"y1": this.locationY + this.radius,
	    		"y2": this.locationY + this.radius,
	    		"stroke": this.waveTextColor,
	    		"stroke-dasharray": (5, 5),
	    		"opacity": 0
	    	})
	        .transition()
			.duration(800)  
			.delay(300)
			.attr("opacity",1)

	    var textL = this.gaugeGroup.append("text")           // 添加左边部分的百分比
	    .text(this.valueLeft+ this.percentText1)
	    .attr({
	    	"class": "liquidFillGaugeText1",
	    	"text-anchor": "middle",
	    	"font-size": this.textPixelsLB + "px",
	    	"fill": this.textColor,
	    	'transform': 'translate('+-this.locationX/3+','+this.textRiseScaleY2L(this.textVertPosition)+')',
	    	"opacity": 0
	    })
	    .transition()
		.duration(800)  
		.delay(300)
		.attr("opacity",1)
			
	var textB = this.gaugeGroup.append("text")           // 添加下边部分的百分比
	    .text(this.valueBottom+ this.percentText1)
	    .attr({
	    	"class": "liquidFillGaugeText1",
	    	"text-anchor": "middle",
	    	"font-size": this.textPixelsLB + "px",
	    	"fill": this.textColor,
	    	'transform': 'translate('+this.radius+','+1.7*this.textRiseScaleY2B(this.textVertPosition)+')',
	    	"opacity": 0
	    })
	    .transition()
		.duration(800)  
		.delay(300)
		.attr("opacity",1)
		},
		repaint: function(){
		var that=this;
		
			that.drawImgCircle();
			that.drawImgWave();
			that.drawLine();
	}
	})
// 水波图结束

/**
 * 环形饼图
 * 
 * @param args
 *            zhnx.chart.ringPie({ selector: zhnx.windows.major({selector:
 *            "#centerZone", title: "水库水位站"}), data: [{passNum: 8, allNum: 25,
 *            numName: "水库水位站"}] });
 */
// 提醒闪烁图开始
zhnx.chart.ringPie = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.ringPie.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.ringPie,
	_defaults : {},
	args: {},
	padding: {top: 30,right: 30,bottom :30,left :30},
	title: undefined,
	data: undefined,
	pie: undefined,
	radius: undefined,
	outerRadius: undefined,
	outerRadiusTwo: undefined,
	innerRadius: undefined,
	innerRadiusTwo: undefined,
	gaugeCircleX: undefined,
	textPixelsLB : undefined,
	textPixels : undefined,
	testText : undefined,
	totleTitle : undefined,
	secTitle : undefined,
	unit : "(个)",
	rightText : "超警",
	color : ["rgb(100,70,40)","rgb(250,165,0)"],	// 底部颜色，覆盖颜色
	init: function(){
		// 转换参数
		var that = this;
		
		this.baseInit(this.args.selector)

		this.title = this.args.title;
		this.data = this.args.data;
		this.totleTitle = this.args.totleTitle != undefined ? this.args.totleTitle : this.totleTitle;
		this.secTitle = this.args.secTitle != undefined ? this.args.secTitle : this.secTitle; 
			
		this.drawInit();
		this.drawBottomPie();
		this.drawTopPie();
		this.drawText();
		this.drawSanJiao();
		this.taketurns();
	},
	drawInit : function(){
		var that=this;

		this.pie = d3.layout.pie();
		this.outerRadius = this.width/3;	// 外半径
		this.outerRadiusTwo = this.width/6;
		this.innerRadius = this.width / 4;	// 内半径
		this.innerRadiusTwo = this.width / 8;	// 内半径
		this.arc = d3.svg.arc().innerRadius(this.innerRadius).outerRadius(this.outerRadius);
		this.radius = this.width/4;
		this.gaugeCircleX = d3.scale.linear().range([0,2*Math.PI]).domain([0,1]);
		this.textPixelsLB = this.outerRadius/8;
		this.textPixels = this.outerRadius/3;
		this.testText = this.data;

		this.dataGroup = this.svg.selectAll("g");	// 底部圆的组
		this.textGroup = this.svg.append("g");	// 添加中间文字
		this.tiXing = this.svg.append("g");	// 添加提醒
		this.gaugeGroup = this.svg.append("g");	// 数据外圈变化组

	},
	drawBottomPie : function(){
		var that = this;

		var textCil=d3.svg.arc()
			. startAngle(this.gaugeCircleX(0))        // 设置开始角度访问器
			.outerRadius(this.outerRadiusTwo/10)  // 设置外半径访问器
			.innerRadius(0);

		this.arcs = this.dataGroup
			.data(this.pie([1,1,1,1,1,1,1,1,1,1])).enter().append("g")
			.each(function(d){
				var padding = 0.005;
				d.startAngle += padding;
				d.endAngle -= padding;
			})
			.attr("transform","translate("+this.width/2+","+this.width/1.6+")")
			
		this.arcs.append("path")
			.attr("fill",this.color[0])
			.attr("d",function(d){
				var padding = 0.005;
				d.startAngle += padding;
				d.endAngle -= padding;
				return that.arc(d);
			});
	},
	drawTopPie : function(){
		var that = this;

		this.arcs.selectAll(".circlePath") .remove();// 清除之前绘制部分
		
		this.gaugeGroup.attr("class","test");
		
		var gaugeCircleArc = d3.svg.arc()
			.startAngle(this.gaugeCircleX(0))        // 设置开始角度访问器
			.outerRadius(this.outerRadius)        // 设置外半径访问器
			.innerRadius(this.innerRadius);       // 设置内半径访问器

		this.cirlImg=this.arcs
			.append("path")       // 覆盖在上面的圆
			.attr({
				"class": "circlePath",
				"fill": this.color[1]
			})
			 .transition()
			 .duration(1000)     
		     .attrTween("d", function(d) {            // 插值
		            return function(t) {
		                gaugeCircleArc.endAngle(that.gaugeCircleX(that.data[0].passNum/that.data[0].allNum)* t);
		                return gaugeCircleArc();
		           };
		     });
	},
	drawText : function(){
		var that = this;
				
		this.textGroup
			.attr({					// 添加中间
				"class": "liquidFillGaugeText1",
				"text-anchor": "middle",
				"font-size": this.textPixelsLB + "px",
				"fill": "white",
				'transform': 'translate('+this.width/2+','+this.width/1.6+')'
		});

		var textCenter1=this.textGroup.append("text")       // 1行文字
			.data(this.testText)
			.text(function(d){
				return d.allNum;
			})
			.attr({
				"y": -this.width/15,
				"font-size": this.textPixelsLB*4 + "px"
			})
			

		var textCenter2=this.textGroup.append("text")       // 2行文字
			.data(this.testText)
			.text(function(d){
				return d.numName;
			})
			.attr({
				"y": this.innerRadius/8,
				"font-size": this.textPixelsLB*2 + "px"
			})
			

		var textCenter3=this.textGroup.append("text")       // 单位
			.text(this.unit)
			.attr({
				"y": this.innerRadius/2,
				"font-size": this.textPixelsLB*2 + "px"
			});
			


		var tiXing = this.tiXing.attr({
				"class": "tiXing",
				"transform": 'translate('+this.width/1.4+','+this.width/8+')'
			});

		// 判断及设置上面的覆盖圆
		for(var i=0;i<this.data.length;i++){
			if(this.data[i].passNum>0){
				this.cirlImg.attr("display","block")
				this.gaugeGroup.attr("display","block");      // gaugeGroup（含覆盖圆、警示、直线等）
				tiXing.attr("display","block");      // gaugeGroup（含覆盖圆、警示、直线等）
			}
			else{
				this.gaugeGroup.attr("display","none");      // gaugeGroup（含覆盖圆、警示、直线等）
				tiXing.attr("display","none");
			}
		}

		var textTop=this.gaugeGroup.append("text")           // 添加上面
			.data(this.testText)
			.text(function(d){
				return d.passNum;
			})
			.attr({
				"class": "liquidFillGaugeText1",
				"text-anchor": "middle",
				"font-size": this.textPixels + "px",
				"fill":"white",
				"font-weight":"bolder",
				"transform": 'translate('+this.width/1.6+','+this.width/5.5+')'
			});

		var textLineX=this.gaugeGroup.append("line")         // 水平线
			.attr({
				"class": textLineX,
				"x1": this.width/1.8,
				"x2": this.width/1.5,
				"y1": this.width/5,
				"y2": this.width/5,
				"stroke": "white"
			});

		var textLineY=this.gaugeGroup.append("line")         // 竖直线
			.attr({
				"class": textLineY,
				"x1": this.width/1.8,
				"x2": this.width/1.8,
				"y1": this.width/5,
				"y2": this.width/3,
				"stroke": "white"
			});

		var textCirl=this.gaugeGroup.append("circle")               // 直线的圆
			.attr({
				"class": textCirl,
				"fill": "white",
				"r": (this.outerRadiusTwo-this.innerRadiusTwo)/4,
				"transform": 'translate('+this.width/2+','+this.width/3+')'
			});

		var textRight=this.gaugeGroup.append("text")     // 右侧文字
			.text(this.rightText)
			.attr({
				"class": textRight,
				"fill": "rgb(250,165,0)",
				"text-anchor": "middle",
				"font-size": this.textPixels/2 + "px",
				"font-family": "黑体",
				"transform": 'translate('+this.width/1.4+','+this.width/5+')'
			});		
	},
	drawSanJiao:function(){
		var that=this;
		
		// 绘制提醒的叹号节点
		var filter1= this.tiXing                 // 提醒的叹号
			.append("g")
			.attr("id","Layer0_0_MEMBER_0_FILL")
			.append("path")
			.attr("d","M 114.55 108.95"+
				"Q 114.55 106.3 113.05 104.45 111.5 102.55 109.15 102.55 106.8 102.55 105.4 104.6 104.05 106.6 104.05 109.25 104.05 111.95 105.5 113.75 106.9 115.55 109.15 115.55 111.45 115.55 113 113.5 114.55 111.45 114.55 108.95"+
				"M 109.65 63.2"+
				"Q 106.8 63.2 105.25 64.85 103.65 66.5 103.65 68.85 103.65 69.8 105.3 81.25 107.45 95.7 107.45 97.4 107.45 98.6 107.65 98.8 107.75 99 108.4 99"+
				"L 110.45 99"+
				"Q 111.1 99 111.25 98.8 111.4 98.55 111.4 97.2 111.45 95.7 112.95 85.85 115.3 70.8 115.3 69.15 115.3 66.75 113.85 64.95 112.4 63.2 109.65 63.2 Z")
			.attr({
				"fill": "#B4162F",
				"transform": 'scale('+.3+','+.3+')'
			});

		// 提醒的三角框节点
		var filter2=this.tiXing
			.append("g")
			.append("path")
			.attr("id","Layer0_0_MEMBER_1_FILL")
			.attr("d","M 162.6 125.15"+
				"Q 163.3076171875 124.565234375 163.45 123.65 163.63203125 122.7845703125 163.15 122"+
				"L 112.75 34.75"+
				"Q 112.309375 33.96015625 111.45 33.65 110.603125 33.33515625 109.75 33.65 108.883203125 33.976171875 108.4 34.75"+
				"L 58.8 122"+
				"Q 58.3822265625 122.8166015625 58.55 123.7 58.706640625 124.588671875 59.4 125.15 60.098828125 125.7544921875 61 125.75"+
				"L 161 125.75"+
				"Q 161.906640625 125.7439453125 162.6 125.15"+
				"M 156.65 120.75"+
				"L 65.3 120.75 110.6 41 156.65 120.75 Z")
			.attr({
				"fill": "#B4162F",
				"transform": 'scale('+.3+','+.3+')'
			});

		// 闪烁动画
		var a=0;
		function change(){

			if(a==0){
				d3.selectAll("#Layer0_0_MEMBER_0_FILL path").style("fill","white")
				a++;
			}
			else if(a==1){
				d3.selectAll("#Layer0_0_MEMBER_0_FILL path").style("fill","#B4162F");
				a--;
			}
		}
		var myTestT=setInterval(change,1000);
		zhnx.intervals.push(this.myTestT);

	},
	repaint: function(){
		var that=this;

			that.drawTopPie();
	}
})// 提醒闪烁图结束
/**
 * 蛛网图\雷达图
 * 
 * @param args
 *            zhnx.chart.polarLine({ selector: zhnx.windows.custom({selector:
 *            "#centerZone", title: "主体类型"}, 400, 350), title: "主体类型", data: [ [
 *            {axis: "施工企业", value: 0.22}, {axis: "勘察设计企业", value: 0.12}, {axis:
 *            "招标代理机构", value: 0.18}, {axis: "监理企业", value: 0.17}, {axis:
 *            "工程质量检测机构", value: 0.33} ] ] });
 */
// 建设管理主体类型——蛛网图开始
zhnx.chart.polarLine = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.polarLine.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.polarLine,
	args: {},
	_defaults : {},
	data: undefined,
	dataName: undefined,
	color: ["#ccc","rgb(250,165,0)","white"],
	padding: {top: 20, right: 20, bottom: 20, left: 20},
	levels: 2,
	maxValue: 0,
	labelFactor: 1.25,
	wrapWidth: 60,
	opacityArea: 0.35,     // The opacity of the area of the blob
	dotRadius: 4,             // The size of the colored circles of each
	opacityCircles: 0.1,     // The opacity of the circles of each blob
	strokeWidth: 2,         // The width of the stroke around each blob
	roundStrokes: false ,
	allAxis:undefined,
	total:undefined,
	radius:undefined,
	Format:undefined,
	angleSlice:undefined,
	rScale:undefined,
	axis: undefined,
	titleColor: ["rgba(10,150,210,.5)","rgb(4,188,254)"],	// 矩形背景，矩形内文字，矩形边框
	init: function(){
		var that = this;
		
		this.baseInit(this.args.selector);
		
		this.data = this.args.data;
		this.dataName = this.args.title;
		// this.color = d3.scale.ordinal().range(["#00A0B0", "#CC333F",
		// "#EDC951"]);
		
		this.drawInit();
		this.drawTitle();		// 绘制标题
		this.drawBottomImg();	// 绘制底层图形
		this.drawText();		// 绘制文字
		this.drawTopImg();		// 绘制上层图形
		this.drawCircle();		// 绘制图形上的交点
		this.drawLine();		// 绘制放射线
		this.taketurns();		// 变化
	},
	drawInit : function(){

		var that = this;

		this.maxValue = Math.max(this.maxValue, d3.max(this.data, function(i){return d3.max(i.map(function(o){return o.value;}))}));

		this.allAxis = (this.data[0].map(function (i, j) {
			return i.axis
		}));    // Names of each axis

		this.total = this.allAxis.length;                    // The number of
																// different
		// axes
		this.radius = Math.max(this.width / 5, this.height / 5);     // Radius
																		// of
																		// the
		// outermost circle
		this.Format = d3.format('%');                 // Percentage formatting
		this.angleSlice = Math.PI * 2 / this.total;        // The width in
															// radians of
									// each "slice"
		this.svgValu = this.svg
			.attr({
				"width": this.width + this.padding.left + this.padding.right,
				"height": this.height + this.padding.top + this.padding.bottom,
				"class": "radar"
			});		// 最外层的svg元素

		this.g = this.svg.append("g")		// 绘制scg内的最外层g
			.attr("transform", "translate(" + (this.width / 1.9) + "," + (this.width / 3) + ")");

		this.axisGrid=this.g.append("g").attr("class", "axisWrapper");	// g元素内的形状，蛛网(白色部分)

		this.rScale = d3.scale.linear()
			.range([0, this.radius])
			.domain([0, this.maxValue]);
	},
	drawTitle : function(){
		var that=this
		var juXing=this.g.append("g")
			.attr({
				"class": "juXing",
				"transform": 'translate('+this.width/4.5+','+-this.width/4+')'
			});

		var juXingImg=juXing.append("rect")
			.attr({
				"width": this.width/5,
				"height": this.width/15,
				"fill": this.titleColor[0],
				"rx": this.width/20/3,
				"stroke": this.titleColor[1],
				"stroke-dasharray": "10,10"
			});
		
		var juXingText=juXing.append("text")
			.datum(this.dataName)
			.text(function(d,i){
				return d;
			})
			.attr({
				"text-anchor": "middle",
				"fill": this.titleColor[1],
				"font-weight": "bold",
				"font-size": +this.width/25+"px",
				"dy": this.padding.bottom,
				"transform": 'translate('+this.width/10+','+0+')'
			});
	},
	drawBottomImg: function(){
		var that = this;
		this.g.selectAll(".gridCircle") .remove();// 清除之前绘制部分

		// 绘制蛛网最外圈（白色部分）
		this.axisGrid.selectAll(".levels")
			.data(d3.range(1,(this.levels+this.data[0].length-1)).reverse())
			.enter()
			.append("line")
			.attr("transform",'scale('+0+','+0+')')
			.transition()
			.duration(1500)
			.attr({
				"transform": 'scale('+1+','+1+')',
				"x1": function(d, i){ return that.rScale(that.maxValue) * Math.cos(that.angleSlice*i - Math.PI/2); },
				"y1": function(d, i){ return that.rScale(that.maxValue) * Math.sin(that.angleSlice*i - Math.PI/2); },
				"x2": function(d, i){ return that.rScale(that.maxValue) * Math.cos(that.angleSlice*(i+1) - Math.PI/2); },
				"y2": function(d, i){ return that.rScale(that.maxValue) * Math.sin(that.angleSlice*(i+1) - Math.PI/2); },
				"class": "gridCircle",
				"stroke": "#ccc",
				"stroke-width": "1px",
				"fill-opacity": 0.8
			});

		// 内圈
		this.axisGrid.selectAll(".levels")               // 内
			.data(d3.range(1,(this.levels+this.data[0].length-1)).reverse())     // 这里加上的数值比传入数据数量少1
			.enter()
			.append("line")
			.attr("transform",'scale('+0+','+0+')')
			.transition()
			.duration(1500)
			.attr({
				"transform": 'scale('+1+','+1+')',
				"x1": function(d, i){ return that.rScale(that.maxValue) * Math.cos(that.angleSlice*i - Math.PI/2)/2; },
				"y1": function(d, i){ return that.rScale(that.maxValue) * Math.sin(that.angleSlice*i - Math.PI/2)/2; },
				"x2": function(d, i){ return that.rScale(that.maxValue) * Math.cos(that.angleSlice*(i+1) - Math.PI/2)/2; },
				"y2": function(d, i){ return that.rScale(that.maxValue) * Math.sin(that.angleSlice*(i+1) - Math.PI/2)/2; },
				"class": "gridCircle",
				"stroke": "#ccc",
				"stroke-width": "1px",
				"fill-opacity": 0.8
			});
	},
	drawText: function(){
		var that=this
		that.axisGrid.selectAll(".axisLabel").remove();// 清除之前绘制部分
		this.axisGrid.selectAll(".axis").remove();

		// Text indicating at what % each level is每层圆圈的数值（百分比）
		that.axisGrid.selectAll(".axisLabel")
			.data(d3.range(1,(this.levels+1)).reverse())
			.enter().append("text")
			.attr("transform",'scale('+1.2+','+1.2+')')
			.transition()
			.duration(1500)
			.delay(1000)
			.ease("bounce")
			.text(function(d,i) {return that.Format(that.maxValue * d/that.levels)})
			.attr({
				"transform": 'scale('+1+','+1+')',
				"class": "axisLabel",
				"x": 4,
				"y": function(d){return -d*that.radius/that.levels;},
				"dy": "0.4em",
				"font-size": this.width/25+"px",
				"fill": this.color[0],
				"font-family": "黑体"
			});
			

		this.axis = this.axisGrid.selectAll(".axis")
			.data(this.allAxis)
			.enter()
			.append("g")
			.attr("class", "axis");
		// Append the labels at each axis线对应的名称
		var test= this.axis.append("text")
			.attr("transform",'scale('+0+','+0+')')
			.transition()
			.duration(1500)
			.attr({
				"transform": 'scale('+1+','+1+')',
				"class": "legend",
				"font-size": this.radius/6+"px",
				"font-family": "黑体",
				"text-anchor": "middle",
				"fill": this.color[1],
				"dy": "0.35em",
				"x": function(d, i){return that.rScale(that.maxValue * that.labelFactor) * Math.cos(that.angleSlice*i - Math.PI/2)*1.45;},
				"y": function(d, i){ return that.rScale(that.maxValue * that.labelFactor) * Math.sin(that.angleSlice*i - Math.PI/2); }
			})
			.text(function(d){return d});
	},
	drawLine:function(){
		var that=this

		this.axis.append("line")
			.attr("transform",'scale('+0+','+0+')')
			.transition()
			.duration(1500)
			.delay(1000)
			.attr({
				"transform": 'scale('+1+','+1+')',
				"x1": 0,
				"y1": 0,
				"x2": function(d, i){return that.rScale(that.maxValue) * Math.cos(that.angleSlice*i - Math.PI/2);},
				"y2": function(d, i){ return that.rScale(that.maxValue) * Math.sin(that.angleSlice*i - Math.PI/2); },
				"class": "line",
				"stroke": this.color[2],
				"stroke-width": "1px",
				"fill-opacity": 0.8
			});
	},
	drawTopImg: function(){
		var that=this;
		this.g.selectAll("defs").remove();	// 清除之前绘制部分
		this.g.selectAll(".radarWrapper").remove();

		var filter = this.g.append('defs').append('filter').attr('id','glow'),
			feGaussianBlur = filter.append('feGaussianBlur').attr('stdDeviation','2.5').attr('result','coloredBlur'),
			feMerge = filter.append('feMerge'),
			feMergeNode_1 = feMerge.append('feMergeNode').attr('in','coloredBlur'),
			feMergeNode_2 = feMerge.append('feMergeNode').attr('in','SourceGraphic');

		// The radial line function雷达上面数据的部分
		this.radarLine = d3.svg.line.radial()
			.interpolate("linear-closed")
			.radius(function(d) { return that.rScale(d.value); })
			.angle(function(d,i) {return i*that.angleSlice; });

		if(this.roundStrokes) {
			this.radarLine.interpolate("cardinal-closed");
		}

		// Create a wrapper for the blobs
		this.blobWrapper = this.g.selectAll(".radarWrapper")
			.data(this.data)
			.enter().append("g")
			.attr("class", "radarWrapper");

		// Create the outlines彩色区域边框+和轴相交的节点
		this.blobWrapper.append("path")
			.attr("transform",'scale('+0+','+0+')')
			.transition()
			.duration(1500)
			.delay(1500)
			.attr("d", function(d,i) { return that.radarLine(d); })
			.attr({
				"transform": 'scale('+1+','+1+')',
				"class": "radarStroke",
				"stroke-width": this.strokeWidth + "px",
				"stroke": this.color[1],
				"fill": "none",
				"filter" : "url(#glow)"
			});

		// Append the backgrounds彩色区域的背景（整个颜色块，设置透明度）
		this.blobWrapper
			.append("path")
			.attr({
				"class": "radarArea",
				"fill": this.color[1],
				"fill-opacity": that.opacityArea
			})
			.attr("d", function(d,i) {return that.radarLine(d);})
			.on('mouseover', function (d,i){
				// Dim all blobs
				d3.selectAll(".radarArea")
					.transition().duration(200)
					.style("fill-opacity", 0.2);
				// Bring back the hovered over blob
				d3.select(this)
					.transition().duration(200)
					.style("fill-opacity", 0.7);
			})
			.on('mouseout', function(){
				// Bring back all blobs
				d3.selectAll(".radarArea")
					.transition().duration(200)
					.style("fill-opacity", that.opacityArea);
			})
			.attr("transform",'scale('+0+','+0+')')
			.transition()
			.duration(1500)
			.delay(1500)
			.attr("transform",'scale('+1+','+1+')')
	},
	drawCircle: function(){
		var that=this;

		// Append the circles 绘制的和轴相交的节点（通过数据确定）
		this.blobWrapper.selectAll(".radarCircle")
			.data(function(d,i) { return d; })
			.enter().append("circle")
			.attr("transform",'scale('+0+','+0+')')
			.transition()
			.duration(1500)
			.delay(1000)
			.attr({
				"class": "radarCircle",
				"transform": 'scale('+1+','+1+')',
				"r": this.dotRadius,
				"cx": function(d,i){ return that.rScale(d.value) * Math.cos(that.angleSlice*i - Math.PI/2); },
				"cy": function(d,i){ return that.rScale(d.value) * Math.sin(that.angleSlice*i - Math.PI/2); },
				"fill": "white",
				"fill-opacity": 0.8
			});
		// ///////////////////////////////////////////////////////
		// ////// Append invisible circles for tooltip ///////////
		// ///////////////////////////////////////////////////////
		// Wrapper for the invisible circles on top
		var blobCircleWrapper = this.g.selectAll(".radarCircleWrapper")
			.data(this.data)
			.enter()
			.append("g")
			.attr("class", "radarCircleWrapper");

		// Append a set of invisible circles on top for the mouseover pop-up
		// 和轴相交的节点移入产生的数据
		blobCircleWrapper.selectAll(".radarInvisibleCircle")
			.data(function(d,i) { return d; })
			.enter()
			.append("circle")
			.attr({
				"class": "radarInvisibleCircle",
				"r": this.dotRadius*1.5,
				"cx": function(d,i){ return that.rScale(d.value) * Math.cos(that.angleSlice*i - Math.PI/2); },
				"cy": function(d,i){ return that.rScale(d.value) * Math.sin(that.angleSlice*i - Math.PI/2); },
				"fill": "none",
				"pointer-events": "all"
				
			})
			.on("mouseover", function(d,i) {
				zhnx.getTooltip().style({
					"opacity": "0.9",
					"width": "50px",
					"height": "23px",
					"line-height": "23px",
					"z-index": "99999",
					"left": (d3.event.pageX - 30) + "px",
					"top": (d3.event.pageY - 30) + "px",
					"font-family": "黑体"
				}).text(that.Format(d.value))
			})
			.on("mouseout", function(){
				zhnx.getTooltip().style({
					"opacity": "0",
					"z-index": "-1",
				})
			});
	},
	repaint: function(){
		var that = this;

			that.drawBottomImg();
			that.drawText();		// 绘制文字
			that.drawTopImg();		// 绘制上层图形
			that.drawCircle();		// 绘制图形上的交点
			that.drawLine();		// 绘制放射线
	}

})// 建设管理主体类型——蛛网图结束
/**
 * 饼图
 * 
 * @param args
 *            zhnx.chart.pie({ selector: zhnx.windows.custom({ id: "widget5",
 *            pagePath: "module/waterCloud/agriculture", selector:
 *            "#centerZone", title: "治理水土流失面积" }, 350, 270), dataSet: [ ["注册用户",
 *            843], ["群组数", 209], ["在线人数", 578] ], dataName: [["zhuTiName",
 *            "即时通讯"]] })
 */
// 电子政务-即时通讯开始
zhnx.chart.pie = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.pie.prototype = $.extend({}, zhnx.chart.base,{
	constructor: zhnx.chart.pie,
	_defaults: {},
	padding: {top: 20, right: 20, bottom: 0, left: 20},
	dataSet: undefined,
	dataName: undefined,
	unit: undefined,
	innerRadius: 0,
	outerRadius: undefined,
	testSet: undefined,
	clickColor: ["rgb(133,133,133)","white","rgba(10,150,210,.5)","rgb(4,188,254)","rgb(250,165,0)"],	// 点击变换颜色，图例文字颜色,矩形颜色，矩形边框颜色，矩形文字颜色
	init: function(args){
		var that = this;
		
		this.baseInit(args.selector);
		
		this.dataSet = args.dataSet;
		this.dataName = args.dataName;
		this.unit = args.unit;
		this.outerRadius=this.width/6;

		this.drawCopy(args.dataSet);
		this.testSet=this.drawCopy(args.dataSet);
		this.drawTuLi();
		this.drawCircle(args.dataSet);

		this.taketurns();
	},
	drawTuLi:function(){
		var that = this;
		/*----------------------------------------------添加图例图形-------------------------------------------*/

		/*--------------------------------添加图例的g元素------------*/
		var tuLiTextg=this.svg.append("g")
			.attr("class","tuLiTextg")
			.attr("transform",'translate('+this.width/1.25+','+this.width/6+')');

		/*-----------------------------添加图例颜色--------------*/
		var tuLi=tuLiTextg.selectAll("g")
	    .data(this.dataSet)
	    .enter()
	    .append("g")

	var tuLiImg=tuLi.append("rect")
		.attr({
			"class": "tuLiImg",
			"width": this.width/20,
			"height": this.width/20,
			"fill": function(d,i){return d.color;},
			"y": function(d,i){ return that.padding.left*i;},
			"transform": 'translate('+-this.width/14+','+-this.width/25+')'
		})
	    .on("click",function(d,i){              // 点击事件
	        b=d3.select(this);
	        if(b.attr("fill")!=that.clickColor[0]){
	        	 b.attr("fill",that.clickColor[0]);
	            that.testSet[i].value=0;
	            that.svg.select("#testArcs").remove();// 清除d3元素
	            that.svg.select("defs").remove();
	            return that.drawCircle(that.testSet);        // 调用重绘函数
	        }else{
	            b.attr("fill",that.dataSet[i].color);
	            that.testSet[i].value=that.dataSet[i].value;
	            that.svg.select("#testArcs").remove();// 清除d3元素
	            that.svg.select("defs").remove();
	            return that.drawCircle(that.testSet);        // 调用重绘函数
	        }
	    });
		/*---------------------添加图例右侧文字---------------*/

		var tuLiText=tuLi.append("text")
			.attr({
				"text-anchor": "left",
				"fill": this.clickColor[1],
				"font-family": "黑体",
				"font-size": +this.width/30+"px",
				"y": function(d,i){return that.padding.left*i;}
			})
			.text(function(d,i){return d.name;});
		/*----------------------------------------------------------添加最上边标题-----------------------------*/
		var juXing=this.svg.append("g")
			.attr({
				"class": "juXing",
				"transform": 'translate('+this.width/2.5+','+this.width/10+')'
			});

		/*--------------------标题矩形------------------*/
		var juXingImg=juXing.append("rect")
			.attr({
				"width": this.width/5,
				"height": this.width/15,
				"fill": this.clickColor[2],
				"rx": this.width/20/3,
				"stroke": this.clickColor[2],
				"stroke-dasharray": "10,10"
			});
		/*---------------------标题文字-----------------*/
		var juXingText=juXing.append("text")
			.data(this.dataName)
			.attr({
				"text-anchor": "middle",
				"fill": this.clickColor[4],
				"font-family": "黑体",
				"font-size": +this.width/25+"px",
				"transform": 'translate('+this.width/10+','+this.width/20+')'
			})
			.text(function(d,i){return d[i+1];});
		
	},
	drawCopy: function(obj){
		var that=this;
		
		 var o,i,j,k;
		    if(typeof(obj)!="object" || obj===null)return obj;
		    if(obj instanceof(Array))
		    {
		        o=[];
		        i=0;j=obj.length;
		        for(;i<j;i++)
		        {
		            if(typeof(obj[i])=="object" && obj[i]!=null)
		            {
		                o[i]=arguments.callee(obj[i]);
		            }
		            else
		            {
		                o[i]=obj[i];
		            }
		        }
		    }
		    else
		    {
		        o={};
		        for(i in obj)
		        {
		            if(typeof(obj[i])=="object" && obj[i]!=null)
		            {
		                o[i]=arguments.callee(obj[i]);
		            }
		            else
		            {
		                o[i]=obj[i];
		            }
		        }
		    }

		    return o;
	},
	drawCircle: function(set){
		var that = this;
		
		var pie = d3.layout.pie().value(function (d, i) {return d.value;});
		 this.svg.select("#testArcs").remove();// 清除d3元素
         this.svg.select("defs").remove()
		/*---------------------添加defs元素（特殊图例形状）和数据无关---------*/
		var myDefs=this.svg.append("defs")
			.append("pattern")
			.attr("id","Layer0_0_FILL")
			.attr({
				"x": 0,
				"y": 0,
				"width": "20",          // 填充宽度
				"height": "10",         // 填充的间距
				"stroke":"white",
				"patternUnits": "userSpaceOnUse",   // 根据容器自行填充
				"patternTransform": "rotate(-45)"   // 填充角度
			})
			.append("path")
			.attr("stroke","none")
			.attr("d","M 100 2"+
				"L 100 1 96 1 96 0 93 0 93 1 90 1 90 0 87 0 87 1 84 1 84 0 81 0 81 1 78 1 78 0 75 0 75 1 72 1 72 0 69 0 69 1 66 1 66 0 63 0 63 1 60 1 60 0 57 0 57 1 54 1 54 0 51 0 51 1 48 1 48 0 45 0 45 1 42 1 42 0 39 0 39 1 36 1 36 0 33 0 33 1 30 1 30 0 27 0 27 1 24 1 24 0 21 0 21 1 18 1 18 0 15 0 15 1 12 1 12 0 9 0 9 1 6 1 6 0 3 0 3 1 0 1 0 2 3 2 3 3 6 3 6 2 9 2 9 3 12 3 12 2 15 2 15 3 18 3 18 2 21 2 21 3 24 3 24 2 27 2 27 3 30 3 30 2 33 2 33 3 36 3 36 2 39 2 39 3 42 3 42 2 45 2 45 3 48 3 48 2 51 2 51 3 54 3 54 2 57 2 57 3 60 3 60 2 63 2 63 3 66 3 66 2 69 2 69 3 72 3 72 2 75 2 75 3 78 3 78 2 81 2 81 3 84 3 84 2 87 2 87 3 90 3 90 2 93 2 93 3 96 3 96 2 100 2"+
				"M 95 2"+
				"L 94 2 94 1 95 1 95 2"+
				"M 89 1"+
				"L 89 2 88 2 88 1 89 1"+
				"M 82 2"+
				"L 82 1 83 1 83 2 82 2"+
				"M 76 1"+
				"L 77 1 77 2 76 2 76 1"+
				"M 71 1"+
				"L 71 2 70 2 70 1 71 1"+
				"M 64 1"+
				"L 65 1 65 2 64 2 64 1"+
				"M 59 1"+
				"L 59 2 58 2 58 1 59 1"+
				"M 52 2"+
				"L 52 1 53 1 53 2 52 2"+
				"M 46 1"+
				"L 47 1 47 2 46 2 46 1"+
				"M 41 1"+
				"L 41 2 40 2 40 1 41 1"+
				"M 35 2"+
				"L 34 2 34 1 35 1 35 2"+
				"M 29 1"+
				"L 29 2 28 2 28 1 29 1"+
				"M 23 1"+
				"L 23 2 22 2 22 1 23 1"+
				"M 16 2"+
				"L 16 1 17 1 17 2 16 2"+
				"M 11 1"+
				"L 11 2 10 2 10 1 11 1"+
				"M 4 1"+
				"L 5 1 5 2 4 2 4 1 Z")
			.style("fill","#05BCFE")
			.attr("transform",'scale('+1.3+','+1.3+')');



		this.pieData=pie(set);       // 根据传入的数据定义
		var myArc=d3.svg.arc()        // 创建弧生成器
			.innerRadius(0)
			.outerRadius(this.outerRadius);

		var testArcs=this.svg.append("g")    // 在svg里面增加绘制饼图的组，并且定义id
			.attr("id","testArcs");

		var arcs=testArcs.selectAll("g")    // 在定义的饼图组里面，根据数据添加
			.data(this.pieData)
			.attr("class","myArcs");

		var arcsExit=arcs.exit().remove();  // 数据个数小于定义的元素就移除元素

		var arcsEnter=arcs.enter();         // 数据个数和元素相同

		var arcsEnterG=arcsEnter.append("g")    // 添加元素g（绘制饼图的元素）
			.attr({
				"class": function(d,i){return "gClass";},
				'transform': 'translate('+(this.width/2)+','+(this.width/2)+')'
			});


		var testThis=0;                         // 定义变量（选择this）

		/*-------------------给饼图路径path添加移入移出事件---------*/
		var front=arcsEnterG.append("path")               // 在g元素下面添加path，填充饼图
			.on({"mouseover":function(d){       // 鼠标移入显示
				zhnx.getTooltip().style({
						"opacity": "0.9",
						"width": "130px",
						"height": "25px",
						"line-height": "25px",
						"z-index": "99999",
						"left": (d3.event.pageX - 75) + "px",
						"top": (d3.event.pageY - 67) + "px"
					})
					.html('<p>'+d.data.name + "为" + d.data.value+"人"+'</p>')
				testThis=d3.select(this);
				testThis.attr(
					{"transform":'scale(' +1.2+',' +1.2+')'}
				)
			},
				"mouseout":function(){          // 鼠标移出
					zhnx.getTooltip().style({
						"opacity": 0,
						"z-index": "-1"
					});
					testThis=d3.select(this);
					testThis.attr(
						{"transform":'scale(' +1+',' +1+')'}
					)
				}
			})
			.attr("fill",function(d){         // 饼图的填充颜色或图案
				return d.data.color;
			})
			.transition()
			.duration(1000)
			.attrTween('d', function (finish) {
				var start = {
					startAngle:0,
					endAngle: 0
				};
				var i = d3.interpolate(start, finish);
				return function (d) {
					return myArc(i(d));
				}
			});

		function textSet(){
			/*-----------------------添加引出文字描述的线----------------*/
			arcsEnterG.append("line")
				.attr("stroke","rgb(250,165,0)")
				.attr("stroke-width",2)
				.attr("x1",function(d){
					 if(d.value==0){
		                    0;
		                }else{
		                	return myArc.centroid(d)[0]*1.8
		                }					
				})
				.attr("y1",function(d){
					if(d.value==0){
	                    0;
	                }else{
	                	return myArc.centroid(d)[1]*1.8
	                }					
				})
				.attr("x2",function(d){
					if(d.value==0){
	                    0;
	                }else{
	                	return myArc.centroid(d)[0]*2.5
	                }					
				})
				.attr("y2",function(d){
					if(d.value==0){
	                    0;
	                }else{
	                	return myArc.centroid(d)[1]*2.5
	                }					
				});
			/*-------------------------引出直线前面的圆----------------------*/
			var textCirl=arcsEnterG.append("circle")
				.attr("fill","rgb(250,165,0)")
				.attr("r",function(d){
	                if(d.value==0){
	                    0;
	                }else{
	                  return  that.outerRadius/20;
	                }
	            })
				.attr("transform",function(d){
					var x=myArc.centroid(d)[0]*1.8;
					var y=myArc.centroid(d)[1]*1.8;
					return 'translate('+x+','+y+')';
				});
			/*--------------------添加线对应的文字描述，根据数据计算所占比例--------*/
			arcsEnterG.append("text")
				.attr("transform",function(d){
					var x=myArc.centroid(d)[0]*4.2;
					var y=myArc.centroid(d)[1]*3;
					return 'translate('+x+','+y+')';
				})
				.attr("text-anchor","middle")
				.text(function (d,i) {
					var sum=0;
					for(var j=0;j<set.length;j++){
						sum+=set[j].value;
					}
					var percent=Number(d.data.value)/sum*100;
					if(d.data.value==0){
	                    0;
	                }else{
	                	return percent.toFixed(1)+"%"+("("+d.data.value+"人"+")");
	                }
					
				})
				.attr("fill","rgb(250,165,0)")
				.attr("font-weight","bold")
				.attr("font-size",+this.width/25+"px");
		}

		setTimeout(textSet,800)		
	},
	repaint: function(){
		var that=this;

			that.drawCircle(this.testSet);
	}

})// 拓展结束(电子政务-即时通讯)

// 抄表信息开始
zhnx.chart.chaoBiao = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.chaoBiao.prototype = $.extend({}, zhnx.chart.base, {
		constructor:zhnx.chart.chaoBiao,
		_defaults : {},
		
		dataChaoBiao:undefined,
		totalTitle:undefined,
		textData:undefined,
		myUnit:undefined,
		
		padding:{top:20,right:100,bottom:20,left:100},
		color:["#E17512","rgba(255,255,255,.8)","#05BCFF","rgba(32,95,136,.8)"],
		xScale:undefined,
		yScaleRight:undefined,
		sumShuiLiang:0,
		peopleNum1:2,
		peopleNum2:undefined,
		peopleNum3:undefined,
		peopleNum4:undefined,
		testZ1:0,   // 大的个数
		testY1:0,
		testZ2:0,   // 小的个数
		testY2:0,
		testZ3:0,   // 次小的个数
		testY3:0,
		testZ4:0,   // 最小的个数
		testY4:0,   // 最小的个数
		test:0,
		peopleGeShu:[],
		testPeople:[],
		peopleData:[],      // 将户数的数据保存在数组中
		sumPeopleUser:0,    // 户数总和
		init: function(args){
			
			this.baseInit(args.selector);
			
			this.dataChaoBiao=args.dataChaoBiao;
			this.totalTitle=args.totalTitle;
			this.textData=args.textData;
			this.myUnit=args.myUnit;
			
			for(var j=0;j<this.dataChaoBiao.length;j++){     // 求取数据和
			    this.sumShuiLiang+=this.dataChaoBiao[j].shuiLiang;
			}
			this.dataLength=this.dataChaoBiao.length;
			this.xScale=d3.scale.linear()            // x轴比例尺
		    .domain([0,this.sumShuiLiang])
		    .range([this.width-this.padding.left-this.padding.right,0]);

			this.yScaleRight=d3.scale.ordinal()           // y轴比例尺（右侧）
		    .domain(d3.range(this.dataLength))
		    .rangeRoundBands([0,this.height-this.padding.top-this.padding.bottom]);
			this.tuXingJu=this.svg.append("g")
		    .attr("class","tuXingJu")
		    .attr("transform","translate(" + this.padding.left + "," + this.height/3 + ")");
			this.tuXingPeople=this.svg.append("g")
		    .attr("class","tuXingPeople")
		    .attr("transform","translate(" + this.padding.left + "," + this.height/3 + ")");
			this.peopleNum2=this.peopleNum1*10,
			this.peopleNum3=this.peopleNum2*10,
			this.peopleNum4=this.peopleNum3*10,
			
			this.drawTotalTitle();
			this.drawTuLi();
			this.drawText();
			this.drawRect();
			this.dataPeople();
			this.drawPeople();
			this.taketurns();			
		},
		drawTotalTitle: function(){
			var that = this;
			
			var myTitle=this.svg.append("text")          // 添加标题
		    .attr({
		    	"class": "myTitle",
		    	"font-size": Math.min(this.width,this.height)/20+"px",
		    	"fill": function(){return that.color[0]},
		    	"font-family": "黑体",
		    	"text-anchor": "middle"
		    })
		    .data(this.totalTitle)
		    .text(function(d){
		        return d;
		    })
		    .attr("transform","translate(" + this.width/2 + "," + this.padding.top*1.5 + ")")
		},
		drawTuLi: function(){
			var that = this;
			
			// 定义人员数据节点
			this.svg.append("defs").append("g").attr({
			    "id": "test"
			}).append("path").attr({
			    "fill":function(){
			        return that.color[2]
			    },
			    "stroke": "none",
			    "d": "M 8.4 4.7" +
			    " L 5.9 4.7" +
			    " Q 6.2 4.55 6.45 4.25 7.2 3.55 7.2 2.5 7.2 1.45 6.45 0.7 5.75 0 4.7 0 3.65 0 2.9 0.7 2.2 1.45 2.2 2.5 2.2 3.55 2.9 4.25 3.2 4.55 3.5 4.7" +
			    " L 1 4.7" +
			    " Q 0 4.7 0 5.7" +
			    " L 0 20.65" +
			    " Q 0 21.65 1 21.65" +
			    " L 1.95 21.65 1.95 28.5" +
			    " Q 1.95 30 3.45 30" +
			    " L 5.95 30" +
			    " Q 7.45 30 7.45 28.5" +
			    " L 7.45 21.65 8.4 21.65" +
			    " Q 9.4 21.65 9.4 20.65" +
			    " L 9.4 5.7" +
			    " Q 9.4 4.7 8.4 4.7 Z"
			});
			
			/*------------------------绘制矩形及人图例---------------------*/
			var myImg=this.svg.append("g")               // 矩形图例
			    .attr({
			    	"class": "myImg",
			    	"transform": "translate(" + this.width/1.7 + "," + this.height/5 + ")"
			    });

			var myRect=myImg.append("rect")         // 绘制矩形图例
			    .attr({
			    	"width": Math.min(this.width,this.height)/30+"px",
			    	"height": Math.min(this.width,this.height)/30+"px",
			    	"fill": function(){return that.color[2]},
			    	"transform": 'translate('+this.padding.right/1.7 +','+0+')'
			    });

			var myImgText=myImg.append("text")      // 矩形图例说明
				.data(this.myUnit)
				.text(function(d){ return d;})    
				.attr({
			    	"class": "myImgText",
			    	"font-size": Math.min(this.width,this.height)/30+"px",
			    	"fill": function(){return that.color[1]},
				    "font-family": "黑体",
				    "text-anchor": "right",
				    "x": Math.min(this.width,this.height)/18,
				    "y": Math.min(this.width,this.height)/30,
				    "transform": 'translate('+this.padding.right/1.7 +','+0+')'
			    });

			/*-----------人图例----------*/
			var imgTuLi=myImg
			    .append("g")
			    .attr({
			    	"class": "imgTuLi",
			    	"transform": 'translate('+-this.padding.left/2+','+-this.padding.top/2+')'
			    });

			var peopleText2=imgTuLi.selectAll("text")
			    .data(this.textData)
			    .enter()
			    .append("text")
			    .text(function(d){return d;})
			    .attr({
			    	"fill": function(){return that.color[1]},
			    	"text-anchor": "middle",
			    	"font-size": Math.min(this.width,this.height)/25 + "px",
			    	"font-weight": "bold",
			    	"x": function(d,i){return that.height/8*i}
			    });

			var imgTuLi1=imgTuLi
			    .append("g")        // 最小人
			    .append("use")
			    .attr("xlink:href","#test")
			    .attr({
			        "transform": function (d, i) {
			            var translate = "translate(" +(that.padding.right/4-5) + ", " + -that.padding.top/1.5+ ")";
			            var scale = 'scale('+that.height/(600+200*3)+','+that.height/(600+200*3)+')';
			            return  translate + " " + scale;
			        }
			    });

			var imgTuLi2=imgTuLi.append("g")        // 次小人
			    .append("use")
			    .attr("xlink:href","#test")
			    .attr({
			        "transform": function (d, i) {
			            var translate = "translate(" +(that.padding.right/1.4-10) + ", " + -that.padding.top/1.5+ ")";
			            var scale = 'scale('+that.height/(600+200*2)+','+that.height/(600+200*2)+')';
			            return  translate + " " + scale;
			        }
			    });


			var imgTuLi3=imgTuLi.append("g")        // 第二小人
			    .append("use")
			    .attr("xlink:href","#test")
			    .attr({
			        "transform": function (d, i) {
			            var translate = "translate(" +(that.padding.right*1.15-15) + ", " + -that.padding.top/1.5+ ")";
			            var scale = 'scale('+that.height/(600+200*1)+','+that.height/(600+200*1)+')';
			            return  translate + " " + scale;
			        }
			    });

			var imgTuLi4=imgTuLi.append("g")        // 最大人
			    .append("use")
			    .attr("xlink:href","#test")
			    .attr({
			        "transform": function (d, i) {
			            // var scaleNum=height/(600+200*i)
			            var translate = "translate(" +(that.padding.right*1.6-15)+ ", " + -that.padding.top/1.3+ ")";
			            var scale = 'scale('+that.height/(600+200*0)+','+that.height/(600+200*0)+')';
			            return  translate + " " + scale;
			        }
			    });
		},
		drawText: function(){
			var that = this;
			
			var texts = this.tuXingJu.selectAll(".MyText")      // 绘制矩形文字（矩形右侧）
		    .data(this.dataChaoBiao)
		    .enter()
		    .append("text")
		    .attr({
		    	"class": "MyText",
		    	"text-anchor": "left",
		    	"x": this.width-this.padding.right-this.padding.left,
		    	"y": function(d,i){return (that.height-that.padding.top-that.padding.bottom)/that.dataLength/1.5*i},// y纵向位置
			    "dx": this.padding.left/5,	// 文字横向位置
			    "dy": this.padding.top,
			    "height": (this.height-this.padding.top-this.padding.bottom)/this.dataLength/3, // 矩形间的间距+高度
			    "fill": function(){return that.color[1]},
			    "font-weight": "bold",
			    "font-size": Math.min(this.width,this.height)/30+"px"
		    })
		    .text(function(d){return d.shuiLiang;});// 返回数据文字
			
			// y轴左侧
			var peopleTexts = this.tuXingPeople              // 绘制人形处文字（矩形左侧）
		    .selectAll(".MyPeopleTexts")
		    .data(this.dataChaoBiao)
		    .enter()
		    .append("text")
		    .attr({
		    	"class": "MyPeopleTexts",
		    	"text-anchor": "end",
		    	"y": function(d,i){return (that.height-that.padding.top-that.padding.bottom)/that.dataLength/1.5*i},// y纵向位置
		    	"dx": -this.padding.left/5,// 文字横向位置
		    	"fill": function(){return that.color[1];},
			    "font-weight": "bold",
			    "font-size": Math.min(this.width,this.height)/25+"px" 
		    })   
		    .text(function(d){return d.city;});			// 返回数据文字
		},
		drawRect: function(){
			var that = this;
			
			this.tuXingJu.selectAll(".myRect").remove();
			this.tuXingJu.selectAll(".myRectTop").remove();
			
		var rects=this.tuXingJu.selectAll("myRect")    // 绘制底层矩形图
		    .data(this.dataChaoBiao)
		    .enter()
		    .append("rect")
		    .attr({
		    	"class": "myRect",
		    	"y": function(d,i){return (that.height-that.padding.top-that.padding.bottom)/that.dataLength/1.5*i},// y纵向位置
			    "width": this.width-this.padding.right-this.padding.left,
			    "height": (this.height-this.padding.top-this.padding.bottom)/this.dataLength/3, // 矩形间的间距+高度
			    "fill": function(){return that.color[3]},
			    "opacity": 0
		    })
		    .transition()
		    .duration(700)
		     .attr("opacity",1)

		var rectTop=this.tuXingJu.selectAll("myRectTop")         // 上层的数据条（变化）
		    .data(this.dataChaoBiao)
		    .enter()
		    .append("rect")
		    .attr({
		    	"class": "myRectTop",
		    	"y": function(d,i){return (that.height-that.padding.top-that.padding.bottom)/that.dataLength/1.5*i},// y纵向位置
			    "height": (this.height-this.padding.top-this.padding.bottom)/this.dataLength/3, // 矩形间的间距+高度
			    "fill": function(){ return that.color[2] }
		    })
		// 初始加载动画
		    rectTop
		    .attr("width",0)
		    .transition()
		    .duration(1000)
		    .ease("linear")
		    .attr("width",function(d,i){return that.width-that.padding.right-that.padding.left- that.xScale(d.shuiLiang);})
		},
		dataPeople: function(){
			var that = this;
			/*--------------------------计算户数-------------------------*/
			// 假设小人最小户数为2户；次小为2*10，小为2*10*10，大为2*10*10*10
//			this.testPeople=[];      // 得到换算后户数的数组（总的）
			for(var h= 0;h<this.dataChaoBiao.length;h++){
				
				this.peopleData.push(this.dataChaoBiao[h].userNum);
				this.sumPeopleUser+=this.dataChaoBiao[h].userNum;
			}
			for(var a=0;a<this.peopleData.length;a++){       // 将数据换算为需要多少人
//				this.=[];     // 户数的数组
				this.test=this.peopleData[a];
			    if(this.test%this.peopleNum4==0){
			    	this.testZ1=parseInt(this.test/this.peopleNum4);       // 取整
			    }else{
			    	this.testZ1=parseInt(this.test/this.peopleNum4);
			    	this.testY1=this.test%this.peopleNum4;                 // 取余
			        if(this.testY1%this.peopleNum3==0){
			        	this.testZ2=parseInt(this.testY1/this.peopleNum3);     // 取整
			        }else{
			        	this.testZ2=parseInt(this.testY1/this.peopleNum3);
			        	this.testY2=this.test%this.peopleNum3;              // 取余
			            if(this.testY2%this.peopleNum2==0){
			            	this.testZ3=parseInt(this.testY2/this.peopleNum2);     // 取整
			            }else{
			            	this.testZ3=parseInt(this.testY2/this.peopleNum2);
			            	this.testY3=this.testY2%this.peopleNum2;        // 取余
			            	this.testY4=Math.floor(this.testY3/this.peopleNum1);   // 向下取整
			            }
			        }
			    }
			   
			    this.peopleGeShu=[this.testZ1,this.testZ2,this.testZ3,this.testY4];      // 得到各个数据换算之后每种户数
			    this.testPeople.push(this.peopleGeShu);
			}
		},
		drawPeople: function(){
			var that = this;
			/*------------------根据数据绘制人--------------*/
			var peopleWidth=4;
			var peopleHeight=10;
			var unit=1;
			var modulo=50;
			this.tuXingPeople.selectAll(".waiCengG").remove();
			 var testImg=this.tuXingPeople.append("g")
			     .attr("class","waiCengG")
			     .selectAll("g")
			     .data(this.testPeople)
			     .enter()
			     .append("g")
			     .attr("class","ciWaiCengG")     
			     .attr({
			         "transform": function (d, i) {
			             var translate = "translate(" +0 + ", " + (-that.padding.top+(that.height-that.padding.top-that.padding.bottom)/that.dataLength/1.5*i) + ")";
			             return  translate;
			         }
			     })
			     .each(function(d,i){
			         d3.select(this)
			             .selectAll("g")
			             .data(d)
			             .enter()
			             .append("g")
			             .attr("class","neiCengG")
			             .attr("transform",function(d,i){
			                 var scaleNum=that.height/(600+200*i)
			                 var translateX =  ((i)) * (peopleWidth * scaleNum)*peopleWidth*i;
			                 var translateY = peopleHeight*that.height/(1000)*i/2;
			                 var translate = "translate(" + translateX + ", " + translateY + ")";
			                 return  translate ;
			             })
			             .each(
			                 function (d, i) {
			                     var scaleNum=that.height/(600+200*i)
			                     var peopleNum = Math.floor(parseInt(d) / unit);
			                     d3.select(this).selectAll(".testPeople")
			                         .data(d3.range(peopleNum))
			                         .enter()
			                         .append("g")
			                         .attr({
			                             "transform": function (d, i) {
			                                 var translateX = ((i)) * (peopleWidth * scaleNum)*peopleWidth;
			                                 var translate = "translate(" + translateX + ", " + 0 + ")";
			                                 var scale = "scale(" + scaleNum + ")";
			                                 return  translate + " " + scale;
			                             }
			                         })
			                         .append("use")
			                         .attr({
			                             "xlink:href": "#test",
			                                         "fill-opacity": 0
			                         })
			                         .transition().duration(800).delay(function (d, i) {
			                                         return i * 100
			                                     })
			                                     .attr({
			                                         "fill-opacity": 1
			                                     });
			                 }
			             )
			     })
		},
		repaint: function(){
			var that = this;
		
				that.drawRect();
				that.drawPeople();
		}
		
})// 抄表信息结束
// Q--water--stop



/**
 * 分段面图
 * 
 * @param args
 *            zhnx.chart.subsectionArea({ selector: zhnx.windows.custom({ id:
 *            "widget3", pagePath: "module/waterCloud/agriculture", selector:
 *            "#centerZone", title: "雨情统计" }, 400, 250), title: "雨情统计",
 *            xAxisLabels: "（量级）", yAxisLabels: "（数量）", series: [{ name: "降雨",
 *            data: [[10, 5], [20, 4], [26, 4], [29, 3], [30, 4], [35, 0], [50,
 *            0], [100, 0], [250, 0]] }] })
 */
zhnx.chart.subsectionArea = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.subsectionArea.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.subsectionArea,
	_defaults : {},
	font12Height : 12,
	font12Width : 6, 
	font28Height : 28, 
	font28Width : 14,
	padding:{left: 30, top: 70, right: 60, bottom: 25},
	durationTime: 2000,
	deviationX: 2,
	title: undefined,
	xAxisLabels: undefined,
	yAxisLabels: undefined,
	svg: undefined,
	dataGroup: undefined,
	xScale: undefined,
	yScale: undefined,
	yScaleCircle: undefined,
	init: function(){
		// 基本初始化
		this.baseInit(this.args.selector);
		// 参数转换
	    this.series = this.args.series, this.title = this.args.title, this.xAxisLabels = this.args.xAxisLabels, this.yAxisLabels = this.args.yAxisLabels;
	    
	    this.drawInit();
	    this.drawTitle();
	    this.drawXAxis();
	    this.drawYAxis();
	    this.drawData();
	    this.taketurns();
	},
	drawInit: function(){
	    // 定义SVG节点
	    this.xAxisGroup = this.svg.append("g");
	    this.yAxisGroup = this.svg.append("g");
	    this.dataGroup = this.svg.append("g");
	},
	drawTitle: function(){
	    this.svg.append("g").append("text").datum(this.title)
	        .attr({
	            "x": function (d) {
	                return 0;
	            },
	            "y": function (d) {
	                return 35;
	            },
	            "font-size": "22px",
	            "font-family": "黑体",
	            "fill": d3.rgb(255, 168, 1).toString()
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawXAxis: function(){
		var that = this;
	    var xAxisNumMax = d3.max(d3.map(this.series, function (d) {
	        return d3.max(d.data.map(function (e) {
	            return e[0];
	        }));
	    }).keys().map(function (e) {
	        return parseFloat(e);
	    }));
	    this.xScale = d3.scale.linear().domain([0, xAxisNumMax + 10]).range([0, this.width - this.padding.left - this.padding.right]);
	    this.xAxisGroup
	        .attr({
	            "transform": "translate(" + that.padding.left + "," + (that.height - that.padding.bottom) + ")"
	        }).call(d3.svg.axis().scale(that.xScale).orient("bottom").tickValues([0, 25, 50, 100, 250]).ticks(5).tickSize(0, 0).tickPadding(10));
	    this.xAxisGroup.select("path")
	        .attr({
	            "stroke-width": 2,
	            "stroke": d3.rgb(168, 135, 105).toString(),
	            "fill": "none"
	        });
	    this.xAxisGroup.selectAll("text")
	        .attr({
	            "fill": d3.rgb(255, 255, 255).toString()
	        });
	    this.svg.append("text").datum(that.xAxisLabels)
	        .attr({
	            "transform": "translate(" + (that.width - that.padding.right + 5) + "," + (that.height - that.padding.bottom + 18) + ")",
	            "fill": d3.rgb(255, 255, 255).toString()
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawYAxis: function(){
		var that = this;
	    var yAxisNumMax = d3.max(d3.map(this.series, function (d) {
	        return d3.max(d.data.map(function (e) {
	            return e[1];
	        }));
	    }).keys().map(function (e) {
	        return parseFloat(e);
	    }));
	    this.yScale = d3.scale.linear().domain([0, yAxisNumMax * 3]).range([this.height - this.padding.top - this.padding.bottom, 0]);
	    this.yScaleCircle = d3.scale.linear().domain([0, yAxisNumMax]).range([this.height - this.padding.top - this.padding.bottom, 0]);
	    this.yAxisGroup
	        .attr({
	            "transform": "translate(" + that.padding.left + "," + that.padding.top + ")"
	        }).call(d3.svg.axis().scale(that.yScale).orient("left").tickSize(0, 0).tickPadding(10));
	    this.yAxisGroup.select("path")
	        .attr({
	            "stroke-width": 2,
	            "stroke": d3.rgb(12, 34, 75).toString(),
	            "fill": "none"
	        });
	    this.yAxisGroup.selectAll("text")
	        .attr({
	            "fill": d3.rgb(255, 255, 255).toString()
	        });
	    this.svg.append("text").datum(that.yAxisLabels)
	        .attr({
	            "transform": "translate(" + 0 + "," + (that.padding.top - 10) + ")",
	            "fill": d3.rgb(255, 255, 255).toString()
	        })
	        .text(function (d) {
	            return d;
	        });
	},
	drawData: function(){
		var that = this;
	    // 数据绘制
	    var areapath = d3.svg.area()
	        .x(function (d, i) {
	            return that.xScale(d[0]);
	        }).x0(0)
	        .y(function (d, i) {
	            return that.yScale(d[1]);
	        }).y0(d3.max(that.yScale.range())).interpolate("basis"), legendIdx = 0, ser = that.series[legendIdx];
        
        this.dataGroup.selectAll("*").remove();
        this.dataGroup
            .attr({
                "transform": "translate(" + that.padding.left + "," + that.padding.top + ")"
            });
        this.dataGroup.append("path")
            .attr({
                "d": areapath.y(d3.max(that.yScale.range()))(ser.data),
                "stroke-width": 1,
                "stroke": d3.rgb(231, 162, 4).toString(),
                "fill": d3.rgb(162, 104, 43).toString(),
                "fill-opacity": 0.5
            })
            .transition().duration(that.durationTime)
            .attr({
                "d": areapath.y(function (d, i) {
                    return that.yScale(d[1]);
                })(ser.data)
            });
        that.drawDataTooltips(ser);
	},
	drawDataTooltips: function(ser){
		var that = this;
        that.dataGroup.append("g")
        .selectAll("line")
        .data(ser.data).enter()
        .append("line")
        .attr({
            "x1": function (d, i) {
                return that.xScale(d[0]);
            },
            "y1": function (d, i) {
                return that.height - that.padding.top - that.padding.bottom;
            },
            "x2": function (d, i) {
                return that.xScale(d[0]);
            },
            "y2": function (d, i) {
                return that.height - that.padding.top - that.padding.bottom;
            },
            "stroke-width": 1,
            "stroke": d3.rgb(231, 162, 4).toString(),
            "style": "stroke-dasharray:6"
        })
        .transition().duration(that.durationTime)
        .attr({
            "y1": function (d, i) {
                return that.yScale(d[1]);
            },
            "y2": function (d, i) {
                return (i == 0 || i == ser.data.length - 1) ? that.yScaleCircle(d[1]) : [that.yScale(d[1]), that.yScaleCircle(d[1])][i % 2];
            }
        });
    that.dataGroup.append("g")
        .selectAll("circle")
        .data(ser.data).enter()
        .append("circle")
        .attr({
            "transform": function (d, i) {
                return "translate(" + that.xScale(d[0]) + "," + (that.height - that.padding.top - that.padding.bottom) + ")"
            },
            "cx": 0,
            "cy": 0,
            "r": 8,
            "fill": function (d, i) {
                return (i == 0 || i == ser.data.length - 1) ? d3.rgb(5, 164, 245).toString() : ["none", d3.rgb(5, 164, 245).toString()][i % 2];
            }
        })
        .transition().duration(that.durationTime)
        .attr({
            "transform": function (d, i) {
                return "translate(" + that.xScale(d[0]) + "," + that.yScaleCircle(d[1]) + ")"
            }
        });
    that.dataGroup.append("g")
        .selectAll("text")
        .data(ser.data).enter()
        .append("text")
        .attr({
            "transform": function (d, i) {
                return "translate(" + that.xScale(d[0]) + "," + (that.height - that.padding.top - that.padding.bottom) + ")"
            },
            "fill": d3.rgb(255, 255, 255).toString(),
            "text-anchor": "middle",
            "dominant-baseline": "middle"
        })
        .text(function (d, i) {
            return (i == 0 || i == ser.data.length - 1) ? d[1] : ['', d[1]][i % 2];
        })
        .transition().duration(that.durationTime)
        .attr({
            "transform": function (d, i) {
                return "translate(" + that.xScale(d[0]) + "," + that.yScaleCircle(d[1]) + ")"
            }
        })
        .tween("text", function(d, i){
        	if(i == 0 || i == ser.data.length - 1 || (i != 0 && i != ser.data.length - 1) && i % 2){
        		var iter = d3.interpolate(0, d[1]);
        		return function (t) {
        			this.textContent = d3.round(iter(t), 0);
        		}
        	}
        });
	},
	repaint: function(){
		this.drawData();
	}
});


zhnx.chart.compoundPieBarChart = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.compoundPieBarChart.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.compoundPieBarChart,
	_defaults : {},
	paddingL:{left: 100, top: 70, right: 110, bottom: 110, center: 55},
	paddingR:{left: 90, top: 70, right: 40, bottom: 110, center: 25},
	widthL: 0,
	widthR: 0,
	title: "",
	titleAlign: "middle", // start、 middle、 end
	durationTime: 2000,
	cityIdx:0,
	yearIdx:0,
	gradeIdx:0,
	pieRadius:0,
	pieCenterX:0,
	pieCenterY:0,
	textLineMaxTimes: 1.1,
	textLineMinTimes: 1.0,
	textLineBaseTimes: 2,
	init: function(){
		// 基本初始化
		this.baseInit(this.args.selector);
		
		var that = this;
	    this.widthL = this.width / 2 + 30, this.widthR = this.width / 2 - 30;
	    // 数据
	    this.labels = this.args.labels, this.series = this.args.series;
	    // 标题相关
	    this.title = this.args.title != undefined ? this.args.title : this.title;
	    this.titleAlign = this.args.titleAlign != undefined ? this.args.titleAlign : this.titleAlign;
	    // 文字线条
	    this.textLineMaxTimes = this.args.textLineMaxTimes != undefined ? this.args.textLineMaxTimes : this.textLineMaxTimes;
	    this.textLineMinTimes = this.args.textLineMinTimes != undefined ? this.args.textLineMinTimes : this.textLineMinTimes;
	    
	    this.drawInit();
	    this.drawTitle();
	    this.drawXAxis();
	    this.drawLegendL();
	    this.drawPieData();
	    this.drawBarData();
	    this.taketurns();
	},
	drawInit: function(){
		var that = this;
	    // 定义SVG节点
	    this.pieRadius = Math.min(this.widthL - this.paddingL.left - this.paddingL.right / 2, this.height - this.paddingL.top - this.paddingL.bottom - this.paddingL.center);
	    this.pieCenterX = this.paddingL.left + (this.widthL - this.paddingL.left - this.paddingL.right) / 2;
	    this.pieCenterY = this.height - this.paddingL.bottom - this.paddingL.center;
	    // 初始化节点
	    this.titleGroup = this.svg.append("g");
	    this.xAxisGroup = this.svg.append("g");
	    this.legendLGroup = this.svg.append("g");
	    this.legendRGroup = this.svg.append("g");
	    this.pieDataGroup = this.svg.append("g");
	    this.textLineGroup = this.svg.append("g");
	    this.textGroup = this.svg.append("g");
	    this.textCenterGroup = this.svg.append("g");
	    this.textCenterLineGroup = this.svg.append("g");
	    
	    this.yAxisGroup = this.svg.append("g");
	    this.barDataGroup = this.svg.append("g");
	    
	    // 节点位置初始化
	    this.xAxisGroup.attr({
			"transform": "translate(" + (that.paddingL.left / 1.5) + "," + (that.height - that.paddingL.bottom) + ")"
		});
	    this.legendLGroup.attr({
			"transform": "translate(" + (that.paddingL.left / 1.5) + "," + (that.height - that.paddingL.bottom) + ")"
		});
	    this.legendRGroup.attr({
			"transform": "translate(" + that.paddingL.left + "," + (that.height - that.paddingL.bottom) + ")"
		});
	    this.pieDataGroup.attr({
			"transform": function(){
				return "translate(" + that.pieCenterX + "," + that.pieCenterY + ")";
			}
    	});
	    this.textLineGroup.attr({
			"transform": function(){
				return "translate(" + that.pieCenterX + "," + that.pieCenterY + ")";
			}
    	});
	    this.textGroup.attr({
			"transform": function(){
				return "translate(" + that.pieCenterX + "," + that.pieCenterY + ")";
			}
    	});
	    this.yAxisGroup.attr({
			"transform": function(){
				return "translate(" + (that.widthL + that.paddingR.left) + "," + that.paddingR.top + ")";
			}
    	});
	    this.barDataGroup.attr({
			"transform": function(){
				return "translate(" + (that.widthL + that.paddingR.left) + "," + that.paddingR.top + ")";
			}
    	});
	    // 定义指针模型
	    var roundGroup = this.svg.append("defs")
	    	.append("g")
	    	.attr({
	    		"id": "pieBarRoundDefs",
	    		"transform":"scale(0.1)"
	    	});
	    roundGroup.append("path")
	    	.attr({
	    		"fill": "#F3A61C",
	    		"d":"M146.8,6.2C68.6,6.2,5.2,69.6,5.2,147.9s63.4,141.7,141.7,141.7s141.7-63.4,141.7-141.7 " +
	    			"S225.1,6.2,146.8,6.2z M146.8,274.5c-69.9,0-126.6-56.7-126.6-126.6S76.9,21.2,146.8,21.2s126.6,56.7,126.6,126.6 " +
	    			"S216.8,274.5,146.8,274.5z"
	    	});
	    roundGroup.append("path")
	    	.attr({
	    		"fill": "#F3A61C",
	    		"d":"M146.8,117.7c-2,0-3.9,0.2-5.8,0.6L85.9,77.5c0,0,24.4,43.5,33.1,58.9 " +
					"c-1.5,3.5-2.3,7.4-2.3,11.5c0,4.2,0.9,8.2,2.4,11.8l-21.6,28.9l30.5-17.2c5.2,4.1,11.7,6.6,18.8,6.6c16.7,0,30.2-13.5,30.2-30.2 " +
					"C177,131.2,163.5,117.7,146.8,117.7z M146.8,173.7c-14.3,0-25.8-11.6-25.8-25.8s11.6-25.8,25.8-25.8s25.8,11.6,25.8,25.8 " +
					"S161.1,173.7,146.8,173.7z"
	    	});
	},
	drawTitle:function(){
		var that = this;
		this.titleGroup.append("text").datum(this.title)
		.attr({
			"x": function(d){
				return that.titleAlign == "start" ? 50 : that.titleAlign == "middle" ? that.width / 2 : that.width;
			},
			"y": function (d) {
				return 30;
			},
			"font-size": "22px",
			"font-weight": "bold",
			"fill": d3.rgb(255, 168, 1).toString(),
			"text-anchor": that.titleAlign,
			"dominant-baseline": "middle"
		}).text(function (d) {
			return d;
		});
	},
	drawXAxis: function(){
		var that = this;
		var rectWidth = (this.widthL - this.paddingL.right) / this.labels.length - 4;
		this.xAxisGroup.selectAll("g").data(this.labels).enter()
			.append("g")
			.attr({
				"transform": function(d, i){
					return "translate(" + (i * rectWidth + 4) + "," + 0 + ")"
				}
			})
			.each(function(d, i){
				var xAxis = d3.select(this);
				xAxis.append("rect")
				.attr({
					"class": "xAxisBg",
					"x": -8,
					"y": -5,
					"width": 51,
					"height": 16,
					"fill": function(){
						return that.cityIdx == i ? "#F1A81B" : "none";
					},
					"stroke-width": 0
				});
				xAxis.append("circle")
				.attr({
					"class":"xAxisFocusOuter",
					"cx": 0,
					"cy": 3,
					"r": 6,
					"fill": "rgba(0,0,0,0)",
					"stroke": function(){
						return that.cityIdx == i ? "rgb(255, 255, 255)" : "#F1A81B";
					},
					"stroke-width": 1
				});
				xAxis.append("circle")
				.attr({
					"class": "xAxisFocus",
					"cx": 0,
					"cy": 3,
					"r": 3,
					"fill": function(){
						return that.cityIdx == i ? "rgb(255, 255, 255)" : "none";
					},
					"stroke": "rgb(255, 255, 255)",
					"stroke-width": 0
				});
				xAxis.append("text")
				.attr({
					"x": 7,
					"y": 3,
					"font-family": "黑体",
					"font-size": "12px",
					"fill": "rgb(255, 255, 255)",
					"dominant-baseline": "middle"
				})
				.text(d);
				xAxis.append("rect")
				.attr({
					"x": -8,
					"y": -5,
					"width": 51,
					"height": 16,
					"fill": "rgba(0,0,0,0)",
					"stroke-width": 0
				})
				.on("click", function(){
					that.cityIdx = i;
					that.xAxisGroup.selectAll(".xAxisBg")
					.attr({
						"fill": function(t, n){
							return that.cityIdx == n ? "#F1A81B" : "none";
						}
					});
					that.xAxisGroup.selectAll(".xAxisFocusOuter")
					.attr({
						"stroke": function(t, n){
							return that.cityIdx == n ? "rgb(255, 255, 255)" : "#F1A81B";
						}
					});
					that.xAxisGroup.selectAll(".xAxisFocus")
					.attr({
						"fill": function(t, n){
							return that.cityIdx == n ? "rgb(255, 255, 255)" : "none";
						}
					});
					that.taketurns();
					that.repaint();
				});
			});
		
	},
	drawLegendL: function(){
		var that = this;
		var cityData = this.series[this.cityIdx], lineHeight = 22, legendDy = 40, legendTextDx = 4, legendTextDy = -1, legendRectWidth = 12;
		this.legendLGroup.selectAll("g").data(cityData.name).enter().append("g")
			.attr({
				"transform": function(d, i){
					return "translate(" + 0 + "," + (legendDy + i * lineHeight) + ")";
				}
			})
			.each(function(d, i){
				d3.select(this).append("text")
				.attr({
					"x": legendRectWidth + legendTextDx,
					"y": lineHeight / 2 + legendTextDy,
					"fill": d3.rgb(255, 255, 255).toString(),
					"font-family": "黑体",
					"font-size": "12px",
					"dominant-baseline": "middle"
				}).text(d);
				var rects = d3.select(this).append("rect")
				.attr({
					"class": "legendFocus",
					"x": 0,
					"y": (lineHeight - legendRectWidth) / 4,
					"rx": 2,
					"ry": 2,
					"width": legendRectWidth,
					"height": legendRectWidth,
					"fill": function(){
						return i == that.gradeIdx ? "#F3A61C" : "rgba(0, 0, 0, 0)";
					},
					"stroke": "#F3A61C"
				});
				d3.select(this).append("rect")
				.attr({
					"x": 0,
					"y": (lineHeight - legendRectWidth) / 4,
					"width": 55,
					"height": 14,
					"fill": "rgba(0, 0, 0, 0)"
				})
				.on("click", function(){
					that.gradeIdx = i;
					that.legendLGroup.selectAll(".legendFocus")
					.attr({
						"fill": function(d, i){
							return i == that.gradeIdx ? "#F3A61C" : "rgba(0, 0, 0, 0)";
						}
					});
					that.taketurns();
					that.repaint("legendL");
				});
			});
		this.drawLegendR(cityData, lineHeight, legendTextDx, legendRectWidth);
	},
	drawLegendR: function(cityData, lineHeight, legendTextDx, legendRectWidth){
		var that = this;
		this.legendRGroup.selectAll("g").data(cityData.data[this.gradeIdx].name).enter().append("g")
			.attr({
				"transform": function(d, i){
					return "translate(" + (that.widthL - that.paddingL.left + that.paddingR.left) + "," + (i * lineHeight) + ")";
				}
			})
			.each(function(d, i){
				d3.select(this).append("text")
				.attr({
					"x": legendRectWidth + legendTextDx,
					"y": lineHeight / 2,
					"fill": d3.rgb(255, 255, 255).toString(),
					"font-family": "黑体",
					"font-size": "14px",
					"dominant-baseline": "middle"
				}).text(d);
				d3.select(this).append("rect")
				.attr({
					"x": 0,
					"y": (lineHeight - legendRectWidth) / 4,
					"width": legendRectWidth,
					"height": legendRectWidth,
					"fill": "#2BB2E9",
					"fill-opacity": 1 - i * 0.15,
					"stroke-width": 0
				});
			});
	},
	drawPieData: function(){
		var that = this;
		var cityDataset = this.series[this.cityIdx], yearData = cityDataset.data[this.gradeIdx], gradeY = yearData.y, gradex = yearData.x, gradeDataset = [];
		$.each(gradex, function(i, d){
			var gradeData = gradeY.map(function(t, n){
				return t[i];
			});
			gradeDataset.push(d3.mean(gradeData) * gradeData.length);
		});
		// 比例尺
		this.rScale = d3.scale.linear().domain([0, d3.max(gradeDataset)]).range([40, this.pieRadius]);
		var opacityScale = d3.scale.linear().domain([0, d3.max(gradeDataset)]).range([0.5, 1]);
		// 饼图数据
	    var pieData = d3.layout.pie().startAngle(-Math.PI / 2).endAngle(Math.PI / 2)(gradeDataset);
	    // 中心圆
		// 绘制弧形
	    this.pieDataGroup
	    	.selectAll("path").data(pieData).enter()
	    	.append("path").attr({
        		"fill": function (d, i) {
        			return "#F3A61C";
        		},
        		"fill-opacity":function(d, i){
        			return opacityScale(d.data);
        		}
	    	})
	    	.transition().duration(that.durationTime)
	    	.attrTween("d", function(finish){
	    		var start = {
	    			startAngle: -Math.PI / 2,
	    			endAngle: -Math.PI / 2
	    		};
        		var arc = d3.svg.arc().innerRadius(0).outerRadius(that.rScale(finish.data));
        		var inter = d3.interpolate(start, finish);
        		return function (t) {
        			return arc(inter(t));
        		}
	    	});
	    this.pieDataGroup.append("circle")
    	.attr({
    		"cx": 0,
    		"cy": 0,
    		"r": 30,
    		"fill": "#05A8F7",
    		"stroke-width": 0
    	});
	    this.pieDataGroup.append("use")
	    .attr({
	    	"x": - 14.17,
	    	"y": - 14.17,
	    	"xlink:href": "#pieBarRoundDefs",
	    	"transform": "rotate(-180)"
	    })
    	.transition().duration(that.durationTime).ease("bounce")
	    .attr({
	    	"transform": "rotate(0)"
	    });
	    that.drawTextLine(pieData, gradex, gradeDataset);
	},
    drawTextLine: function(pieData, gradex, gradeDataset){
    	var that = this, translationX = 20, startPoint = 1.8;

        var textLineScale = d3.scale.linear().domain([0, d3.max(gradeDataset)]).range([this.textLineMaxTimes, this.textLineMinTimes]);
    	this.textLineGroup.selectAll("g").data(pieData).enter().append("g")
    		.each(function(d, i){
    			var centroid = d3.svg.arc().innerRadius(0).outerRadius(that.rScale(d.data)).centroid(d);
    			// 圆
    			d3.select(this).append("circle")
        		.attr({
    	    		"cx": function(){
    	    			return centroid[0] * startPoint;
    	    		},
    	    		"cy": function(){
    	    			return centroid[1] * startPoint;
    	    		},
    	    		"r": "2",
    	            "fill-opacity": 0,
    	    		"fill": d3.rgb(255, 255, 255).toString()
        		})
        		.transition().duration(0).delay(that.durationTime)
        		.attr({
    	            "fill-opacity": 1
        		});
    			// 线
    			d3.select(this).append("polyline")
            	.attr({
            		"points": function(d, i){
            			return centroid.map(function(d){return d * startPoint;}).join(",")
            			+ " " +
        				centroid.map(function(d){return d * startPoint;}).join(",")
        				+ " " +
        				centroid.map(function(d){return d * startPoint;}).join(",");
            		},
                	"stroke": d3.rgb(255, 255, 255).toString(),
                    "fill-opacity": "0",
                    "stroke-opacity": 1
            	})
            	.transition().duration(that.durationTime * 2 / 3).delay(that.durationTime)
            	.attr({
            		"points": function(){
            			return centroid.map(function(d){return d * startPoint;}).join(",")
        				+ " " +
        				centroid.map(function(t){
        					return t * that.textLineBaseTimes * textLineScale(d.data);
        				}).join(",")
        				+ " " +
        				centroid.map(function(t){
        					return t * that.textLineBaseTimes * textLineScale(d.data);
        				}).join(",");
            		}
            	})
            	.transition().duration(that.durationTime / 3)
            	.attr({
            		"points": function(){
            			return centroid.map(function(d){return d * startPoint;}).join(",")
        				+ " " +
        				centroid.map(function(t){
        					return t * that.textLineBaseTimes * textLineScale(d.data);
        				}).join(",")
        				+ " " +
        				centroid.map(function(t, i){
        					return i == 0 ? t * that.textLineBaseTimes * textLineScale(d.data) + (t > 0 ? translationX : -translationX)
        							: t * that.textLineBaseTimes * textLineScale(d.data);
        				}).join(",");
            		},
            	});
    		});
        // 字
         that.drawText(pieData, gradex, gradeDataset, textLineScale, translationX);
    },
    drawText: function(pieData, gradex, gradeDataset, textLineScale, translationX){
    	var that = this;
    	// 比例尺
    	var textNumScale = d3.scale.linear().domain([0, d3.max(gradeDataset)]).range([12, 20]);
    	var textScale = d3.scale.linear().domain([0, d3.max(gradeDataset)]).range([12, 28]);

    	this.textGroup.selectAll("g").data(pieData).enter()
    		.append("g")
    		.each(function(d, i){
    			var centroid = d3.svg.arc().innerRadius(0).outerRadius(that.rScale(d.data)).centroid(d);
    	    	var textPointX = centroid[0] * that.textLineBaseTimes * textLineScale(d.data) + (centroid[0] > 0 ? translationX : -translationX),
        			textPointY = centroid[1] * that.textLineBaseTimes * textLineScale(d.data);
    			d3.select(this)
        		.attr({
        			"transform": "translate(" + textPointX + "," + textPointY + ")"
        		});
    			// 左侧百分比
    			d3.select(this).append("text")
        		.attr({
        			"x": 0,
        			"y": 0,
    				"fill": d3.rgb(255, 255, 255).toString(),
    				"font-weight": "bold",
    				"font-family": "黑体",
    				"font-size": textNumScale(d.data),
    				"text-anchor": centroid[0] > 0 ? "start" : "end",
    	            "fill-opacity": 0
        		})
    			.text(function(){
    				return d3.round((d.data / (d3.mean(gradeDataset) * gradeDataset.length)) * 100, 2) + "%";
    			})
            	.transition().duration(that.durationTime / 2).delay(that.durationTime * 2)
            	.attr({
    	            "fill-opacity": 1
            	});
    			// 左侧类别
    			d3.select(this).append("text")
        		.attr({
        			"x": 0,
        			"y": textNumScale(d.data) + 5,
    				"fill": d3.rgb(255, 255, 255).toString(),
    				"font-weight": "bold",
    				"font-family": "黑体",
    				"font-size": textScale(d.data),
    				"text-anchor": centroid[0] > 0 ? "start" : "end",
    	    	    "fill-opacity": 0
        		})
    			.text(function(){
    				return gradex[i];
    			})
            	.transition().duration(that.durationTime / 2).delay(that.durationTime * 2)
            	.attr({
    	            "fill-opacity": 1
            	});
    		});
    	// 居中文字
    	this.textCenterGroup.selectAll(".centerText").data(pieData).enter()
    		.append("g")
    		.attr({
    			"class": "centerText"
    		})
    		.each(function(d, i){
    			d3.select(this).append("text")
        		.attr({
        			"x": that.widthL,
        			"y": that.paddingR.top + 49 * i - i,
    				"fill": d3.rgb(255, 255, 255).toString(),
    				"font-family": "黑体",
    				"font-size": "14px",
    				"text-anchor": "end",
    	    	    "fill-opacity": 0
        		})
    			.text(function(){
    				return d3.round((d.data / (d3.mean(gradeDataset) * gradeDataset.length)) * 100, 2) + "%";
    			})
            	.transition().duration(that.durationTime / 2).delay(that.durationTime * 2)
            	.attr({
    	            "fill-opacity": 1
            	});
    		});
    	// 中心文字线条
    	var centerLinLength = 30;
    	this.textCenterLineGroup.selectAll(".centerLine").data(pieData).enter()
			.append("g")
			.attr({
				"class": "centerLine"
			})
			.each(function(d, i){
				d3.select(this).append("line")
	    		.attr({
	    			"x1": that.widthL + centerLinLength,
	    			"y1": that.paddingR.top + 49 * i - i - 5,
	    			"x2": that.widthL + centerLinLength,
	    			"y2": that.paddingR.top + 49 * i - i - 5,
	            	"stroke": "#F3A61C",
	                "stroke-opacity": 1
	    		})
	        	.transition().duration(that.durationTime).delay(that.durationTime)
	        	.attr({
	    			"x2": that.widthL + 5
	        	});
			});
    },
    drawBarData: function(){
		var that = this;
		var cityData = this.series[this.cityIdx];
		var gradeX = d3.set(d3.merge(cityData.data.map(function(d){return d.x;}))).values();
		this.drawYAxis(gradeX);
		
		var gradeY = cityData.data[this.gradeIdx].y;
    	this.xScaleR = d3.scale.linear().domain([0, d3.max(d3.merge(gradeY))]).range([0, this.widthR - this.paddingR.left - this.paddingR.right]);
    	
    	
    	var rectHeight = this.yScale.rangeBand() / gradeX.length - 7;
    	this.barDataGroup.selectAll("g").data(gradeX).enter()
    		.append("g")
    		.attr({
    			"transform": function(d, i){
    				return "translate(" + 0 + "," + that.yScale(i) + ")";
    			}
    		})
    		.each(function(d, i){
    			var levelData = gradeY.map(function(t){
    				return t[i];
    			}), rectGroup = d3.select(this);
    			rectGroup.selectAll("rect").data(levelData).enter()
    				.append("rect")
    				.attr({
    					"x": 0,
    					"y": function(t, n){
    						return n * (rectHeight + 3);
    					},
    					"width": function(t, n){
    						return 0;
    					},
    					"height": rectHeight,
    					"fill": "#2BB2E9",
    					"fill-opacity": function(t, n){
    						return 1 - n * 0.15;
    					},
    					"stroke-width": 0
    				})
    				.transition().duration(that.durationTime * 2).ease("circle-out")
    				.attr({
    					"width": function(t, n){
    						return that.xScaleR(t);
    					}
    				})
    				.each("end", function(t, n){
    					that.drawRectText(rectGroup, t, n, rectHeight);
    				});
    		});
    },
    drawRectText: function(rectGroup, levelData, levelIdx, rectHeight){
    	var that = this;
    	rectGroup.append("text")
			.attr({
				"x": that.xScaleR(levelData) + 5,
				"y": function(){
					return levelIdx * (rectHeight + 3) + rectHeight / 2;
				},
				"fill": "#F3A61C",
				"dominant-baseline": "middle",
	    		"fill-opacity": 0
			})
	    	.text(levelData)
	    	.transition().duration(that.durationTime / 2)
	    	.attr({
	    		"fill-opacity": 1
	    	});
    },
    drawYAxis: function(gradeX){
    	var that = this;
		this.yScale = d3.scale.ordinal().domain(d3.range(gradeX.length))
			.rangeBands([0, this.height - this.paddingR.top - this.paddingR.bottom - this.paddingR.center], -0.5);
		this.yAxis = this.yAxisGroup.call(d3.svg.axis().scale(this.yScale).orient("left"));
		this.yAxis.selectAll("text").data(gradeX)
			.attr({
				"fill": d3.rgb(255, 255, 255).toString(),
				"font-size": "14px",
				"font-family": "黑体",
				"dy": - that.yScale.rangeBand() / 6
			})
			.text(function(d, i){
				return d;
			});
		this.yAxis.select("path")
			.attr({
				"fill":"none"
			});
    },
    drawAxisFoucs: function(){
    	var that = this;
		that.xAxisGroup.selectAll(".xAxisBg")
		.attr({
			"fill": function(t, n){
				return that.cityIdx == n ? "#F1A81B" : "none";
			}
		});
		that.xAxisGroup.selectAll(".xAxisFocusOuter")
		.attr({
			"stroke": function(t, n){
				return that.cityIdx == n ? "rgb(255, 255, 255)" : "#F1A81B";
			}
		});
		that.xAxisGroup.selectAll(".xAxisFocus")
		.attr({
			"fill": function(t, n){
				return that.cityIdx == n ? "rgb(255, 255, 255)" : "none";
			}
		});
    },
    repaint: function(eventObj){
    	this.drawAxisFoucs();
    	// 清空重绘节点
    	if(eventObj != "legendL"){
    		this.legendLGroup.selectAll("*").remove();
    	}
		this.legendRGroup.selectAll("*").remove();
	    this.pieDataGroup.selectAll("*").remove();
	    this.textLineGroup.selectAll("*").remove();
	    this.textGroup.selectAll("*").remove();
	    this.textCenterGroup.selectAll("*").remove();
	    this.textCenterLineGroup.selectAll("*").remove();
	    this.yAxisGroup.selectAll("*").remove();
	    this.barDataGroup.selectAll("*").remove();
	    this.drawLegendL();
	    this.drawPieData();
	    this.drawBarData();
    },
    intervalfunc: function(){
    	this.cityIdx = ++ this.cityIdx == this.labels.length ? 0 : this.cityIdx;
		this.repaint();
    }
});

/**
 * 教育入学/毕业人数对比分析
 * 
 * @class zhnx.chart.compoundAreaLineChart
 */
zhnx.chart.compoundAreaLineChart = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.compoundAreaLineChart.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.compoundAreaLineChart,
	_defaults : {},
	args: undefined,
	padding:{left: 70, right: 130, top: 50, bottom: 40},
	title: "",
	titleAlign: "middle", // start、 middle、 end
	labels: undefined,
	series: undefined,
	durationTime: 1000,
	color : ["#3B3A35", "#88661F", "#D08F0D", "#FDAB01", "#E67809"],
	init : function(args){
		// 基本初始化
		this.baseInit(this.args.selector);
		
		var that = this;
	    this.labels = this.args.labels, this.series = this.args.series;
	    // 数据
	    this.labels = this.args.labels, this.series = this.args.series;
	    // 标题相关
	    this.title = this.args.title != undefined ? this.args.title : this.title;
	    this.titleAlign = this.args.titleAlign != undefined ? this.args.titleAlign : this.titleAlign;
	    
	    this.drawInit();
	    this.drawTitle();
	    this.drawXAxis();
	    this.drawYAxis();
	    this.drawAreaData();
	    this.drawLineData();
	    this.drawLegend();
	    this.taketurns();
	},
	drawInit: function(){
		var that = this;
	    // 初始化节点
	    this.titleGroup = this.svg.append("g");
	    this.xAxisGroup = this.svg.append("g");
	    this.yAxisGroup = this.svg.append("g");
	    this.areaDataGroup = this.svg.append("g");
	    this.lineDataGroup = this.svg.append("g");
	    this.legendGroup = this.svg.append("g");
	    
	    // x轴比例尺
	    this.labels = this.labels.reverse().concat([" "]).reverse();
	    this.xScale = d3.scale.ordinal().domain(d3.range(this.labels.length)).rangePoints([0, this.width - this.padding.left - this.padding.right], 0);
	    // y轴比例尺
	    var allValue = this.series.map(function(d){
	    	return d3.merge(d.data)
	    });
	    this.yScale = d3.scale.linear().domain([0, d3.max(d3.merge(allValue)) * 1.2]).range([this.height - this.padding.bottom - this.padding.top, 0]);
	    // line data
	    this.lineData = $.map(this.series, function(d){
	    	return d.type == "line" ? d.data : null;
	    });
	    this.lineName = $.map(this.series, function(d){
	    	return d.type == "line" ? d.name : null;
	    });
	    this.lineDataName = $.map(this.series, function(d){
	    	return d.type == "line" ? d.dataName : null;
	    })[0];
	    // area data
	    this.areaData = $.map(this.series, function(d){
	    	return d.type == "area" ? d.data : null;
	    });
	    this.areaName = $.map(this.series, function(d){
	    	return d.type == "area" ? d.name : null;
	    });
	    this.areaDataName = $.map(this.series, function(d){
	    	return d.type == "area" ? d.dataName : null;
	    })[0];
	    // 面积图透颜色比例尺
	    this.colorScale = d3.scale.ordinal().domain(d3.range(this.areaData.length)).range(this.color);
	    // 透明度比例尺
	    this.opacityScale = d3.scale.linear().domain([0, this.lineData.length]).range([0.4, 0.9]);
	},
	drawTitle:function(){
		var that = this;
		this.titleGroup.append("text").datum(this.title)
		.attr({
			"x": function(d){
				return that.titleAlign == "start" ? 0 : that.titleAlign == "middle" ? that.width / 2 : that.width;
			},
			"y": function (d) {
				return 30;
			},
			"font-size": "22px",
			"font-weight": "bold",
			"fill": d3.rgb(255, 168, 1).toString(),
			"text-anchor": that.titleAlign,
			"dominant-baseline": "middle"
		}).text(function (d) {
			return d;
		});
	},
	drawXAxis: function(){
		var that = this;
		var xAxis = this.xAxisGroup
			.attr({
				"transform":"translate(" + that.padding.left + "," + (that.height - that.padding.bottom) + ")"
			})
			.call(d3.svg.axis().scale(this.xScale).tickPadding(12).tickSize(0, 0).orient("bottom"));
		xAxis.selectAll("text").data(this.labels)
			.attr({
				"font-size": "14px",
				"fill": d3.rgb(255, 255, 255).toString()
			})
			.text(function(d){
				return d;
			});
		xAxis.select("path")
			.attr({
				"stroke-width": 1,
				"stroke": d3.rgb(255, 255, 255).toString(),
				"fill":"none"
			});
	},
	drawYAxis: function(){
		var that = this;
		var yAxis = this.yAxisGroup
			.attr({
				"transform":"translate(" + that.padding.left + "," + that.padding.top + ")"
			})
			.call(d3.svg.axis().scale(this.yScale).tickPadding(12).tickSize(0, 10).orient("left"));
		yAxis.selectAll("text")
			.attr({
				"font-size": "14px",
				"fill": d3.rgb(255, 255, 255).toString()
			});
		yAxis.select("path")
			.attr({
				"stroke-width": 1,
				"stroke": d3.rgb(255, 255, 255).toString(),
				"fill":"none"
			});
	},
	drawAreaData: function(){
		var that = this;
		var area = d3.svg.area()
			.x(function(d, i){
				return that.xScale(i);
			})
			.y(function(d, i){
				return that.yScale(d);
			})
			.y1(d3.max(this.yScale.range()));
		// 绘制数据
		this.areaDataGroup
			.attr({
				"transform":"translate(" + that.padding.left + "," + that.padding.top + ")"
			})
			.selectAll("g")
			.data(this.areaData).enter()
			.append("g")
			.each(function(t, n){
				t = t.slice(0, 1).concat(t);
				var path = d3.select(this).append("path")
				.attr({
					"d": function(){
						return area(t.map(function(d){
							return 0;
						}));
					},
					"stroke": d3.rgb(255, 255, 255).toString(),
					"stroke-width": 0,
					"fill": that.colorScale(n),
					"fill-opacity": that.opacityScale(n)
				})
				.on("mouseover",function(d,i){
		            d3.select(this)
	                	.attr("fill",d3.rgb(that.colorScale(n)).brighter(1.5));
		        })
		        .on("mouseout",function(d,i){
		            d3.select(this)
		                .transition()
		                .duration(500)
		                .attr({
		                	"fill": that.colorScale(n)
		                });
		        })
				.transition().duration(that.durationTime * 2).delay(n * 100)
				.attr({
					"d": area(t)
				});
			});
	},
	drawLineData: function(){
		var that = this;
		var line = d3.svg.line()
			.x(function(d, i){
				return that.xScale(i);
			})
			.y(function(d){
				return that.yScale(d);
			});
		// 绘制数据
		this.lineDataGroup
			.attr({
				"transform":"translate(" + that.padding.left + "," + that.padding.top + ")"
			})
			.selectAll("g")
			.data(this.lineData).enter()
			.append("g")
			.each(function(t, n){
				t = t.slice(0, 1).concat(t);
				var path = d3.select(this).append("path")
				.attr({
					"d": line(t),
					"stroke-width": 3,
					"stroke": "#00A9F7",
					"fill": "none",
					"stroke-opacity": that.opacityScale(n)
				});
				var totalLength = path.node().getTotalLength();
				path.attr({
					"stroke-dashoffset": totalLength,
					"stroke-dasharray": totalLength
				})
				.transition().duration(that.durationTime).delay(n * 100)
				.attr({
					"stroke-dashoffset": 0
				});
				// 数据点圆
				d3.select(this).selectAll("circle").data(t).enter()
				.append("circle")
				.attr({
					"cx": function(d, i){
						return that.xScale(i);
					},
					"cy": function(d, i){
						return that.yScale(d);
					},
					"r": 0,
					"fill": function(d, i){
						return i == 0 ? "none" : d3.rgb(255, 255, 255).toString();
					}
				})
		        .on("mouseover", function(d, i){
		        	zhnx.getTooltip().style({
		        		"opacity": "0.9",
		        		"width": "130px",
		        		"height": "50px",
		        		"line-height": "23px",
		        		"z-index": "99999",
		        		"left": (d3.event.pageX - 75) + "px",
		        		"top": (d3.event.pageY - 67) + "px"
		        	})
		        	.html(that.lineName[n] + "<br>" + that.labels[i] + ":" + d);
		        })
		        .on("mouseout", function(){
		        	zhnx.getTooltip().style({
		        		"opacity": 0,
		        		"z-index": "-1"
		        	});
		        })
				.transition().duration(that.durationTime / 2).delay(that.durationTime * 2)
				.attr({
					"r": 3
				});
			});
	},
	drawLegend: function(){
		var that = this, lineHeight = 20, legendDx = 50, legendDy = 20;
		var allLegend = this.series.map(function(d){
			return d.name;
		});
		allLegend = d3.set(d3.merge(allLegend)).values();
		
		this.legendGroup
			.attr({
				"transform": "translate(" + (that.width - that.padding.right + legendDx) + "," + (that.padding.top) + ")"
			})
			.selectAll("g").data(allLegend).enter()
			.append("g")
			.attr({
				"transform": function(d, i){
					return "translate(" + 0 + "," + (i * lineHeight + legendDy) + ")";
				}
			})
			.each(function(d, i){
				d3.select(this)
				.append("text")
				.attr({
					"dy": lineHeight / 2,
					"font-size": "14px",
					"fill": d3.rgb(255, 255, 255).toString(),
					"text-anchor": "end",
					"dominant-baseline": "middle"
				})
				.text(d);
				// area legend----------------------------
				d3.select(this)
				.append("rect")
				.attr({
					"x": lineHeight,
					"y": (lineHeight - 10) / 2 - 3,
					"width": 15,
					"height": 15,
					"fill": that.colorScale(i),
					"fill-opacity": that.opacityScale(i)
				})
				.on("click", function(){
					var area = d3.select(this);
					if(area.attr("fill") == "#666"){
						area.attr({
							"fill": that.colorScale(i)
						});
						that.areaDataGroup.selectAll("path")
						.each(function(t, n){
							if(n == i){
								d3.select(this)
								.transition().duration(200)
								.attr({
									"fill-opacity": that.opacityScale(i)
								});
							}
						});
					} else {
						area.attr({
							"fill": "#666"
						});
						that.areaDataGroup.selectAll("path")
						.each(function(t, n){
							if(n == i){
								d3.select(this)
								.transition().duration(200)
								.attr({
									"fill-opacity": 0
								});
							}
						});
					}
					that.taketurns();
				});
				// line legend
				d3.select(this)
				.append("rect")
				.attr({
					"x": lineHeight + lineHeight + 15,
					"y": (lineHeight - 6) / 2 - 1,
					"width": 20,
					"height": 6,
					"fill": "#05A7F6",
					"fill-opacity": that.opacityScale(i)
				})
				.on("click", function(){
					var line = d3.select(this);
					if(line.attr("fill") == "#05A7F6"){
						line.attr({
							"fill": "#666"
						});
						that.lineDataGroup.selectAll("g")
						.each(function(t, n){
							if(n == i){
								d3.select(this).select("path")
								.transition().duration(200)
								.attr({
									"stroke-opacity": 0
								});
								d3.select(this).selectAll("circle")
								.transition().duration(200)
								.attr({
									"fill-opacity": 0
								});
							}
						});
					} else {
						line.attr({
							"fill": "#05A7F6"
						});
						that.lineDataGroup.selectAll("g")
						.each(function(t, n){
							if(n == i){
								d3.select(this).select("path")
								.transition().duration(200)
								.attr({
									"stroke-opacity": that.opacityScale(i)
								});
								d3.select(this).selectAll("circle")
								.transition().duration(200)
								.attr({
									"fill-opacity": 1
								});
							}
						});
					}
					that.taketurns();
				});
			});
		this.legendGroup.append("text")
			.attr({
				"x": lineHeight - 3,
				"font-size": "14px",
				"fill": d3.rgb(255, 255, 255).toString(),
				"dominant-baseline": "middle"
			})
			.text(this.areaDataName + "/" + this.lineDataName);
	},
	repaint: function(){
		this.lineDataGroup.selectAll("*").remove();
		this.areaDataGroup.selectAll("*").remove();
		this.drawLineData();
		this.drawAreaData();
	}
});
// 扶贫诊断框
zhnx.chart.fpZhenduan = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.fpZhenduan.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.fpZhenduan,
	_defaults : {},
	svgGroup: undefined,
	htmGroup: undefined,
	init: function(args){
		this.baseInit(args.selector);
		this.drawInit();
		this.drawSvgBg("贫困诊断");
		this.drawHtml();
		
	},
	drawInit: function(){
		this.svgGroup = this.svg.append("g");
		this.htmGroup = $("<div/>").css({
			"position": "absolute",
			"width": this.width,
			"height": this.height - 25,
			"left": 0,
			"top": 25
		});
		this.selector.append(this.htmGroup);
	},
	drawSvgBg: function(text){
		var that = this;
		zhnx.utils.loadSvg("svg/rect/pinkunhuzhenduan.svg", function(importedNode){
			var plane = that.svgGroup.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 537,
				"height": 763.5
			}).append("text").attr({
				"transform": "translate(267.8,35.55)",
				"font-size": "30px",
				"fill": "#FFF",
	            "text-anchor": "middle",
	            "dominant-baseline": "middle",
	            "font-family": "Microsoft Yahei"
			}).text(text);
			
			zhnx.utils.loadSvg("svg/rect/pinkunhuzhenduanshiji.svg", function(importedChildNode){
				for(var i = 0; i < 4; i++){
					var rectplane = that.svgGroup.node().appendChild(importedChildNode.cloneNode(true));
					d3.select(rectplane).attr({
						"x":function(){
							return 70;
						},
						"y": function(){
							return 80 + (i * 55);
						},
						"width": 403,
						"height": 65
					});
				}
			});
		});
	},
	drawHtml: function(){
		var that = this;
		for(var i = 0; i < 4; i++){
			this.htmGroup.append($("<select/>").addClass('fpZhenduanSelect').attr({
				"id": "areaSelect_" + i
			}).css({
				"position": "absolute",
				"top": 70 + (i * 55) + "px",
				"left": "100px"
			}).append("<option value='0'>--请选择--</option>"));
		}
		this.htmGroup.append($("<div/>").attr({
			"id": "areaList"
		}).css({
			"left": "78px",
			"top": "296px",
		}));
		this.changeSelect(0, 4, "640000000000");
	},
	changeSelect: function(selectId, maxId, areaCode){
		var that = this;
		$.ajax({
			type: "post",
			url: that.args.url,
			data: {areaCode:areaCode},
			success: function(data){
				var options = "<option value='0'>--请选择--</option>", areaList = "";
				for(var i = 0; i < data.length; i++){
					options += "<option value='" + data[i].areaid + "'>" + data[i].areaname + "</option>";
					areaList += "<div value='" + data[i].areaid + "'>" + data[i].areaname + "</div>";
				}
				// 清空区域列表
				$("#areaList").empty();
				// 如果是乡则显示村列表
				if(areaCode != 0 && selectId == 3){
					$("#areaList").append(areaList);
					$("#areaList").find("div").on('click', function(){
						var value = $(this).attr("value");
						that.clickAreaList(value);
						that.commandClickAreaList({
	            			type: 'click',
	            			context: that.id,
	            			contextType: 'chaObj',
	            			execString: "that.clickAreaList('" + value + "')",
	            			execMode: "evalfunc"
						});
					});
					that.clickCountry();
				}
				// 如果是村则显示户列表
				if(areaCode != 0 && selectId == 4){
					that.clickFamily();
				}
				// 清空后几级的数据
				for(var i = selectId + 1; i < maxId; i++){
					$("#areaSelect_" + i).empty().append("<option value='0'>--请选择--</option>");
				}
				var nextId = selectId + 1;
				$("#areaSelect_" + selectId).empty().append(options).on('change', function(){
					var value = $(this).children('option:selected').val();
					that.changeSelect(nextId, maxId, value);
					var execString = "that.changeSelect(" + nextId + "," + maxId + ",'" + value + "');"
						+ "$('#areaSelect_" + selectId + "').val('" + value + "');";
					that.commandChange({
            			type: 'change',
            			context: that.id,
            			contextType: 'chaObj',
            			execString: execString,
            			execMode: "evalfunc"
					});
				});
			}
		});
	},
	commandChange: function(commandArgs){
		
	},
	clickCountry: function(){
		
	},
	clickFamily: function(){
		
	},
	clickAreaList: function(code){
		
	},
	commandClickAreaList: function(commandArgs){
		
	}
});
zhnx.chart.svgTable = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.svgTable.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.svgTable,
	_defaults : {},
	svgGroup: undefined,
	htmGroup: undefined,
	
	liIndex: undefined,
    sum: [],
	init: function(args){
		this.baseInit(args.selector);
		this.drawInit();
		this.drawSvgBg(args.bgName);
		this.drawTableInitCountry();
// this.drawTableInitFamily();
		
	},
	drawInit: function(){
		this.svgGroup = this.svg.append("g");
		this.htmGroup = $("<div/>").css({
			"position": "absolute",
			"width": this.width - 240,
			"height": this.height - 65,
			"left": 0,
			"top": 25
		}).addClass("fpZhenduanTable");
		this.selector.append(this.htmGroup);
	},
	drawSvgBg: function(bgName){
		var that = this;
		zhnx.utils.loadSvg("svg/rect/" + bgName +".svg", function(importedNode){
			var plane = that.svgGroup.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": that.width,
				"height": that.height - 25
			});
		});
	},
	drawTableInitCountry: function(){
		this.htmGroup.empty().append("<h4><span>基本得分</span></h4>");
		this.htmGroup.append("<div class='scrollbar'><table>" +
		"<tr><td></td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>总体得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>村贫困户得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>村收入项得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>村五通得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;通水得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;通信息得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;通广播电视得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;通村客车得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>村八有得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;有增收的支柱产业得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;有经济合作组织得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;有综合服务网点得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;有文化体育活动场所得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;有标准卫生室得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;有团结干事的两委班子得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;有集体经济收入得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>&nbsp;&nbsp;&nbsp;有驻村工作队得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>村土地得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>村缴纳社保情况得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>村危房情况得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>负债得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"</table></div>");
		this.isCountry = true;
		this.isFamily = false;
	},
	drawTableInitFamily: function(){
		this.htmGroup.empty().append("<h4><span>基本得分</span></h4>");
		this.htmGroup.append("<div class='scrollbar'><table>" +
		"<tr><td></td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>总体得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>住房情况得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>土地情况得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>家庭成员学生得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>家庭成员健康状况得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>家庭成员劳动力得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>家庭成员务工状况得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>家庭收支状况得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>信用得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>能力提升状况得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>种植情况得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>农机具得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>养殖得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>加分项主要致贫原因得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>加分项家庭成员得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>加分项饮水是否困难得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>加分项是否通广播电视得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"<tr><td>减分项是否个体经营得分</td><td></td><td></td><td></td><td></td><td></td></tr>" +
		"</table></div>");
		this.isFamily = true;
		this.isCountry = false;
	},
	drawEffectBasicSituation: function(){	// 扶贫措施-基本情况（是否参加大病医疗(暂无，先为空)）
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[3].className=="menuActive"){
			
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getbasesituationbyid.do"),
				data: {huid:value},
				success: function(data){	
					var BasicValue = data.series;
					var tableTr = "";
					var returnlist = data.series.returnlist;
					for(var j=0;j<returnlist.length;j++){
						var dataName = returnlist[j].xm;		// 姓名
						var dataXb = returnlist[j].xb;			// 性别
						var dataSfz = returnlist[j].sfz;		// 身份证
						var dataYhzgx = returnlist[j].yhzgx;		// 与户主关系
						var dataMz= returnlist[j].mz;		// 民族
						var dataWhcd = returnlist[j].whcd;		// 文化程度
						var dataZxsqk = returnlist[j].zxsqk;		// 在校生情况
						var dataJkzk = returnlist[j].jkzk;		// 健康状况
						var dataLdnl = returnlist[j].ldnl;		// 劳动能力
						var dataWgzk = returnlist[j].wgzk;		// 务工状况
						var dataWgsj = returnlist[j].wgsj;		// 务工时间
						var dataSfxyjr = returnlist[j].sfxyjr;		// 是否现役军人
						var dataDbyl = "";							// 是否参加大病医疗(暂无，先为空)
						var dataSfxnh = returnlist[j].sfxnh;		// 新农村医疗是否参加
						var dataSfylbx = returnlist[j].sfylbx;		// 养老保险是否参加
						var dataSfncdb = returnlist[j].sfncdb;		// 是否农村低保
						var dataSfwbgy = returnlist[j].sfwbgy;		// 是否享受五保供养
						
						if(returnlist[j].xm==null||returnlist[j].xm==undefined){ dataName = ""; }
						if(returnlist[j].xb==null||returnlist[j].xb==undefined){ dataXb = ""; }
						if(returnlist[j].sfz==null||returnlist[j].sfz==undefined){ dataSfz = ""; }
						if(returnlist[j].yhzgx==null||returnlist[j].yhzgx==undefined){ dataYhzgx = ""; }
						if(returnlist[j].mz==null||returnlist[j].mz==undefined){ dataMz = ""; }
						if(returnlist[j].whcd==null||returnlist[j].whcd==undefined){ dataWhcd = ""; }
						if(returnlist[j].zxsqk==null||returnlist[j].zxsqk==undefined){ dataZxsqk = ""; }
						if(returnlist[j].jkzk==null||returnlist[j].jkzk==undefined){ dataJkzk = ""; }
						if(returnlist[j].ldnl==null||returnlist[j].ldnl==undefined){ dataLdnl = ""; }
						if(returnlist[j].wgzk==null||returnlist[j].wgzk==undefined){ dataWgzk = ""; }
						if(returnlist[j].wgsj==null||returnlist[j].wgsj==undefined){ dataWgsj = ""; }
						if(returnlist[j].sfxyjr==null||returnlist[j].sfxyjr==undefined){ dataSfxyjr = ""; }
						if(returnlist[j].sfxnh==null||returnlist[j].sfxnh==undefined){ dataSfxnh = ""; }
						if(returnlist[j].sfylbx==null||returnlist[j].sfylbx==undefined){ dataSfylbx = ""; }
						if(returnlist[j].sfncdb==null||returnlist[j].sfncdb==undefined){ dataSfncdb = ""; }
						if(returnlist[j].sfwbgy==null||returnlist[j].sfwbgy==undefined){ dataSfwbgy = ""; }
						tableTr += '<tr><td>'+(j+1)+'</td><td>'+dataName+'</td><td>'+dataXb+'</td><td>'+dataSfz+'</td><td>'+dataYhzgx+'</td><td>'+dataMz+'</td>'+
						'<td>'+dataWhcd+'</td><td>'+dataZxsqk+'</td><td>'+dataJkzk+'</td><td>'+dataLdnl+'</td><td>'+dataWgzk+'</td><td>'+dataWgsj+'</td><td>'+dataSfxyjr+'</td>'+
						'<td></td>'+dataDbyl+'<td>'+dataSfxnh+'</td><td>'+dataSfylbx+'</td><td>'+dataSfncdb+'</td><td>'+dataSfwbgy+'</td></tr>' 
					}
					if(BasicValue.jtzz==null||BasicValue.jtzz==undefined){ BasicValue.jtzz = ""; }
					if(BasicValue.hzxm==null||BasicValue.hzxm==undefined){ BasicValue.hzxm = ""; }
					if(BasicValue.sbbz==null||BasicValue.sbbz==undefined){ BasicValue.sbbz = ""; }
					if(BasicValue.sfdsznh==null||BasicValue.sfdsznh==undefined){ BasicValue.sfdsznh = ""; }
					if(BasicValue.ymjc==null||BasicValue.ymjc==undefined){ BasicValue.ymjc = ""; }
					if(BasicValue.qtzpyy==null||BasicValue.qtzpyy==undefined){ BasicValue.qtzpyy = ""; }
					if(BasicValue.lxdh==null||BasicValue.lxdh==undefined){ BasicValue.lxdh = ""; }
					if(BasicValue.pkhsx==null||BasicValue.pkhsx==undefined){ BasicValue.pkhsx = ""; }
					if(BasicValue.sfsnh==null||BasicValue.sfsnh==undefined){ BasicValue.sfsnh = ""; }
					if(BasicValue.sfdsznh==null||BasicValue.sfdsznh==undefined){ BasicValue.sfdsznh = ""; }
					if(BasicValue.fpxq==null||BasicValue.fpxq==undefined){ BasicValue.fpxq = ""; }
					if(BasicValue.sfz==null||BasicValue.sfz==undefined){ BasicValue.sfz = ""; }
					if(BasicValue.sfjls==null||BasicValue.sfjls==undefined){ BasicValue.sfjls = ""; }
					if(BasicValue.sfymbq==null||BasicValue.sfymbq==undefined){ BasicValue.sfymbq = ""; }
					if(BasicValue.zyzpyy==null||BasicValue.zyzpyy==undefined){ BasicValue.zyzpyy = ""; }
					
			    that.htmGroup.append('<div class="scrollbar centerTable_basic centerTable"><table>' +
				'<tr><th colspan="18">基本情况</th></tr>' +
				'<tr><td colspan="3">家庭住址</td><td colspan="15">'+BasicValue.jtzz+'</td></tr>' +
				'<tr><td colspan="3">户主姓名</td><td>'+BasicValue.hzxm+'</td><td colspan="4">联系电话</td><td colspan="4">'+BasicValue.lxdh+'</td><td colspan="4">身份证号码</td><td colspan="2">'+BasicValue.sfz+'</td></tr>' +
				'<tr><td colspan="3">A1识别标准</td><td colspan="2">'+BasicValue.sbbz+'</td><td colspan="4">A2贫困户属性</td><td colspan="4">'+BasicValue.pkhsx+'</td><td colspan="3">A19是否军烈属</td><td colspan="2">'+BasicValue.sfjls+'</td></tr>' +
				'<tr><td colspan="3">A20是否独生子女户</td><td colspan="2">'+BasicValue.sfdsznh+'</td><td colspan="4">A21是否双女户</td><td colspan="4">'+BasicValue.sfsnh+'</td><td colspan="3">A2a是否属移民搬迁</td><td colspan="2">'+BasicValue.sfymbq+'</td></tr>' +
				'<tr><td colspan="3">A2b移民界次</td><td colspan="2">'+BasicValue.ymjc+'</td><td colspan="4">A20是否是独生子女户</td><td colspan="4">'+BasicValue.sfdsznh+'</td><td colspan="3">A3主要致贫原因</td><td colspan="2">'+BasicValue.zyzpyy+'</td></tr>' +
				'<tr><td colspan="3">A3a其他致贫原因</td><td colspan="2">'+BasicValue.qtzpyy+'</td><td colspan="4">A3b脱贫需求</td><td colspan="4">'+BasicValue.fpxq+'</td><td colspan="3"></td><td colspan="2"></td></tr>' +
				'<tr><td>序号</td><td>A4姓名</td><td>A5性别</td><td>A6公民身份证号码或残疾证号码</td><td>A7与户主关系</td><td>A8民族</td><td>A9文化程度</td><td>A10 在校生情况</td><td>A11健康状况</td><td>A12劳动能力</td><td>A13务工状况</td><td>A14务工时间</td>'+
				'<td>是否现役军人</td><td>是否参加大病医疗保险</td><td>A15新型农村合作医疗是否参加</td><td>A16基本养老保险是否参加城乡居民</td><td>AN1是否享受农村低保</td><td>AN2是否享受五保供养</td></tr>'+tableTr+'</table></div>');				
				}
	        })
		}
	},
drawEffectFamilyPhoto: function(){	// 扶贫措施-家庭照片
	var that = this;
	this.htmGroup.empty();
	var trNodeLi = ($(".main_with_table").children())[1].childNodes;
	if(trNodeLi[5].className=="menuActive"){
		var value = $(".trColor").attr("value");
		this.liImgSrc=[];
		$.ajax({
			type: "post",
			url: zhnx.resource.getUrl("poverty/persondetail/getphoto.do"),
			data: {huid:value},
			success: function(data){
				var tableLi = "";
				var returnlist = data.series;
				for(var j=0;j<returnlist.length;j++){
					tableLi +='<li value='+j+'><img src='+(window.location.origin + zhnx.resource.getUrl(returnlist[j]))+'></li>'
				}
				
				that.htmGroup.append('<div class="scrollbar centerTable centerTable_Photo" id = "centerTable_Photo"><table>' +
						'<tr><th colspan="4">家庭照片</th></tr>' +
						'<tr><td><ul id="myUl">'+tableLi+'</ul></td></tr>' +
						'</table></div>');
				that.htmGroup.append('<div id = "bigImg" class="scrollbar">'+
		            '<img class="changeBigImg" alt="#">'+
				    '<img class="toLeftClick" src="' + zhnx.resource.getUrl("svg/ico/photo_left.svg") +'" alt="#"/>'+
				    '<img class="toRightClick" src="' + zhnx.resource.getUrl("svg/ico/photo_right.svg") + '" alt="#"/>'+
				    '<img class="toCloseClick" src="' + zhnx.resource.getUrl("svg/ico/photo_close.svg") + '" alt="#"/>'+
				'</div>');
				
		        for(var i = 0;i<returnlist.length;i++){
		            that.liImgSrc.push(window.location.origin + zhnx.resource.getUrl(returnlist[i]))
		        }
		        that.sum.push($("#myUl li"));
		        that.imgClick();
			}	
		})
	  }
	},
	imgClick: function(){
		var that = this;
		
		$(".centerTable_Photo").find("li").on("click",function(){
            var clickIndex =  $(this).index();
            that.imgClickBig(clickIndex);
            that.imgLeftClick();
            that.imgRightClick();
            
            that.commandImgClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: 'that.imgClickBig(' + clickIndex + ')'+';that.imgLeftClick()'+';that.imgRightClick();',
    			execMode: "evalfunc"
			});
            
        });
        that.imgCloseClick();
	},
	imgClickBig: function(imgIndex){
		var that = this;
	        var imgSrc = that.sum[0][imgIndex].children[0].src;
	        $("#bigImg").css({"z-index": "999","opacity": "1"})
	            .find(".changeBigImg").fadeOut(0).attr("src",imgSrc).fadeIn(500);
	},
	imgLeftClick: function(){
		var that = this;
		 $(".toLeftClick").on("click",function(){
             var divId = "#bigImg"
             that.leftClick(divId);
             that.commandImgLfetClick({
     			type: 'click',
     			context: that.id,
     			contextType: 'chaObj',
     			execString: 'that.leftClick("' + divId + '")',
     			execMode: "evalfunc"
 			});
         })
	},
	leftClick: function(lBigImgSrc){
		var that = this;
		lBigImgSrc = $(lBigImgSrc)
		var currentImg = lBigImgSrc.find(".changeBigImg").attr("src").replace(/\\/g, "/");    // 获取大图的src
		for(var k = 0;k<that.liImgSrc.length;k++){
			that.liImgSrc[k] = that.liImgSrc[k].replace(/\\/g, "/");	// 替换斜杠和反斜杠
            if(currentImg==that.liImgSrc[k]){
                var testK=k-1;
                if(testK<=0){
                    testK=0;
                }
                var imgSrcL = that.liImgSrc[testK];
                $("#bigImg").css({"z-index": "999","opacity": "1"})
                .find(".changeBigImg").attr("src",imgSrcL);
//                    .find(".changeBigImg").fadeOut(500).attr("src",imgSrcL).fadeIn(500);
            }
        }
	},
	imgRightClick: function(){
		var that = this;
		 $(".toRightClick").on("click",function(){ 
	            var divId = "#bigImg"
	                that.rightClick(divId);
	                that.commandImgRightClick({
	        			type: 'click',
	        			context: that.id,
	        			contextType: 'chaObj',
	        			execString: 'that.rightClick("' + divId + '")',
	        			execMode: "evalfunc"
	    			});
	        })
	},
	rightClick: function(rBigImgSrc){
		var that = this;
		rBigImgSrc = $(rBigImgSrc)
		 var currentImg = rBigImgSrc.find(".changeBigImg").attr("src").replace(/\\/g, "/");    // 获取大图的src
		for(var h = 0;h<that.liImgSrc.length;h++){
			that.liImgSrc[h] = that.liImgSrc[h].replace(/\\/g, "/")
            if(currentImg==that.liImgSrc[h]){
                var testR=h+1;
                if(testR>=(that.liImgSrc.length-1)){
                    testR=(that.liImgSrc.length-1);
                }
                var imgSrcR = that.liImgSrc[testR];
                $("#bigImg").css({"z-index": "999","opacity": "1"})
                 .find(".changeBigImg").attr("src",imgSrcR);
//                    .find(".changeBigImg").fadeOut(500).attr("src",imgSrcR).fadeIn(500);
            }
        }
	},
	imgCloseClick: function(){
		var that = this;
		$(".toCloseClick").on("click",function(){	// 关闭
			var divId = "#bigImg";
			that.closeAllClick(divId);
			
			that.commandImgCloseClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: 'that.closeAllClick("' + divId + '")',
    			execMode: "evalfunc"
			});
        });
	},
	closeAllClick: function(closeBigImgSrc){
		var that = this;
		closeBigImgSrc = $(closeBigImgSrc)
		 closeBigImgSrc.css({"z-index": "-1","opacity": "0"}).find($(".changeBigImg")).removeAttr("src");
         $(".toRightClick").unbind();
         $(".toLeftClick").unbind();
	},
	commandImgClick: function(commandArgs){
		
	},
	commandImgLfetClick: function(commandArgs){
		
	},
	commandImgRightClick: function(commandArgs){
		
	},
	commandImgCloseClick: function(commandArgs){
		
	},	
	drawEffectHouseholdMeasure: function(){	// 扶贫措施-到户措施（共享受补贴项、各类补贴总计未填）
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[7].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getmeasurebyid.do"),
				data: {huid:value},
				success: function(data){
					var BasicBtqk = data.series.btqk;	// 补贴情况
					var BasicCyjzfc = data.series.cyjzfc;	// 产业精准扶持
					
					if(BasicBtqk.btx==null||BasicBtqk.btx==undefined){ BasicBtqk.btx = ""; }
					if(BasicBtqk.btje==null||BasicBtqk.btje==undefined){ BasicBtqk.btje = ""; }
					if(BasicBtqk.jhsy==null||BasicBtqk.jhsy==undefined){ BasicBtqk.jhsy = ""; }
					if(BasicBtqk.dbj==null||BasicBtqk.dbj==undefined){ BasicBtqk.dbj = ""; }
					if(BasicBtqk.ylbx==null||BasicBtqk.ylbx==undefined){ BasicBtqk.ylbx = ""; }
					if(BasicBtqk.stbcj==null||BasicBtqk.stbcj==undefined){ BasicBtqk.stbcj = ""; }
					if(BasicBtqk.scbt==null||BasicBtqk.scbt==undefined){ BasicBtqk.scbt = ""; }
					if(BasicBtqk.nybxbt==null||BasicBtqk.nybxbt==undefined){ BasicBtqk.nybxbt = ""; }
					if(BasicBtqk.zfbt==null||BasicBtqk.zfbt==undefined){ BasicBtqk.zfbt = ""; }
					if(BasicBtqk.zxj==null||BasicBtqk.zxj==undefined){ BasicBtqk.zxj = ""; }
					if(BasicBtqk.yljhbt==null||BasicBtqk.yljhbt==undefined){ BasicBtqk.yljhbt = ""; }
					if(BasicBtqk.pxjhbt==null||BasicBtqk.pxjhbt==undefined){ BasicBtqk.pxjhbt = ""; }
					if(BasicBtqk.xnh==null||BasicBtqk.xnh==undefined){ BasicBtqk.xnh = ""; }
					if(BasicBtqk.dbje==null||BasicBtqk.dbje==undefined){ BasicBtqk.dbje = ""; }
					if(BasicBtqk.qtbt==null||BasicBtqk.qtbt==undefined){ BasicBtqk.qtbt = ""; }
					
					if(BasicCyjzfc.lsfcqk1l==null||BasicCyjzfc.lsfcqk1l==undefined){ BasicCyjzfc.lsfcqk1l = ""; }
					if(BasicCyjzfc.lsfcqk1l_sl==null||BasicCyjzfc.lsfcqk1l_sl==undefined){ BasicCyjzfc.lsfcqk1l_sl = ""; }
					if(BasicCyjzfc.lsfcqk1l_je==null||BasicCyjzfc.lsfcqk1l_je==undefined){ BasicCyjzfc.lsfcqk1l_je = ""; }
					if(BasicCyjzfc.lsfcqk2==null||BasicCyjzfc.lsfcqk2==undefined){ BasicCyjzfc.lsfcqk2 = ""; }
					if(BasicCyjzfc.lsfcqk2_sl==null||BasicCyjzfc.lsfcqk2_sl==undefined){ BasicCyjzfc.lsfcqk2_sl = ""; }
					if(BasicCyjzfc.lsfcqk2_je==null||BasicCyjzfc.lsfcqk2_je==undefined){ BasicCyjzfc.lsfcqk2_je = ""; }
					if(BasicCyjzfc.lsfcqk3==null||BasicCyjzfc.lsfcqk3==undefined){ BasicCyjzfc.lsfcqk3 = ""; }
					if(BasicCyjzfc.lsfcqk3_sl==null||BasicCyjzfc.lsfcqk3_sl==undefined){ BasicCyjzfc.lsfcqk3_sl = ""; }
					if(BasicCyjzfc.lsfcqk3_je==null||BasicCyjzfc.lsfcqk3_je==undefined){ BasicCyjzfc.lsfcqk3_je = ""; }
					if(BasicCyjzfc.lsfcqk4==null||BasicCyjzfc.lsfcqk4==undefined){ BasicCyjzfc.lsfcqk4 = ""; }
					if(BasicCyjzfc.lsfcqk4_sl==null||BasicCyjzfc.lsfcqk4_sl==undefined){ BasicCyjzfc.lsfcqk4_sl = ""; }
					if(BasicCyjzfc.lsfcqk4_je==null||BasicCyjzfc.lsfcqk4_je==undefined){ BasicCyjzfc.lsfcqk4_je = ""; }
					if(BasicCyjzfc.lsfcqk5==null||BasicCyjzfc.lsfcqk5==undefined){ BasicCyjzfc.lsfcqk5 = ""; }
					if(BasicCyjzfc.lsfcqk5_sl==null||BasicCyjzfc.lsfcqk5_sl==undefined){ BasicCyjzfc.lsfcqk5_sl = ""; }
					if(BasicCyjzfc.lsfcqk5_je==null||BasicCyjzfc.lsfcqk5_je==undefined){ BasicCyjzfc.lsfcqk5_je = ""; }
					if(BasicCyjzfc.rsfcqk1==null||BasicCyjzfc.rsfcqk1==undefined){ BasicCyjzfc.rsfcqk1 = ""; }
					if(BasicCyjzfc.rsfcqk1_sl==null||BasicCyjzfc.rsfcqk1_sl==undefined){ BasicCyjzfc.rsfcqk1_sl = ""; }
					if(BasicCyjzfc.rsfcqk1_je==null||BasicCyjzfc.rsfcqk1_je==undefined){ BasicCyjzfc.rsfcqk1_je = ""; }
					if(BasicCyjzfc.rsfcqk2==null||BasicCyjzfc.rsfcqk2==undefined){ BasicCyjzfc.rsfcqk2 = ""; }
					if(BasicCyjzfc.rsfcqk2_sl==null||BasicCyjzfc.rsfcqk2_sl==undefined){ BasicCyjzfc.rsfcqk2_sl = ""; }
					if(BasicCyjzfc.rsfcqk2_je==null||BasicCyjzfc.rsfcqk2_je==undefined){ BasicCyjzfc.rsfcqk2_je = ""; }
					if(BasicCyjzfc.rsfcqk3==null||BasicCyjzfc.rsfcqk3==undefined){ BasicCyjzfc.rsfcqk3 = ""; }
					if(BasicCyjzfc.rsfcqk3_sl==null||BasicCyjzfc.rsfcqk3_sl==undefined){ BasicCyjzfc.rsfcqk3_sl = ""; }
					if(BasicCyjzfc.rsfcqk3_je==null||BasicCyjzfc.rsfcqk3_je==undefined){ BasicCyjzfc.rsfcqk3_je = ""; }
					if(BasicCyjzfc.rsfcqk4==null||BasicCyjzfc.rsfcqk4==undefined){ BasicCyjzfc.rsfcqk4 = ""; }
					if(BasicCyjzfc.rsfcqk4_sl==null||BasicCyjzfc.rsfcqk4_sl==undefined){ BasicCyjzfc.rsfcqk4_sl = ""; }
					if(BasicCyjzfc.rsfcqk4_je==null||BasicCyjzfc.rsfcqk4_je==undefined){ BasicCyjzfc.rsfcqk4_je = ""; }
					if(BasicCyjzfc.rsfcqk5==null||BasicCyjzfc.rsfcqk5==undefined){ BasicCyjzfc.rsfcqk5 = ""; }
					if(BasicCyjzfc.rsfcqk5_sl==null||BasicCyjzfc.rsfcqk5_sl==undefined){ BasicCyjzfc.rsfcqk5_sl = ""; }
					if(BasicCyjzfc.rsfcqk5_je==null||BasicCyjzfc.rsfcqk5_je==undefined){ BasicCyjzfc.rsfcqk5_je = ""; }
					if(BasicCyjzfc.xjssqs==null||BasicCyjzfc.xjssqs==undefined){ BasicCyjzfc.xjssqs = ""; }
					if(BasicCyjzfc.xjsswp==null||BasicCyjzfc.xjsswp==undefined){ BasicCyjzfc.xjsswp = ""; }
					if(BasicCyjzfc.xjsxyhc==null||BasicCyjzfc.xjsxyhc==undefined){ BasicCyjzfc.xjsxyhc = ""; }
					if(BasicCyjzfc.xznjsb==null||BasicCyjzfc.xznjsb==undefined){ BasicCyjzfc.xznjsb = ""; }
					if(BasicCyjzfc.gtjyzl==null||BasicCyjzfc.gtjyzl==undefined){ BasicCyjzfc.gtjyzl = ""; }
					if(BasicCyjzfc.njysr==null||BasicCyjzfc.njysr==undefined){ BasicCyjzfc.njysr = ""; }
					if(BasicCyjzfc.lztdmj==null||BasicCyjzfc.lztdmj==undefined){ BasicCyjzfc.lztdmj = ""; }
					if(BasicCyjzfc.lzsr==null||BasicCyjzfc.lzsr==undefined){ BasicCyjzfc.lzsr = ""; }
					if(BasicCyjzfc.zcsyfs==null||BasicCyjzfc.zcsyfs==undefined){ BasicCyjzfc.zcsyfs = ""; }
					if(BasicCyjzfc.zcsyhzdx==null||BasicCyjzfc.zcsyhzdx==undefined){ BasicCyjzfc.zcsyhzdx = ""; }
					if(BasicCyjzfc.zcsysr==null||BasicCyjzfc.zcsysr==undefined){ BasicCyjzfc.zcsysr = ""; }
					if(BasicCyjzfc.zxfpzjtr==null||BasicCyjzfc.zxfpzjtr==undefined){ BasicCyjzfc.zxfpzjtr = ""; }
					if(BasicCyjzfc.hybmzjtr==null||BasicCyjzfc.hybmzjtr==undefined){ BasicCyjzfc.hybmzjtr = ""; }
					if(BasicCyjzfc.shbfzjtr==null||BasicCyjzfc.shbfzjtr==undefined){ BasicCyjzfc.shbfzjtr = ""; }
					
					that.htmGroup.append('<div class="scrollbar centerTable centerTable_House"><table>' +
							'<tr><th colspan="8">补贴情况产业精准扶持</th></tr>' +
							'<tr><td colspan="2">补贴情况</td><td colspan="4">产业精准扶持</td><td colspan="2">能力提升状况</td></tr>' +
							'<tr><td>该户共享受补贴（项）</td><td>'+BasicBtqk.btx+'</td><td>AN29a受扶持情况1</td><td>'+BasicCyjzfc.lsfcqk1l+'</td><td>AN29a_1受扶持情况1数量</td><td>'+BasicCyjzfc.lsfcqk1l_sl+'</td><td></td><td></td></tr>' +
							'<tr><td>各类补贴总计（元）</td><td>'+BasicBtqk.btje+'</td><td>AN29b受扶持情况2</td><td>'+BasicCyjzfc.lsfcqk2+'</td><td>AN29a_2受扶持情况1金额</td><td>'+BasicCyjzfc.lsfcqk1l_je+'</td><td></td><td></td></tr>' +
							'<tr><td>A36a领取计划生育金（含"少生快富"和"奖励扶助"）（元）</td><td>'+BasicBtqk.jhsy+'</td><td>AN29c受扶持情况3</td><td>'+BasicCyjzfc.lsfcqk3+'</td><td>AN29b_1受扶持情况2数量</td><td>'+BasicCyjzfc.lsfcqk2_sl+'</td><td></td><td></td></tr>' +
							'<tr><td>A36b领取低保金（含五保供养金）（元）</td><td>'+BasicBtqk.dbj+'</td><td>AN29d受扶持情况4</td><td>'+BasicCyjzfc.lsfcqk4+'</td><td>AN29b_2受扶持情况2金额</td><td>'+BasicCyjzfc.lsfcqk2_je+'</td><td></td><td></td></tr>' +
							'<tr><td>A36c领取养老保险金（元）</td><td>'+BasicBtqk.ylbx+'</td><td>AN31新建设施圈社（平方米）</td><td>'+BasicCyjzfc.xjssqs+'</td><td>AN29c_1受扶持情况3数量</td><td>'+BasicCyjzfc.lsfcqk3_sl+'</td><td></td><td></td></tr>' +
							'<tr><td>A36f生态补偿金（含退耕还林、草原生态奖补等）（元）</td><td>'+BasicBtqk.stbcj+'</td><td>AN32新建设施温棚（平方米）</td><td>'+BasicCyjzfc.xjsswp+'</td><td>AN29c_2受扶持情况3金额</td><td>'+BasicCyjzfc.lsfcqk3_je+'</td><td></td><td></td></tr>' +
							'<tr><td>AN7生产补贴（粮食补贴、良种直补、农机补贴）（元）</td><td>'+BasicBtqk.scbt+'</td><td>AN33新建三贮一化池（平方米）</td><td>'+BasicCyjzfc.xjsxyhc+'</td><td>AN29d_1受扶持情况4数量</td><td>'+BasicCyjzfc.lsfcqk4_sl+'</td><td></td><td></td></tr>' +
							'<tr><td>AN8农业保险补贴（元）</td><td>'+BasicBtqk.nybxbt+'</td><td>AN34新增农机设备（台套）</td><td>'+BasicCyjzfc.xznjsb+'</td><td>AN29d_2受扶持情况4金额</td><td>'+BasicCyjzfc.lsfcqk4_je+'</td><td></td><td></td></tr>' +
							'<tr><td>AN9住房补贴（元）</td><td>'+BasicBtqk.zfbt+'</td><td>AN35个体经营种类</td><td>'+BasicCyjzfc.gtjyzl+'</td><td>AN29e_1受扶持情况5数量</td><td>'+BasicCyjzfc.lsfcqk5_sl+'</td><td></td><td></td></tr>' +
							'<tr><td>AN10国家助学金（含奖学金）（元）</td><td>'+BasicBtqk.zxj+'</td><td>AN36流转土地面积（亩）</td><td>'+BasicCyjzfc.lztdmj+'</td><td>AN29e_1受扶持情况5数量</td><td>'+BasicCyjzfc.lsfcqk5_sl+'</td><td></td><td></td></tr>' +
							'<tr><td>AN11雨露计划补贴（元）</td><td>'+BasicBtqk.yljhbt+'</td><td>AN37资产收益方式</td><td>'+BasicCyjzfc.zcsyfs+'</td><td>AN29e_2受扶持情况5金额</td><td>'+BasicCyjzfc.lsfcqk5_je+'</td><td></td><td></td></tr>' +
							'<tr><td>AN12技能培训补贴（元）</td><td>'+BasicBtqk.pxjhbt+'</td><td>AN30a_1受扶持情况1数量</td><td>'+BasicCyjzfc.rsfcqk1_sl+'</td><td></td><td></td></tr>' +
							'<tr><td>AN13新农合报销医疗费（元）</td><td>'+BasicBtqk.xnh+'</td><td>AN38专项扶贫资金投入（元）</td><td>'+BasicCyjzfc.zxfpzjtr+'</td><td>AN30a_2受扶持情况1金额</td><td>'+BasicCyjzfc.rsfcqk1_je+'</td><td></td><td></td></tr>' +
							'<tr><td>AN14大病救助金额（元）</td><td>'+BasicBtqk.dbje+'</td><td>AN39行业部门资金投入（元）</td><td>'+BasicCyjzfc.hybmzjtr+'</td><td>AN30b_1受扶持情况2数量</td><td>'+BasicCyjzfc.rsfcqk2_sl+'</td><td></td><td></td></tr>' +
							'<tr><td>AN15其他补贴（元）</td><td>'+BasicBtqk.qtbt+'</td><td>AN40社会帮扶资金投入（元）</td><td>'+BasicCyjzfc.shbfzjtr+'</td><td>AN30b_2受扶持情况2金额</td><td>'+BasicCyjzfc.rsfcqk2_je+'</td><td></td><td></td></tr>' +
							'<tr><td></td><td></td><td>AN36a流转收入（元）</td><td>'+BasicCyjzfc.lzsr+'</td><td>AN30c_1受扶持情况3数量</td><td>'+BasicCyjzfc.rsfcqk3_sl+'</td><td></td><td></td></tr>' +
							'<tr><td></td><td></td><td>AN37a资产收益合作对象</td><td>'+BasicCyjzfc.zcsyhzdx+'</td><td>AN30c_2受扶持情况3金额</td><td>'+BasicCyjzfc.rsfcqk3_je+'</td><td></td><td></td></tr>' +
							'<tr><td></td><td></td><td></td><td></td><td>AN30d_1受扶持情况4数量</td><td>'+BasicCyjzfc.rsfcqk4_sl+'</td><td></td><td></td></tr>' +
							'<tr><td></td><td></td><td></td><td></td><td>AN30d_2受扶持情况4金额</td><td>'+BasicCyjzfc.rsfcqk4_je+'</td><td></td><td></td></tr>' +
							'<tr><td></td><td></td><td></td><td></td><td>AN30e_1受扶持情况5数量</td><td>'+BasicCyjzfc.rsfcqk5_sl+'</td><td></td><td></td></tr>' +
							'<tr><td></td><td></td><td></td><td></td><td>AN30e_2受扶持情况5金额</td><td>'+BasicCyjzfc.rsfcqk5_je+'</td><td></td><td></td></tr>' +
							'</table></div>');
					
//					that.addScrollbarDrag();
				}
	        })
		}
	},
	drawEffectInfrastructure: function(){	// 扶贫措施-基础设施（G28是否通生产用电暂无）
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[9].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getinfrastructurebyid.do"),
				data: {huid:value},
				success: function(data){
					var BasicValue = data.series;
					
					if(BasicValue.gdmj==null||BasicValue.gdmj==undefined){ BasicValue.gdmj = ""; }
					if(BasicValue.ggmj==null||BasicValue.ggmj==undefined){ BasicValue.ggmj = ""; }
					if(BasicValue.ldmj==null||BasicValue.ldmj==undefined){ BasicValue.ldmj = ""; }
					if(BasicValue.tghlmj==null||BasicValue.tghlmj==undefined){ BasicValue.tghlmj = ""; }
					if(BasicValue.lgmj==null||BasicValue.lgmj==undefined){ BasicValue.lgmj = ""; }
					if(BasicValue.mcmj==null||BasicValue.mcmj==undefined){ BasicValue.mcmj = ""; }
					if(BasicValue.smmj==null||BasicValue.smmj==undefined){ BasicValue.smmj = ""; }
					if(BasicValue.yskn==null||BasicValue.yskn==undefined){ BasicValue.yskn = ""; }
					if(BasicValue.ysaq==null||BasicValue.ysaq==undefined){ BasicValue.ysaq = ""; }
					if(BasicValue.ysfs==null||BasicValue.ysfs==undefined){ BasicValue.ysfs = ""; }
					if(BasicValue.sftd==null||BasicValue.sftd==undefined){ BasicValue.sftd = ""; }
					if(BasicValue.gbds==null||BasicValue.gbds==undefined){ BasicValue.gbds = ""; }
					if(BasicValue.zfmj==null||BasicValue.zfmj==undefined){ BasicValue.zfmj = ""; }
					if(BasicValue.sfwf==null||BasicValue.sfwf==undefined){ BasicValue.sfwf = ""; }
					if(BasicValue.xjzfmj==null||BasicValue.xjzfmj==undefined){ BasicValue.xjzfmj = ""; }
					if(BasicValue.ywcs==null||BasicValue.ywcs==undefined){ BasicValue.ywcs = ""; }
					if(BasicValue.rllx==null||BasicValue.rllx==undefined){ BasicValue.rllx = ""; }
					if(BasicValue.kdjr==null||BasicValue.kdjr==undefined){ BasicValue.kdjr = ""; }
					if(BasicValue.sjsw==null||BasicValue.sjsw==undefined){ BasicValue.sjsw = ""; }
					if(BasicValue.nmhzs==null||BasicValue.nmhzs==undefined){ BasicValue.nmhzs = ""; }
					
					that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
							'<tr><th colspan="4">基础设施</th></tr>' +
							'<tr><td>A17耕地面积（亩）</td><td>'+BasicValue.gdmj+'</td><td>A24是否通广播电视</td><td>'+BasicValue.gbds+'</td></tr>' +
							'<tr><td>A17a有效灌溉面积（亩）</td><td>'+BasicValue.ggmj+'</td><td>A25距离村主干路（公里）</td><td>'+BasicValue.dljl+'</td></tr>' +
							'<tr><td>A18林地面积（亩）</td><td>'+BasicValue.ldmj+'</td><td>A26入户路类型</td><td>'+BasicValue.dllx+'</td></tr>' +
							'<tr><td>A18a退耕还林面积（亩）</td><td>'+BasicValue.tghlmj+'</td><td>A27住房面积（平方米）</td><td>'+BasicValue.zfmj+'</td></tr>' +
							'<tr><td>A18b林果面积（亩）</td><td>'+BasicValue.lgmj+'</td><td>A28主要住房是否危房</td><td>'+BasicValue.sfwf+'</td></tr>' +
							'<tr><td>A19牧草面积（亩）</td><td>'+BasicValue.mcmj+'</td><td>AN4新建住房面积（平方米）</td><td>'+BasicValue.xjzfmj+'</td></tr>' +
							'<tr><td>A20水面面积（亩）</td><td>'+BasicValue.smmj+'</td><td>A29有无卫生厕所</td><td>'+BasicValue.ywcs+'</td></tr>' +
							'<tr><td>A21饮水是否困难</td><td>'+BasicValue.yskn+'</td><td>A30主要燃料类型</td><td>'+BasicValue.rllx+'</td></tr>' +
							'<tr><td>A22饮水是否安全</td><td>'+BasicValue.ysaq+'</td><td>AN5宽带互联网接入</td><td>'+BasicValue.kdjr+'</td></tr>' +
							'<tr><td>AN3安全饮水方式</td><td>'+BasicValue.ysfs+'</td><td>AN6能否手机上网</td><td>'+BasicValue.sjsw+'</td></tr>' +
							'<tr><td>A23是否通生活用电</td><td>'+BasicValue.sftd+'</td><td>AN31是否参与农民专业合作社</td><td>'+BasicValue.nmhzs+'</td></tr>' +
							'<tr><td>G28是否通生产用电</td><td></td><td></td><td></td></tr>' +
							'</table></div>');
					}
	        })
		}
	},
	drawEffectProductionOpera: function(){	// 扶贫措施-生产经营现状
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[11].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getproductionbyid.do"),
				data: {huid:value},
				success: function(data){
					var BasicValue = data.series;
					if(BasicValue.yzxza1==null||BasicValue.yzxza1==undefined){ BasicValue.yzxza1 = ""; }
					if(BasicValue.yzxzb1==null||BasicValue.yzxzb1==undefined){ BasicValue.yzxzb1 = ""; }
					if(BasicValue.yzxzc1==null||BasicValue.yzxzc1==undefined){ BasicValue.yzxzc1 = ""; }
					if(BasicValue.sxyhc==null||BasicValue.sxyhc==undefined){ BasicValue.sxyhc = ""; }
					if(BasicValue.njjzl==null||BasicValue.njjzl==undefined){ BasicValue.njjzl = ""; }
					if(BasicValue.njjzl1==null||BasicValue.njjzl1==undefined){ BasicValue.njjzl1 = ""; }
					if(BasicValue.njjzl2==null||BasicValue.njjzl2==undefined){ BasicValue.njjzl2 = ""; }
					if(BasicValue.njjzl3==null||BasicValue.njjzl3==undefined){ BasicValue.njjzl3 = ""; }
					if(BasicValue.njjzl4==null||BasicValue.njjzl4==undefined){ BasicValue.njjzl4 = ""; }
					if(BasicValue.gtjy==null||BasicValue.gtjy==undefined){ BasicValue.gtjy = ""; }
					if(BasicValue.gtjyje==null||BasicValue.gtjyje==undefined){ BasicValue.gtjyje = ""; }
					if(BasicValue.yzxzsla1==null||BasicValue.yzxzsla1==undefined){ BasicValue.yzxzsla1 = ""; }
					if(BasicValue.yzxzslb1==null||BasicValue.yzxzslb1==undefined){ BasicValue.yzxzslb1 = ""; }
					if(BasicValue.yzxzslc1==null||BasicValue.yzxzslc1==undefined){ BasicValue.yzxzslc1 = ""; }
					
					if(BasicValue.yzxza2==null||BasicValue.yzxza2==undefined){ BasicValue.yzxza2 = ""; }
					if(BasicValue.yzxzb2==null||BasicValue.yzxzb2==undefined){ BasicValue.yzxzb2 = ""; }
					if(BasicValue.yzxzc2==null||BasicValue.yzxzc2==undefined){ BasicValue.yzxzc2 = ""; }
					if(BasicValue.wpmj==null||BasicValue.wpmj==undefined){ BasicValue.wpmj = ""; }
					if(BasicValue.njjsl==null||BasicValue.njjsl==undefined){ BasicValue.njjsl = ""; }
					if(BasicValue.njjsl1==null||BasicValue.njjsl1==undefined){ BasicValue.njjsl1 = ""; }
					if(BasicValue.njjsl2==null||BasicValue.njjsl2==undefined){ BasicValue.njjsl2 = ""; }
					if(BasicValue.njjsl3==null||BasicValue.njjsl3==undefined){ BasicValue.njjsl3 = ""; }
					if(BasicValue.njjsl4==null||BasicValue.njjsl4==undefined){ BasicValue.njjsl4 = ""; }
					if(BasicValue.gtjyzl==null||BasicValue.gtjyzl==undefined){ BasicValue.gtjyzl = ""; }
					if(BasicValue.yzxzs2a1==null||BasicValue.yzxzs2a1==undefined){ BasicValue.yzxzs2a1 = ""; }
					if(BasicValue.yzxzslb2==null||BasicValue.yzxzslb2==undefined){ BasicValue.yzxzslb2 = ""; }
					if(BasicValue.yzxzslc2==null||BasicValue.yzxzslc2==undefined){ BasicValue.yzxzslc2 = ""; }
					
					that.htmGroup.append('<div class="scrollbar centerTable centerTable_Production"><table>' +
							'<tr><th colspan="6">生产经营现状</th></tr>' +
							'<tr><td>A31a1养殖现状a1</td><td>'+BasicValue.yzxza1+'</td><td>'+BasicValue.yzxzsla1+'</td><td>A31a2养殖现状a2</td><td>'+BasicValue.yzxza2+'</td><td>'+BasicValue.yzxzs2a1+'</td></tr>' +
							'<tr><td>A31b1养殖现状b1</td><td>'+BasicValue.yzxzb1+'</td><td>'+BasicValue.yzxzslb1+'</td><td>A31b2养殖现状b2</td><td>'+BasicValue.yzxzb2+'</td><td>'+BasicValue.yzxzslb2+'</td></tr>' +
							'<tr><td>A31c1养殖现状c1</td><td>'+BasicValue.yzxzc1+'</td><td>'+BasicValue.yzxzslc1+'</td><td>A31c2养殖现状c2</td><td>'+BasicValue.yzxzc2+'</td><td>'+BasicValue.yzxzslc2+'</td></tr>' +
							'<tr><td>A31d养殖圈舍面积（平方米）</td><td>'+BasicValue.yzmj+'</td><td colspan="2">A31e设施温棚面积（平方米）</td><td colspan="2">'+BasicValue.wpmj+'</td></tr>' +
							'<tr><td>A31d-1三贮一化池（平方米）</td><td colspan="2">'+BasicValue.sxyhc+'</td><td></td><td colspan="2"></td></tr>' +
							'<tr><td>A31f农机具种类</td><td colspan="2">'+BasicValue.njjzl+'</td><td>A31f-1农机具数量（台、套）</td><td colspan="2">'+BasicValue.njjsl+'</td></tr>' +
							'<tr><td>A31f1农机具种类</td><td colspan="2">'+BasicValue.njjzl1+'</td><td>A31f1-1农机具数量（台、套）</td><td colspan="2">'+BasicValue.njjsl1+'</td></tr>' +
							'<tr><td>A31f2农机具种类</td><td colspan="2">'+BasicValue.njjzl2+'</td><td>A31f2-1农机具数量（台、套）</td><td colspan="2">'+BasicValue.njjsl2+'</td></tr>' +
							'<tr><td>A31f3农机具种类</td><td colspan="2">'+BasicValue.njjzl3+'</td><td>A31f3-1农机具数量（台、套）</td><td colspan="2">'+BasicValue.njjsl3+'</td></tr>' +
							'<tr><td>A31f4农机具种类</td><td colspan="2">'+BasicValue.njjzl4+'</td><td>A31f4-1农机具数量（台、套）</td><td colspan="2">'+BasicValue.njjsl4+'</td></tr>' +
							'<tr><td>A31g是否个体经营</td><td colspan="2">'+BasicValue.gtjy+'</td><td>A31g-1个体经营种类</td><td colspan="2">'+BasicValue.gtjyzl+'</td></tr>' +
							'<tr><td>A31g-2个体经营投入资金（万元）</td><td colspan="2">'+BasicValue.gtjyje+'</td><td></td><td colspan="2"></td></tr>' +
							'</table></div>');
					}
	        })
		}
	},
	drawEffectRevenue: function(){	// 扶贫措施-收支情况（G42转移性收入（元）、G42f其他转移性收入（元）、G42b低保金（元）、G42c五保金（元）数据暂无）
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[13].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getpaymentbyid.do"),
				data: {huid:value},
				success: function(data){	
					var BasicValue = data.series;
					
					if(BasicValue.gzsr==null||BasicValue.gzsr==undefined){ BasicValue.gzsr = ""; }
					if(BasicValue.scsr==null||BasicValue.scsr==undefined){ BasicValue.scsr = ""; }
					if(BasicValue.glbt==null||BasicValue.glbt==undefined){ BasicValue.glbt = ""; }
					if(BasicValue.jhsyj==null||BasicValue.jhsyj==undefined){ BasicValue.jhsyj = ""; }
					if(BasicValue.lqdbj==null||BasicValue.lqdbj==undefined){ BasicValue.lqdbj = ""; }
					if(BasicValue.ylbxj==null||BasicValue.ylbxj==undefined){ BasicValue.ylbxj = ""; }
					if(BasicValue.stbcj==null||BasicValue.stbcj==undefined){ BasicValue.stbcj = ""; }
					if(BasicValue.scbt==null||BasicValue.scbt==undefined){ BasicValue.scbt = ""; }
					if(BasicValue.nybxbt==null||BasicValue.nybxbt==undefined){ BasicValue.nybxbt = ""; }
					if(BasicValue.zfbt==null||BasicValue.zfbt==undefined){ BasicValue.zfbt = ""; }
					if(BasicValue.gjzxj==null||BasicValue.gjzxj==undefined){ BasicValue.gjzxj = ""; }
					if(BasicValue.ylbt==null||BasicValue.ylbt==undefined){ BasicValue.ylbt = ""; }
					if(BasicValue.jnpxbt==null||BasicValue.jnpxbt==undefined){ BasicValue.jnpxbt = ""; }
					if(BasicValue.xnhbx==null||BasicValue.xnhbx==undefined){ BasicValue.xnhbx = ""; }
					if(BasicValue.dbjz==null||BasicValue.dbjz==undefined){ BasicValue.dbjz = ""; }
					if(BasicValue.qtbt==null||BasicValue.qtbt==undefined){ BasicValue.qtbt = ""; }
					if(BasicValue.ccsr==null||BasicValue.ccsr==undefined){ BasicValue.ccsr = ""; }
					if(BasicValue.rjsr==null||BasicValue.rjsr==undefined){ BasicValue.rjsr = ""; }
					if(BasicValue.sczc==null||BasicValue.sczc==undefined){ BasicValue.sczc = ""; }
					if(BasicValue.cczc==null||BasicValue.cczc==undefined){ BasicValue.cczc = ""; }
					if(BasicValue.fz==null||BasicValue.fz==undefined){ BasicValue.fz = ""; }
					if(BasicValue.sbzc==null||BasicValue.sbzc==undefined){ BasicValue.sbzc = ""; }
					if(BasicValue.gjfzc==null||BasicValue.gjfzc==undefined){ BasicValue.gjfzc = ""; }
					if(BasicValue.jyzc==null||BasicValue.jyzc==undefined){ BasicValue.jyzc = ""; }
					if(BasicValue.ylfy==null||BasicValue.ylfy==undefined){ BasicValue.ylfy = ""; }
					if(BasicValue.hbzl==null||BasicValue.hbzl==undefined){ BasicValue.hbzl = ""; }
					if(BasicValue.qtzc==null||BasicValue.qtzc==undefined){ BasicValue.qtzc = ""; }
					if(BasicValue.hsjqzc==null||BasicValue.hsjqzc==undefined){ BasicValue.hsjqzc = ""; }
					if(BasicValue.yzzc==null||BasicValue.yzzc==undefined){ BasicValue.yzzc = ""; }
					
					that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
							'<tr><th colspan="4">收支情况</th></tr>' +
							'<tr><td>A34全家工资性收入（元）</td><td>'+BasicValue.gzsr+'</td><td>AN17家庭生产性支出（含生产性固定资产折旧（元））</td><td>'+BasicValue.sczc+'</td></tr>' +
							'<tr><td>A35全家生产经营性收入（元）</td><td>'+BasicValue.scsr+'</td><td>AN18财产性支出（元）</td><td>'+BasicValue.cczc+'</td></tr>' +
							'<tr><td>A36各类补贴（元）</td><td>'+BasicValue.glbt+'</td><td>AN18a负债（元）</td><td>'+BasicValue.fz+'</td></tr>' +
							'<tr><td>A36a领取计划生育金（含"少生快富"和"奖励扶助"）（元）</td>'+BasicValue.jhsyj+'<td></td><td>AN19社会保障支出（元）</td><td>'+BasicValue.sbzc+'</td></tr>' +
							'<tr><td>A36b领取低保金（含五保供养金）（元）</td><td>'+BasicValue.lqdbj+'</td><td>AN20购建房支出（危房改造或移民建房自筹资金）（元）</td><td>'+BasicValue.gjfzc+'</td></tr>' +
							'<tr><td>A36c领取养老保险金（元）</td><td>'+BasicValue.ylbxj+'</td><td>AN21教育支出（元）</td><td>'+BasicValue.jyzc+'</td></tr>' +
							'<tr><td>A36f生态补偿金（含退耕还林、草原生态奖补等）（元）</td><td>'+BasicValue.stbcj+'</td><td>AN22医疗费用（医疗自费部分）（元）</td><td>'+BasicValue.ylfy+'</td></tr>' +
							'<tr><td>AN7生产补贴（粮食补贴、良种直补、农机补贴）（元）</td><td>'+BasicValue.scbt+'</td><td>AN22a患病种类</td><td>'+BasicValue.hbzl+'</td></tr>' +
							'<tr><td>AN8农业保险补贴（元）</td><td>'+BasicValue.nybxbt+'</td><td>AN23其它支出（元）</td><td>'+BasicValue.qtzc+'</td></tr>' +
							'<tr><td>AN9住房补贴（元）</td><td>'+BasicValue.zfbt+'</td><td>AN23a婚丧嫁娶支出（元）</td><td>'+BasicValue.hsjqzc+'</td></tr>' +
							'<tr><td>AN10国家助学金（含奖学金）（元）</td><td>'+BasicValue.gjzxj+'</td><td>AN23b因灾支出（元）</td><td>'+BasicValue.yzzc+'</td></tr>' +
							'<tr><td>AN11雨露计划补贴（元）</td><td>'+BasicValue.ylbt+'</td><td>G42转移性收入（元）</td><td></td></tr>' +
							'<tr><td>AN12技能培训补贴（元）</td><td>'+BasicValue.jnpxbt+'</td><td>G42f其他转移性收入（元）</td><td></td></tr>' +
							'<tr><td>AN13新农合报销医疗费（元）</td><td>'+BasicValue.xnhbx+'</td><td>G42b低保金（元）</td><td></td></tr>' +
							'<tr><td>AN14大病救助金额（元）</td><td>'+BasicValue.dbjz+'</td><td>G42c五保金（元）</td><td></td></tr>' +
							'<tr><td>AN15其它补贴（元）</td><td>'+BasicValue.qtbt+'</td><td></td><td></td></tr>' +
							'<tr><td>AN16财产性收入（元）</td><td>'+BasicValue.ccsr+'</td><td></td><td></td></tr>' +
							'<tr><td>A33家庭年人均可支配收入（元）</td><td>'+BasicValue.rjsr+'</td><td></td><td></td></tr>' +
							'</table></div>');
					}
	        })
		}
	},
	drawEffectfp: function(){	// 扶贫措施-产业发展与精准扶贫
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[15].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getdevelopandsupportbyid.do"),
				data: {huid:value},
				success: function(data){	
					var BasicFzxq = data.series.fzxq;	// 产业发展需求
					var BasicJzfc = data.series.jzfc;	// 精准扶持
					
					if(BasicFzxq.lpkhxq1==null||BasicFzxq.lpkhxq1==undefined){ BasicFzxq.lpkhxq1 = ""; }
					if(BasicFzxq.lpkhxq3==null||BasicFzxq.lpkhxq3==undefined){ BasicFzxq.lpkhxq3 = ""; }
					if(BasicFzxq.rpkhxq2==null||BasicFzxq.rpkhxq2==undefined){ BasicFzxq.rpkhxq2 = ""; }
					if(BasicFzxq.yzssxq==null||BasicFzxq.yzssxq==undefined){ BasicFzxq.yzssxq = ""; }
					if(BasicFzxq.njsbxq==null||BasicFzxq.njsbxq==undefined){ BasicFzxq.njsbxq = ""; }
					if(BasicFzxq.jsxqzl==null||BasicFzxq.jsxqzl==undefined){ BasicFzxq.jsxqzl = ""; }
					if(BasicFzxq.gtjyyy==null||BasicFzxq.gtjyyy==undefined){ BasicFzxq.gtjyyy = ""; }
					if(BasicFzxq.zjly==null||BasicFzxq.zjly==undefined){ BasicFzxq.zjly = ""; }
					if(BasicFzxq.lpkhxq1_sl==null||BasicFzxq.lpkhxq1_sl==undefined){ BasicFzxq.lpkhxq1_sl = ""; }
					if(BasicFzxq.lpkhxq3_sl==null||BasicFzxq.lpkhxq3_sl==undefined){ BasicFzxq.lpkhxq3_sl = ""; }
					if(BasicFzxq.rpkhxq2_sl==null||BasicFzxq.rpkhxq2_sl==undefined){ BasicFzxq.rpkhxq2_sl = ""; }
					if(BasicFzxq.lpkhxq1_je==null||BasicFzxq.lpkhxq1_je==undefined){ BasicFzxq.lpkhxq1_je = ""; }
					if(BasicFzxq.lpkhxq3_je==null||BasicFzxq.lpkhxq3_je==undefined){ BasicFzxq.lpkhxq3_je = ""; }
					if(BasicFzxq.rpkhxq2_je==null||BasicFzxq.rpkhxq2_je==undefined){ BasicFzxq.rpkhxq2_je = ""; }
					if(BasicFzxq.zzssxq==null||BasicFzxq.zzssxq==undefined){ BasicFzxq.zzssxq = ""; }
					if(BasicFzxq.jsxqfs==null||BasicFzxq.jsxqfs==undefined){ BasicFzxq.jsxqfs = ""; }
					if(BasicFzxq.gtjyxq==null||BasicFzxq.gtjyxq==undefined){ BasicFzxq.gtjyxq = ""; }
					if(BasicFzxq.zjje==null||BasicFzxq.zjje==undefined){ BasicFzxq.zjje = ""; }
					if(BasicFzxq.lpkhxq2==null||BasicFzxq.lpkhxq2==undefined){ BasicFzxq.lpkhxq2 = ""; }
					if(BasicFzxq.rpkhxq1==null||BasicFzxq.rpkhxq1==undefined){ BasicFzxq.rpkhxq1 = ""; }
					if(BasicFzxq.rpkhxq3==null||BasicFzxq.rpkhxq3==undefined){ BasicFzxq.rpkhxq3 = ""; }
					if(BasicFzxq.lpkhxq2_sl==null||BasicFzxq.lpkhxq2_sl==undefined){ BasicFzxq.lpkhxq2_sl = ""; }
					if(BasicFzxq.rpkhxq1_sl==null||BasicFzxq.rpkhxq1_sl==undefined){ BasicFzxq.rpkhxq1_sl = ""; }
					if(BasicFzxq.rpkhxq3_sl==null||BasicFzxq.rpkhxq3_sl==undefined){ BasicFzxq.rpkhxq3_sl = ""; }
					if(BasicFzxq.lpkhxq2_je==null||BasicFzxq.lpkhxq2_je==undefined){ BasicFzxq.lpkhxq2_je = ""; }
					if(BasicFzxq.rpkhxq1_je==null||BasicFzxq.rpkhxq1_je==undefined){ BasicFzxq.rpkhxq1_je = ""; }
					if(BasicFzxq.rpkhxq3_je==null||BasicFzxq.rpkhxq3_je==undefined){ BasicFzxq.rpkhxq3_je = ""; }
					
					if(BasicJzfc.lsfcqk1l==null||BasicJzfc.lsfcqk1l==undefined){ BasicJzfc.lsfcqk1l = ""; }
					if(BasicJzfc.lsfcqk2==null||BasicJzfc.lsfcqk2==undefined){ BasicJzfc.lsfcqk2 = ""; }
					if(BasicJzfc.lsfcqk3==null||BasicJzfc.lsfcqk3==undefined){ BasicJzfc.lsfcqk3 = ""; }
					if(BasicJzfc.lsfcqk4==null||BasicJzfc.lsfcqk4==undefined){ BasicJzfc.lsfcqk4 = ""; }
					if(BasicJzfc.lsfcqk5==null||BasicJzfc.lsfcqk5==undefined){ BasicJzfc.lsfcqk5 = ""; }
					if(BasicJzfc.xjssqs==null||BasicJzfc.xjssqs==undefined){ BasicJzfc.xjssqs = ""; }
					if(BasicJzfc.xjsxyhc==null||BasicJzfc.xjsxyhc==undefined){ BasicJzfc.xjsxyhc = ""; }
					if(BasicJzfc.gtjyzl==null||BasicJzfc.gtjyzl==undefined){ BasicJzfc.gtjyzl = ""; }
					if(BasicJzfc.lztdmj==null||BasicJzfc.lztdmj==undefined){ BasicJzfc.lztdmj = ""; }
					if(BasicJzfc.zcsyfs==null||BasicJzfc.zcsyfs==undefined){ BasicJzfc.zcsyfs = ""; }
					if(BasicJzfc.zcsysr==null||BasicJzfc.zcsysr==undefined){ BasicJzfc.zcsysr = ""; }
					if(BasicJzfc.zxfpzjtr==null||BasicJzfc.zxfpzjtr==undefined){ BasicJzfc.zxfpzjtr = ""; }
					if(BasicJzfc.shbfzjtr==null||BasicJzfc.shbfzjtr==undefined){ BasicJzfc.shbfzjtr = ""; }

					if(BasicJzfc.lsfcqk1l_sl==null||BasicJzfc.lsfcqk1l_sl==undefined){ BasicJzfc.lsfcqk1l_sl = ""; }
					if(BasicJzfc.lsfcqk2_sl==null||BasicJzfc.lsfcqk2_sl==undefined){ BasicJzfc.lsfcqk2_sl = ""; }
					if(BasicJzfc.lsfcqk3_sl==null||BasicJzfc.lsfcqk3_sl==undefined){ BasicJzfc.lsfcqk3_sl = ""; }
					if(BasicJzfc.lsfcqk4_sl==null||BasicJzfc.lsfcqk4_sl==undefined){ BasicJzfc.lsfcqk4_sl = ""; }
					if(BasicJzfc.lsfcqk5_sl==null||BasicJzfc.lsfcqk5_sl==undefined){ BasicJzfc.lsfcqk5_sl = ""; }
					if(BasicJzfc.lsfcqk1l_je==null||BasicJzfc.lsfcqk1l_je==undefined){ BasicJzfc.lsfcqk1l_je = ""; }
					if(BasicJzfc.lsfcqk2_je==null||BasicJzfc.lsfcqk2_je==undefined){ BasicJzfc.lsfcqk2_je = ""; }
					if(BasicJzfc.lsfcqk3_je==null||BasicJzfc.lsfcqk3_je==undefined){ BasicJzfc.lsfcqk3_je = ""; }
					if(BasicJzfc.lsfcqk4_je==null||BasicJzfc.lsfcqk4_je==undefined){ BasicJzfc.lsfcqk4_je = ""; }
					if(BasicJzfc.lsfcqk5_je==null||BasicJzfc.lsfcqk5_je==undefined){ BasicJzfc.lsfcqk5_je = ""; }
					if(BasicJzfc.xjsswp==null||BasicJzfc.xjsswp==undefined){ BasicJzfc.xjsswp = ""; }
					if(BasicJzfc.xznjsb==null||BasicJzfc.xznjsb==undefined){ BasicJzfc.xznjsb = ""; }
					if(BasicJzfc.njysr==null||BasicJzfc.njysr==undefined){ BasicJzfc.njysr = ""; }
					if(BasicJzfc.lzsr==null||BasicJzfc.lzsr==undefined){ BasicJzfc.lzsr = ""; }
					if(BasicJzfc.zcsyhzdx==null||BasicJzfc.zcsyhzdx==undefined){ BasicJzfc.zcsyhzdx = ""; }
					if(BasicJzfc.hybmzjtr==null||BasicJzfc.hybmzjtr==undefined){ BasicJzfc.hybmzjtr = ""; }
					if(BasicJzfc.rsfcqk1==null||BasicJzfc.rsfcqk1==undefined){ BasicJzfc.rsfcqk1 = ""; }
					if(BasicJzfc.rsfcqk2==null||BasicJzfc.rsfcqk2==undefined){ BasicJzfc.rsfcqk2 = ""; }
					if(BasicJzfc.rsfcqk3==null||BasicJzfc.rsfcqk3==undefined){ BasicJzfc.rsfcqk3 = ""; }
					if(BasicJzfc.rsfcqk4==null||BasicJzfc.rsfcqk4==undefined){ BasicJzfc.rsfcqk4 = ""; }
					if(BasicJzfc.rsfcqk5==null||BasicJzfc.rsfcqk5==undefined){ BasicJzfc.rsfcqk5 = ""; }
					if(BasicJzfc.rsfcqk1_sl==null||BasicJzfc.rsfcqk1_sl==undefined){ BasicJzfc.rsfcqk1_sl = ""; }
					if(BasicJzfc.rsfcqk2_sl==null||BasicJzfc.rsfcqk2_sl==undefined){ BasicJzfc.rsfcqk2_sl = ""; }
					if(BasicJzfc.rsfcqk3_sl==null||BasicJzfc.rsfcqk3_sl==undefined){ BasicJzfc.rsfcqk3_sl = ""; }
					if(BasicJzfc.rsfcqk4_sl==null||BasicJzfc.rsfcqk4_sl==undefined){ BasicJzfc.rsfcqk4_sl = ""; }
					if(BasicJzfc.rsfcqk5_sl==null||BasicJzfc.rsfcqk5_sl==undefined){ BasicJzfc.rsfcqk5_sl = ""; }
					if(BasicJzfc.rsfcqk1_je==null||BasicJzfc.rsfcqk1_je==undefined){ BasicJzfc.rsfcqk1_je = ""; }
					if(BasicJzfc.rsfcqk2_je==null||BasicJzfc.rsfcqk2_je==undefined){ BasicJzfc.rsfcqk2_je = ""; }
					if(BasicJzfc.rsfcqk3_je==null||BasicJzfc.rsfcqk3_je==undefined){ BasicJzfc.rsfcqk3_je = ""; }
					if(BasicJzfc.rsfcqk4_je==null||BasicJzfc.rsfcqk4_je==undefined){ BasicJzfc.rsfcqk4_je = ""; }
					if(BasicJzfc.rsfcqk5_je==null||BasicJzfc.rsfcqk5_je==undefined){ BasicJzfc.rsfcqk5_je = ""; }
					
					that.htmGroup.append('<div class="scrollbar centerTable centerTable_fp"><table>' +
							'<tr><th colspan="8">产业发展与精准扶贫</th></tr>' +
							'<tr><td colspan="8">产业发展需求</td></tr>' +
							'<tr><td>AN24a贫困户需求1</td><td>'+BasicFzxq.lpkhxq1+'</td><td>'+BasicFzxq.lpkhxq1_sl+'</td><td>'+BasicFzxq.lpkhxq1_je+'</td><td>AN24b贫困户需求2</td><td>'+BasicFzxq.lpkhxq2+'</td><td>'+BasicFzxq.lpkhxq2_sl+'</td><td>'+BasicFzxq.lpkhxq2_je+'</td></tr>' +
							'<tr><td>AN24c贫困户需求3</td><td>'+BasicFzxq.lpkhxq3+'</td><td>'+BasicFzxq.lpkhxq3_sl+'</td><td>'+BasicFzxq.lpkhxq3_je+'</td><td>AN25a贫困户需求1</td><td>'+BasicFzxq.rpkhxq1+'</td><td>'+BasicFzxq.rpkhxq1_sl+'</td><td>'+BasicFzxq.rpkhxq1_je+'</td></tr>' +
							'<tr><td>AN25b贫困户需求2</td><td>'+BasicFzxq.rpkhxq2+'</td><td>'+BasicFzxq.rpkhxq2_sl+'</td><td>'+BasicFzxq.rpkhxq2_je+'</td><td>AN25c贫困户需求3</td><td>'+BasicFzxq.rpkhxq3+'</td><td>'+BasicFzxq.rpkhxq3_sl+'</td><td>'+BasicFzxq.rpkhxq3_je+'</td></tr>' +
							'<tr><td>AN26养殖设施需求</td><td colspan="3">'+BasicFzxq.yzssxq+'</td><td>AN26a种植设施需求</td><td colspan="3">'+BasicFzxq.zzssxq+'</td></tr>' +
							'<tr><td>AN26b农机设备需求种类（不超过5项）</td><td colspan="3">'+BasicFzxq.njsbxq+'</td><td></td><td colspan="3"></td></tr>' +
							'<tr><td>AN27a技术需求种类</td><td colspan="3">'+BasicFzxq.jsxqzl+'</td><td>AN27b技术支持方式</td><td colspan="3">'+BasicFzxq.jsxqfs+'</td></tr>' +
							'<tr><td>AN28个体经营意愿</td><td colspan="3">'+BasicFzxq.gtjyyy+'</td><td>AN28a个体经营需求（元）</td><td colspan="3">'+BasicFzxq.gtjyxq+'</td></tr>' +
							'<tr><td>AN28b资金来源</td><td colspan="3">'+BasicFzxq.zjly+'</td><td>AN28c资金需求量（元）</td><td colspan="3">'+BasicFzxq.zjje+'</td></tr>' +
							'<tr><td colspan="8">产业精准扶持</td></tr>' +
							'<tr><td>AN29a受扶持情况1</td><td>'+BasicJzfc.lsfcqk1l+'</td><td>'+BasicJzfc.lsfcqk1l_sl+'</td><td>'+BasicJzfc.lsfcqk1l_je+'</td><td>AN30a受扶持情况1</td><td>'+BasicJzfc.rsfcqk1+'</td><td>'+BasicJzfc.rsfcqk1_sl+'</td><td>'+BasicJzfc.rsfcqk1_je+'</td></tr>' +
							'<tr><td>AN29b受扶持情况2</td><td>'+BasicJzfc.lsfcqk2+'</td><td>'+BasicJzfc.lsfcqk2_sl+'</td><td>'+BasicJzfc.lsfcqk2_je+'</td><td>AN30b受扶持情况2</td><td>'+BasicJzfc.rsfcqk2+'</td><td>'+BasicJzfc.rsfcqk2_sl+'</td><td>'+BasicJzfc.rsfcqk2_je+'</td></tr>' +
							'<tr><td>AN29c受扶持情况3</td><td>'+BasicJzfc.lsfcqk3+'</td><td>'+BasicJzfc.lsfcqk3_sl+'</td><td>'+BasicJzfc.lsfcqk3_je+'</td><td>AN30c受扶持情况3</td><td>'+BasicJzfc.rsfcqk3+'</td><td>'+BasicJzfc.rsfcqk3_sl+'</td><td>'+BasicJzfc.rsfcqk3_je+'</td></tr>' +
							'<tr><td>AN29d受扶持情况4</td><td>'+BasicJzfc.lsfcqk4+'</td><td>'+BasicJzfc.lsfcqk4_sl+'</td><td>'+BasicJzfc.lsfcqk4_je+'</td><td>AN30d受扶持情况4</td><td>'+BasicJzfc.rsfcqk4+'</td><td>'+BasicJzfc.rsfcqk4_sl+'</td><td>'+BasicJzfc.rsfcqk4_je+'</td></tr>' +
							'<tr><td>AN29e受扶持情况5</td><td>'+BasicJzfc.lsfcqk5+'</td><td>'+BasicJzfc.lsfcqk5_sl+'</td><td>'+BasicJzfc.lsfcqk5_je+'</td><td>AN30e受扶持情况5</td><td>'+BasicJzfc.rsfcqk5+'</td><td>'+BasicJzfc.rsfcqk5_sl+'</td><td>'+BasicJzfc.rsfcqk5_je+'</td></tr>' +
							'<tr><td>AN31新建设施圈舍（平方米）</td><td colspan="3">'+BasicJzfc.xjssqs+'</td><td>AN32新建设施温棚（平方米）</td><td colspan="3">'+BasicJzfc.xjsswp+'</td></tr>' +
							'<tr><td>AN33新建三贮一化池（立方米）</td><td colspan="3">'+BasicJzfc.xjsxyhc+'</td><td>AN34新增农机设备（台套）</td><td colspan="3">'+BasicJzfc.xznjsb+'</td></tr>' +
							'<tr><td>AN35个体经营种类</td><td colspan="3">'+BasicJzfc.gtjyzl+'</td><td>AN35a年经营收入（元）</td><td colspan="3">'+BasicJzfc.njysr+'</td></tr>' +
							'<tr><td>AN36流转土地面积（亩）</td><td colspan="3">'+BasicJzfc.lztdmj+'</td><td>AN36a流转收入（元）</td><td colspan="3">'+BasicJzfc.lzsr+'</td></tr>' +
							'<tr><td>AN37资产收益方式</td><td colspan="3">'+BasicJzfc.zcsyfs+'</td><td>AN37a资产收益合作对象</td><td colspan="3">'+BasicJzfc.zcsyhzdx+'</td></tr>' +
							'<tr><td>AN37b资产收益收入（元）</td><td colspan="3">'+BasicJzfc.zcsysr+'</td><td></td><td colspan="3"></td></tr>' +
							'<tr><td>AN38专项扶贫资金投入（元）</td><td colspan="3">'+BasicJzfc.zxfpzjtr+'</td><td>AN39行业部门资金投入（元）</td><td colspan="3">'+BasicJzfc.hybmzjtr+'</td></tr>' +
							'<tr><td>AN40社会帮扶资金投入（元）</td><td colspan="3">'+BasicJzfc.shbfzjtr+'</td><td></td><td colspan="3"></td></tr>' +
							'</table></div>');
					}
	        })
		}
	},
	drawEffectFinance: function(){	// 扶贫措施-金扶工程
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[17].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getloanbyid.do"),
				data: {huid:value},
				success: function(data){	
					if(data.series.length>0){
						var BasicValue = "";
						var circleGroup = "";
						
						for(var i = 0;i<data.series.length;i++){
							BasicValue = data.series[i];
							
							if(BasicValue.xm==null||BasicValue.xm==undefined){ BasicValue.xm = ""; }
							if(BasicValue.jdjg==null||BasicValue.jdjg==undefined){ BasicValue.jdjg = ""; }
							if(BasicValue.jdyt==null||BasicValue.jdyt==undefined){ BasicValue.jdyt = ""; }
							if(BasicValue.yll==null||BasicValue.yll==undefined){ BasicValue.yll = ""; }
							if(BasicValue.txje==null||BasicValue.txje==undefined){ BasicValue.txje = ""; }
							if(BasicValue.jdxydj==null||BasicValue.jdxydj==undefined){ BasicValue.jdxydj = ""; }
							if(BasicValue.yhzh==null||BasicValue.yhzh==undefined){ BasicValue.yhzh = ""; }
							if(BasicValue.jdje==null||BasicValue.jdje==undefined){ BasicValue.jdje = ""; }
							if(BasicValue.jdqx==null||BasicValue.jdqx==undefined){ BasicValue.jdqx = ""; }
							if(BasicValue.jdsj==null||BasicValue.jdsj==undefined){ BasicValue.jdsj = ""; }
							if(BasicValue.yqhkje==null||BasicValue.yqhkje==undefined){ BasicValue.yqhkje = ""; }
							
							circleGroup +='<tr><td>AN41a借（贷）款人姓名1</td><td>'+BasicValue.xm+'</td><td>AN41a-1银行账号</td><td>'+BasicValue.yhzh+'</td></tr>' +
							'<tr><td>AN41a-2借（贷）机构</td><td>'+BasicValue.jdjg+'</td><td>AN41a-3借（贷）金额（元）</td><td>'+BasicValue.jdje+'</td></tr>' +
							'<tr><td>AN41a-4借（贷）用途</td><td>'+BasicValue.jdyt+'</td><td>AN41a-5借（贷）期限</td><td>'+BasicValue.jdqx+'</td></tr>' +
							'<tr><td>AN41a-6月利率（占用费）（‰）</td><td>'+BasicValue.yll+'</td><td>AN41a-7借贷起止时间</td><td>'+BasicValue.jdsj+'</td></tr>' +
							'<tr><td>AN41a-8贴息金额（元）</td><td>'+BasicValue.txje+'</td><td>AN41a-9逾期还款金额（元）</td><td>'+BasicValue.yqhkje+'</td></tr>' +
							'<tr><td>AN41a-10借（贷）款人信用等级</td><td>'+BasicValue.jdxydj+'</td><td></td><td></td></tr>'
						}
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
								'<tr><th colspan="4">金融贷款支持状况（金扶工程）</th></tr>' +circleGroup +'</table></div>');
					}else{
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
								'<tr><th colspan="4">金融贷款支持状况（金扶工程）</th></tr>' +
								'<tr><td>AN41a借（贷）款人姓名1</td><td></td><td>AN41a-1银行账号</td><td></td></tr>' +
								'<tr><td>AN41a-2借（贷）机构</td><td></td><td>AN41a-3借（贷）金额（元）</td><td></td></tr>' +
								'<tr><td>AN41a-4借（贷）用途</td><td></td><td>AN41a-5借（贷）期限</td><td></td></tr>' +
								'<tr><td>AN41a-6月利率（占用费）（‰）</td><td></td><td>AN41a-7借贷起止时间</td><td></td></tr>' +
								'<tr><td>AN41a-8贴息金额（元）</td><td></td><td>AN41a-9逾期还款金额（元）</td><td></td></tr>' +
								'<tr><td>AN41a-10借（贷）款人信用等级</td><td></td><td></td><td></td></tr>' +
								'</table></div>');
					}
					}
	        })
		}
	},
	drawEffectAbilityPromotion: function(){	// 扶贫措施-能力提升
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[19].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getabilitypromotionbyid.do"),
				data: {huid:value},
				success: function(data){
					if(data.series.length>0){
						var BasicValue = "";
						var circleGroup = "";
						for(var i = 0;i<data.series.length;i++){
							BasicValue = data.series[i];
							
							if(BasicValue.pxrxm==null||BasicValue.pxrxm==undefined){ BasicValue.pxrxm = ""; }
							if(BasicValue.pxlx==null||BasicValue.pxlx==undefined){ BasicValue.pxlx = ""; }
							if(BasicValue.pxrq==null||BasicValue.pxrq==undefined){ BasicValue.pxrq = ""; }
							if(BasicValue.zjly==null||BasicValue.zjly==undefined){ BasicValue.zjly = ""; }
							if(BasicValue.sfjy==null||BasicValue.sfjy==undefined){ BasicValue.sfjy = ""; }
							if(BasicValue.zsbh==null||BasicValue.zsbh==undefined){ BasicValue.zsbh = ""; }
							if(BasicValue.wgqx==null||BasicValue.wgqx==undefined){ BasicValue.wgqx = ""; }
							if(BasicValue.pxxq==null||BasicValue.pxxq==undefined){ BasicValue.pxxq = ""; }
							if(BasicValue.pxjg==null||BasicValue.pxjg==undefined){ BasicValue.pxjg = ""; }
							if(BasicValue.pxzy==null||BasicValue.pxzy==undefined){ BasicValue.pxzy = ""; }
							if(BasicValue.zjje==null||BasicValue.zjje==undefined){ BasicValue.zjje = ""; }
							if(BasicValue.qzqk==null||BasicValue.qzqk==undefined){ BasicValue.qzqk = ""; }
							if(BasicValue.wgsj==null||BasicValue.wgsj==undefined){ BasicValue.wgsj = ""; }
							if(BasicValue.srqk==null||BasicValue.srqk==undefined){ BasicValue.srqk = ""; }
							
							circleGroup +='<tr><td>AN42a培训人姓名</td><td>'+BasicValue.pxrxm+'</td><td>AN42a_1培训需求</td><td>'+BasicValue.pxxq+'</td></tr>' +
								'<tr><td>AN42a-2培训类型</td><td>'+BasicValue.pxlx+'</td><td>AN42a-3教育培训机构</td><td>'+BasicValue.pxjg+'</td></tr>' +
								'<tr><td>AN42a-4培训起止日期</td><td>'+BasicValue.pxrq+'</td><td>AN42a-5教育培训专业（工种）</td><td>'+BasicValue.pxzy+'</td></tr>' +
								'<tr><td>AN42a-6资金来源</td><td>'+BasicValue.zjly+'</td><td>AN42a-7资金额度（元）</td><td>'+BasicValue.zjje+'</td></tr>' +
								'<tr><td>AN42a-8是否就业</td><td>'+BasicValue.sfjy+'</td><td>AN42a-9取证情况</td><td>'+BasicValue.qzqk+'</td></tr>' +
								'<tr><td>AN42a-10证书编号</td><td>'+BasicValue.zsbh+'</td><td>AN42a-11年务工时间（个月）</td><td>'+BasicValue.wgsj+'</td></tr>' +
								'<tr><td>AN42a-12就业（务工）去向</td><td>'+BasicValue.wgqx+'</td><td>AN42a-13收入情况（元/月）</td><td>'+BasicValue.srqk+'</td></tr>'
						}
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
								'<tr><th colspan="4">能力提升</th></tr>'+circleGroup +'</table></div>');
					}else{
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
								'<tr><th colspan="4">能力提升</th></tr>' +
								'<tr><td>AN42a培训人姓名</td><td></td><td>AN42a_1培训需求</td><td></td></tr>' +
								'<tr><td>AN42a-2培训类型</td><td></td><td>AN42a-3教育培训机构</td><td></td></tr>' +
								'<tr><td>AN42a-4培训起止日期</td><td></td><td>AN42a-5教育培训专业（工种）</td><td></td></tr>' +
								'<tr><td>AN42a-6资金来源</td><td></td><td>AN42a-7资金额度（元）</td><td></td></tr>' +
								'<tr><td>AN42a-8是否就业</td><td></td><td>AN42a-9取证情况</td><td></td></tr>' +
								'<tr><td>AN42a-10证书编号</td><td></td><td>AN42a-11年务工时间（个月）</td><td></td></tr>' +
								'<tr><td>AN42a-12就业（务工）去向</td><td></td><td>AN42a-13收入情况（元/月）</td><td></td></tr>' +
								'</table></div>');
					}
					}
	        })
		}
	},
	drawEffectSocialAssistance: function(){	// 扶贫措施-社会帮扶
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[21].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getsocialassistancebyid.do"),
				data: {huid:value},
				success: function(data){
					if(data.series.length>0){
						var BasicValue = "";
						var circleGroup = "";
						for(var i = 0;i<data.series.length;i++){
							BasicValue = data.series[i];
							
							if(BasicValue.bfdw==null||BasicValue.bfdw==undefined){ BasicValue.bfdw = ""; }
							if(BasicValue.jybf==null||BasicValue.jybf==undefined){ BasicValue.jybf = ""; }
							if(BasicValue.jybfzj==null||BasicValue.jybfzj==undefined){ BasicValue.jybfzj = ""; }
							if(BasicValue.bfwplb==null||BasicValue.bfwplb==undefined){ BasicValue.bfwplb = ""; }
							if(BasicValue.bfwpsl==null||BasicValue.bfwpsl==undefined){ BasicValue.bfwpsl = ""; }
							if(BasicValue.bfwpje==null||BasicValue.bfwpje==undefined){ BasicValue.bfwpje = ""; }
							
							circleGroup +='<tr><td>AN43a帮扶单位（帮扶人）1</td><td>'+BasicValue.bfdw+'</td><td>AN43a-3帮扶物品类别</td><td>'+BasicValue.bfwplb+'</td></tr>' +
								'<tr><td>AN43a-1教育帮扶（人）</td><td>'+BasicValue.jybf+'</td><td>AN43a-4数量（个、件、台、套）</td><td>'+BasicValue.bfwpsl+'</td></tr>' +
								'<tr><td>AN43a-2帮扶资金（元）</td><td>'+BasicValue.jybfzj+'</td><td>AN43a-5价值（元）</td><td>'+BasicValue.bfwpje+'</td></tr>' 
						}
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
								'<tr><th colspan="4">社会帮扶</th></tr>' + circleGroup+'</table></div>');
					}else{
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
								'<tr><th colspan="4">社会帮扶</th></tr>' +
								'<tr><td>AN43a帮扶单位（帮扶人）1</td><td></td><td>AN43a-3帮扶物品类别</td><td></td></tr>' +
								'<tr><td>AN43a-1教育帮扶（人）</td><td></td><td>AN43a-4数量（个、件、台、套）</td><td></td></tr>' +
								'<tr><td>AN43a-2帮扶资金（元）</td><td></td><td>AN43a-5价值（元）</td><td></td></tr>' +
								'</table></div>');
					}
				}
	        })
		}
	},
	drawEffectMove: function(){	// 扶贫措施-易地搬迁
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[23].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getrelocatebyid.do"),
				data: {huid:value},
				success: function(data){
					if(data.series!=null){
						var BasicValue = data.series;
						
						if(BasicValue.sfbq==null||BasicValue.sfbq==undefined){ BasicValue.sfbq = ""; }
						if(BasicValue.bqfs==null||BasicValue.bqfs==undefined){ BasicValue.bqfs = ""; }
						if(BasicValue.azd==null||BasicValue.azd==undefined){ BasicValue.azd = ""; }
						if(BasicValue.bqwt==null||BasicValue.bqwt==undefined){ BasicValue.bqwt = ""; }
						if(BasicValue.sfwcbq==null||BasicValue.sfwcbq==undefined){ BasicValue.sfwcbq = ""; }
						if(BasicValue.hjqk==null||BasicValue.hjqk==undefined){ BasicValue.hjqk = ""; }
						if(BasicValue.bqnd==null||BasicValue.bqnd==undefined){ BasicValue.bqnd = ""; }
						if(BasicValue.azfs==null||BasicValue.azfs==undefined){ BasicValue.azfs = ""; }
						if(BasicValue.yzfsfcc==null||BasicValue.yzfsfcc==undefined){ BasicValue.yzfsfcc = ""; }
						if(BasicValue.ytdqk==null||BasicValue.ytdqk==undefined){ BasicValue.ytdqk = ""; }
						
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
								'<tr><th colspan="4">易地搬迁</th></tr>' +
								'<tr><td>gA44 是否搬迁户</td><td>'+BasicValue.sfbq+'</td><td>AN44搬迁年度</td><td>'+BasicValue.bqnd+'</td></tr>' +
								'<tr><td>gA45 搬迁方式</td><td>'+BasicValue.bqfs+'</td><td>AN46安置方式</td><td>'+BasicValue.azfs+'</td></tr>' +
								'<tr><td>AN45安置地</td><td colspan="3">'+BasicValue.azd+'</td></tr>' +
								'<tr><td>gA49 搬迁可能存在的困难</td><td colspan="3">'+BasicValue.bqwt+'</td></tr>' +
								'<tr><td>AN47是否完成搬迁</td><td>'+BasicValue.sfwcbq+'</td><td>AN48原住房是否拆除</td><td>'+BasicValue.yzfsfcc+'</td></tr>' +
								'<tr><td>AN48a户籍是否迁移</td><td>'+BasicValue.hjqk+'</td><td>AN48b原承包土地情况</td><td>'+BasicValue.ytdqk+'</td></tr>' +
								'</table></div>');
					}else{
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
								'<tr><th colspan="4">易地搬迁</th></tr>' +
								'<tr><td>gA44 是否搬迁户</td><td></td><td>AN44搬迁年度</td><td></td></tr>' +
								'<tr><td>gA45 搬迁方式</td><td></td><td>AN46安置方式</td><td></td></tr>' +
								'<tr><td>AN45安置地</td><td colspan="3"></td></tr>' +
								'<tr><td>gA49 搬迁可能存在的困难</td><td colspan="3"></td></tr>' +
								'<tr><td>AN47是否完成搬迁</td><td></td><td>AN48原住房是否拆除</td><td></td></tr>' +
								'<tr><td>AN48a户籍是否迁移</td><td></td><td>AN48b原承包土地情况</td><td></td></tr>' +
								'</table></div>');
					}
				}
	        })
		}
	},
	drawEffectPoverty: function(){	// 扶贫措施-脱贫成效
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[25].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/geteffectbyid.do"),
				data: {huid:value},
				success: function(data){
					if(data.series!=null){
						var BasicValue = data.series;
						
						if(BasicValue.qsrjsr==null||BasicValue.qsrjsr==undefined){ BasicValue.qsrjsr = ""; }
						if(BasicValue.fcxms==null||BasicValue.fcxms==undefined){ BasicValue.fcxms = ""; }
						if(BasicValue.zxfpj==null||BasicValue.zxfpj==undefined){ BasicValue.zxfpj = ""; }
						if(BasicValue.tprjsr==null||BasicValue.tprjsr==undefined){ BasicValue.tprjsr = ""; }
						if(BasicValue.bhl==null||BasicValue.bhl==undefined){ BasicValue.bhl = ""; }
						if(BasicValue.ysr==null||BasicValue.ysr==undefined){ BasicValue.ysr = ""; }
						if(BasicValue.hyfpjj==null||BasicValue.hyfpjj==undefined){ BasicValue.hyfpjj = ""; }
						if(BasicValue.shbfj==null||BasicValue.shbfj==undefined){ BasicValue.shbfj = ""; }
						if(BasicValue.fczzze==null||BasicValue.fczzze==undefined){ BasicValue.fczzze = ""; }
						if(BasicValue.psjg==null||BasicValue.psjg==undefined){ BasicValue.psjg = ""; }
						if(BasicValue.lxdh==null||BasicValue.lxdh==undefined){ BasicValue.lxdh = ""; }
						
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_Poverty"><table>' +
								'<tr><th colspan="4">精准脱贫成效</th></tr>' +
								'<tr><td>AN49建档立卡起始家庭年人均可支配收入（元）</td><td>'+BasicValue.qsrjsr+'</td><td>AN49c行业扶贫资金（元）</td><td>'+BasicValue.hyfpjj+'</td></tr>' +
								'<tr><td>AN49a扶持项目数（个）</td><td>'+BasicValue.fcxms+'</td><td>AN49d社会帮扶资金（元）</td><td>'+BasicValue.shbfj+'</td></tr>' +
								'<tr><td>AN49b专项扶贫资金（元）</td><td>'+BasicValue.zxfpj+'</td><td>A49e扶持资金总额（元）</td><td>'+BasicValue.fczzze+'</td></tr>' +
								'<tr><td>AN50建档立卡脱贫家庭年人均可支配收入（元）</td><td>'+BasicValue.tprjsr+'</td><td></td><td></td></tr>' +
								'<tr><td>AN51变化量</td><td>'+BasicValue.bhl+'</td><td>AN52评审结果</td><td>'+BasicValue.psjg+'</td></tr>' +
								'<tr><td>AN53验收人</td><td>'+BasicValue.ysr+'</td><td>AN54联系电话</td><td>'+BasicValue.lxdh+'</td></tr>' +
								'</table></div>');
					}else{
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_Poverty"><table>' +
								'<tr><th colspan="4">精准脱贫成效</th></tr>' +
								'<tr><td>AN49建档立卡起始家庭年人均可支配收入（元）</td><td></td><td>AN49c行业扶贫资金（元）</td><td></td></tr>' +
								'<tr><td>AN49a扶持项目数（个）</td><td></td><td>AN49d社会帮扶资金（元）</td><td></td></tr>' +
								'<tr><td>AN49b专项扶贫资金（元）</td><td></td><td>A49e扶持资金总额（元）</td><td></td></tr>' +
								'<tr><td>AN50建档立卡脱贫家庭年人均可支配收入（元）</td><td></td><td></td><td></td></tr>' +
								'<tr><td>AN51变化量</td><td></td><td>AN52评审结果</td><td></td></tr>' +
								'<tr><td>AN53验收人</td><td></td><td>AN54联系电话</td><td></td></tr>' +
								'</table></div>');
					}
				}
	        })
		}
	},
	drawEffectHelper: function(){	// 扶贫措施-帮扶责任人
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[27].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getresponsiblebyid.do"),
				data: {huid:value},
				success: function(data){
					if(data.series!=null){
						var BasicValue = data.series;
						
						if(BasicValue.respon==null||BasicValue.respon==undefined){ BasicValue.respon = ""; }
						if(BasicValue.gbfdwmc==null||BasicValue.gbfdwmc==undefined){ BasicValue.gbfdwmc = ""; }
						if(BasicValue.rank==null||BasicValue.rank==undefined){ BasicValue.rank = ""; }
						if(BasicValue.gxb==null||BasicValue.gxb==undefined){ BasicValue.gxb = ""; }
						if(BasicValue.gbfkssj==null||BasicValue.gbfkssj==undefined){ BasicValue.gbfkssj = ""; }
						if(BasicValue.contactphone==null||BasicValue.contactphone==undefined){ BasicValue.contactphone = ""; }
						if(BasicValue.gzjh==null||BasicValue.gzjh==undefined){ BasicValue.gzjh = ""; }
						if(BasicValue.gbjssj==null||BasicValue.gbjssj==undefined){ BasicValue.gbjssj = ""; }
						if(BasicValue.gdwdz==null||BasicValue.gdwdz==undefined){ BasicValue.gdwdz = ""; }
						if(BasicValue.gzzmm==null||BasicValue.gzzmm==undefined){ BasicValue.gzzmm = ""; }
						if(BasicValue.glsgx==null||BasicValue.glsgx==undefined){ BasicValue.glsgx = ""; }
						
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_Helper"><table>' +
								'<tr><th colspan="8">帮扶责任人</th></tr>' +
								'<tr><td>帮扶责任人</td><td>'+BasicValue.respon+'</td><td>性別</td><td>'+BasicValue.gxb+'</td><td>证件号码</td><td>'+BasicValue.gzjh+'</td><td>政治面貌</td><td>'+BasicValue.gzzmm+'</td></tr>' +
								'<tr><td>帮扶单位名称</td><td>'+BasicValue.gbfdwmc+'</td><td>帮扶开始时间</td><td>'+BasicValue.gbfkssj+'</td><td>帮扶结束时间</td><td>'+BasicValue.gbjssj+'</td><td>隶属关系	</td><td>'+BasicValue.glsgx+'</td></tr>' +
								'<tr><td>职级</td><td>'+BasicValue.rank+'</td><td>联系电话</td><td>'+BasicValue.contactphone+'</td><td>单位地址</td><td colspan="3">'+BasicValue.gdwdz+'</td></tr>' +
								'</table></div>');
					}else{
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_Helper"><table>' +
								'<tr><th colspan="8">帮扶责任人</th></tr>' +
								'<tr><td>帮扶责任人</td><td></td><td>性別</td><td></td><td>证件号码</td><td></td><td>政治面貌</td><td></td></tr>' +
								'<tr><td>帮扶单位名称</td><td></td><td>帮扶开始时间</td><td></td><td>帮扶结束时间</td><td></td><td>隶属关系	</td><td></td></tr>' +
								'<tr><td>职级</td><td></td><td>联系电话</td><td></td><td>单位地址</td><td colspan="3"></td></tr>' +
								'</table></div>');
					}
				}
	        })
		}
	},
	drawEffecOperator: function(){	// 扶贫措施-操作人员
		var that = this;
		this.htmGroup.empty();
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;
		if(trNodeLi[29].className=="menuActive"){
			var value = $(".trColor").attr("value");
			$.ajax({
				type: "post",
				url: zhnx.resource.getUrl("poverty/persondetail/getoperatorbyid.do"),
				data: {huid:value},
				success: function(data){
					if(data.series!=null){
						var BasicValue = data.series;
						
						if(BasicValue.lrr==null||BasicValue.lrr==undefined){ BasicValue.lrr = ""; }
						if(BasicValue.shr==null||BasicValue.shr==undefined){ BasicValue.shr = ""; }
						if(BasicValue.fzld==null||BasicValue.fzld==undefined){ BasicValue.fzld = ""; }
						if(BasicValue.lrrlsfs==null||BasicValue.lrrlsfs==undefined){ BasicValue.lrrlsfs = ""; }
						if(BasicValue.shrlsfs==null||BasicValue.shrlsfs==undefined){ BasicValue.shrlsfs = ""; }
						if(BasicValue.fzldlsfs==null||BasicValue.fzldlsfs==undefined){ BasicValue.fzldlsfs = ""; }
						
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
								'<tr><th colspan="4">操作人员信息</th></tr>' +
								'<tr><td>AN55录入人</td><td>'+BasicValue.lrr+'</td><td>AN55a联系方式</td><td>'+BasicValue.lrrlsfs+'</td></tr>' +
								'<tr><td>AN56审核人</td><td>'+BasicValue.shr+'</td><td>AN56a联系方式</td><td>'+BasicValue.shrlsfs+'</td></tr>' +
								'<tr><td>AN57责任领导</td><td>'+BasicValue.fzld+'</td><td>AN57a联系方式</td><td>'+BasicValue.fzldlsfs+'</td></tr>' +
								'</table></div>');
					}else{
						that.htmGroup.append('<div class="scrollbar centerTable centerTable_many"><table>' +
								'<tr><th colspan="4">操作人员信息</th></tr>' +
								'<tr><td>AN55录入人</td><td></td><td>AN55a联系方式</td><td></td></tr>' +
								'<tr><td>AN56审核人</td><td></td><td>AN56a联系方式</td><td></td></tr>' +
								'<tr><td>AN57责任领导</td><td></td><td>AN57a联系方式</td><td></td></tr>' +
								'</table></div>');
					}
				}
	        })
		}
	},
	drawRightTable: function(num){		// 扶贫措施右边部分表格
		var that = this;
		this.htmGroup.attr("id","rightTable");
		$.ajax({
			type: "post",
			url: zhnx.resource.getUrl("poverty/persondetail/getpersondetailbyvillage.do"),
			data: {areaCode:num},
			success: function(data){		// 得到户的明细
				var tableTr = "";
				var dataHuId_0 = parseInt(data.series[0].huid);	// 户的第一个id
				for(var j=0;j<data.series.length;j++){
					var dataName = data.series[j].hzxm;		// 贫困姓名
					var dataPhoneNum = data.series[j].lxdh;	// 贫困电话
					var dataDf = data.series[j].pkzddf;		// 贫困得分
					var dataSx = data.series[j].pkhsx;		// 贫困属性
					var dataZpyy= data.series[j].zyzpyy;	// 贫困原因
					var dataHuId = data.series[j].huid;		// 户id
		
					if(data.series[j].lxdh==null){
						dataPhoneNum="";
					}else{
						dataPhoneNum = data.series[j].lxdh;	// 贫困电话
					}
					
					tableTr += '<tr value='+dataHuId+'><td>'+(j+1)+'</td><td>'+dataName+'</td><td>'+dataPhoneNum+'</td><td>'+dataSx+'</td><td>'+dataZpyy+'</td><td>'+dataDf+'</td></tr>' 
				}
				$(".scrollbar").remove();
				that.htmGroup.append('<div class="scrollbar"><table id="table">'+
					'<tr class="trClass"><th>序号</th><th>户主姓名</th><th>联系电话</th><th>贫困户属性</th><th>主要致贫原因</th><th>贫困诊断得分</th></tr>'+tableTr+'</table></div>');
				that.drawClickChange(dataHuId_0);
			}
		})
	},
	tableClick : function(valueId){
		$("#widgetTable_center").remove();	// 清除中间图表
		$("#widgetTable").remove();
		$("#table").find("tr:not(:first)").removeClass("trColor");
		$("#table").find("tr[value='"+valueId+"']").addClass("trColor");
// zhnx.centerObj.saveData = valueId ;
// center.initTablePage0(valueId);
		this.tableChangeValue(valueId)
		$(".main_with_table").find("li").removeClass("menuActive");
		$(".main_with_table").find("li:first").addClass("menuActive");
	},
	tableChangeValue: function(changeVal){
		
	},
	commandTableClick: function(commandArgs){
		
	},
	drawClickChange: function(HuId_0){		// 点击切换
		var that = this;
		var trNodeLi = ($(".main_with_table").children())[1].childNodes;	// 获取中间table的li
		var trNode = ($("#table").children())[0].childNodes;
		trNodeLi[1].className="menuActive";
		$("#widgetTable_center").remove();	// 清除中间图表
		$("#widgetTable").remove();
		trNode[1].className="trColor";
// zhnx.centerObj.saveData = HuId_0 ;
// center.initTablePage0(HuId_0);
		this.tableChangeValue(HuId_0)
		$("#table").find("tr:not(:first)").on("click", function(){
			var valueId = parseInt($(this).attr("value"));	// 点击获取对应的户的id
			that.tableClick(valueId);
			that.commandTableClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.tableClick('" + valueId + "')",
    			execMode: "evalfunc"
			});
		});
	},
	addScrollbarDrag: function(){//表格拖拽事件\滚动条
		var that = this;
		console.log("进入最外面")
		this.svg.append("svg").attr({
			"class":"dragRect",
			"width":this.width+"px",
			"height":this.height+"px",
			"background-color":"rgba(255,255,255,0.5)",
			"position":"relative",
			"top":0,
			"left":0
		})
		this.svg_g = $(".dragRect");
		this.topValue = parseInt(this.svg_g.css("top"));
		this.svg_g.on("drag",function(){
			that.getDrag();
//			    that.commandDragRectClick({
//	                type: 'drag',
//	                context: that.id,
//	                contextType: 'chaObj',
//	                execString: "that.getDrag()",
//	                execMode: "evalfunc"
//	            });
		})
	},
	getDrag: function(){
		var that = this;
		this.svg_g.on("mousedown",function(){
		    that.getMouseDown();
		});
	},
	getMouseDown: function(){
		var that = this;
//		var testTop,testLeft;
		 var evt=window.event||arguments[0];
		    this.testTop = evt.clientY-this.topValue;

		    this.svg_g.on("mousemove",function(){ 
		    	that.getMouseOver(); 
		    });
		    this.svg_g.on("mouseup",function(){ 
		    	that.getMouseUp(); 
		    });
		    this.svg_g.on("mouseout",function(){ 
		    	that.getMouseUp(); 
		    });
	},
	getMouseOver: function(){
		var that = this;
		var evt2=window.event||arguments[0];
	    var moveY = evt2.clientY;
	    this.svg_g.css("top",moveY-this.testTop);
	    topValue = parseInt(this.svg_g.css("top"));
	},
	getMouseUp: function(){
		var that = this;
		
	},
//	dragmove: function(dragRect){
//		var that = this;
//		console.log("进入具体")
//		console.log($(".scrollbar").scrollTop())
//		var rectText = "."+dragRect
////		d3.select(".dragRect").attr("x", 0).attr("y", d3.event.y)
////         console.log(d3.select(".dragRect").attr("y"))
//         d3.select(rectText).attr("x", 0).attr("y", d3.event.y);
//		var scrollTop = $(".scrollbar").scrollTop();
//		scrollTop=d3.select(rectText).attr("y");
//         console.log(d3.select(rectText).attr("y"))
//	},
	commandDragRectClick: function(commandArgs){
		
	},
	addData: function(series){
		var $table = this.htmGroup.find("table"), $tds = $table.find("tr:eq(0) td:gt(0)"), $trs = $table.find("tr");
		var that = this, key = series.key, data = series.data, blankColumnIdx = -1, blankRowIdx = -1;
		
		// 是否已存在
		$tds.each(function(i, d){
			if($(this).data("value") == key){
				blankColumnIdx = i + 1;
				return false;
			}
		});
		if(blankColumnIdx != -1){
			$trs.each(function(i, d){
				$(this).find("td:eq(" + blankColumnIdx + ")").removeClass("hasData").empty().data("value", "");
			});
			return false;
		}
		// 是否有空白
		if(blankColumnIdx == -1)
			$tds.each(function(i, d){
				if(!$(this).hasClass("hasData")){
					blankColumnIdx = i + 1;
					return false;
				}
			});
		// 如果不能插入数据
		if(blankColumnIdx == -1){
			alert("只支持5例分析");
			return false;
		}
		// 构建数据
		$trs.each(function(i, d){
			var $td = $(this).find("td:eq(" + blankColumnIdx + ")").addClass("hasData").empty();
			if(i == 0){
				$td.data("value", key);
				$td.append("<div class='close_box'><img src='" + zhnx.resource.getUrl("svg/ico/close.svg") + "' ></div>" + data[i]);
				$td.find(".close_box").data("value", key).on("click", function(){
					var value = $(this).attr("value");
					that.closeClick(value, blankColumnIdx);
					that.commandCloseClick({
		    			type: 'click',
		    			context: that.id,
		    			contextType: 'chaObj',
		    			execString: "that.closeClick('" + value + "'," + blankColumnIdx + ")",
		    			execMode: "evalfunc"
					});
				});
			}
			if(i != 0 && data[i] != undefined && data[i] != null){
				$td.append(data[i]);
			}
		});
	},
	clickDelete: function(key){
		
	},
	closeClick: function(value, blankColumnIdx){
		this.clickDelete(value);
		this.htmGroup.find("table").find("tr").each(function(){
			$(this).find("td:eq(" + blankColumnIdx + ")").removeClass("hasData").empty().data("value", "");
		});
	},
	commandCloseClick: function(commandArgs){
		
	}
});
// Q--edu-start
/**
 * 教育资源平台
 * 
 * @class zhnx.chart.eduAdmin
 */
zhnx.chart.eduResource = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduResource.prototype = $.extend({}, zhnx.chart.base,{
		constructor:zhnx.chart.eduResource,
		_defaults : {},	
		
		totalTitle:undefined,
		resourceData:undefined,
		
		padding:{top:50,right:20,bottom:20,left:20},
		color : ["#DC7512","white","#2DB0E6","#E69C16","#645336","#1A5B89"],
		outerRadius:undefined,	// 内圈
		innerRadius:undefined,
		innerRadiusTwo:undefined,	// 次外圈
		outerRadiusTwo:undefined,	// 次外圈
		gaugeCircleX:undefined,
		end_nei_1:undefined,
		end_nei_2:undefined,
		init: function(args){
			
			this.baseInit(args.selector);
			
			this.totalTitle = args.totalTitle;
			this.resourceData = args.resourceData;
			
			// this.svg =
			// zhnx.utils.transformD3dom(args.selector).append("svg").attr("width",
			// this.width).attr("height", this.height);
			this.outerRadius = this.width / 6;// 内圈
			this.innerRadius = this.width / 7;
			this.innerRadiusTwo = this.width / 6;// 次外圈
			this.outerRadiusTwo = this.width / 5.3;// 次外圈
			this.end_nei_1 = this.resourceData[0].value/this.resourceData[0].total;
			this.end_nei_2 = this.resourceData[1].value/this.resourceData[1].total;
			this.gaugeCircleX = d3.scale.linear().range([9*Math.PI/8,7*Math.PI/8+2*Math.PI]).domain([0,1]);
			this.drawImg=this.svg.append("g")
			.attr({
				"class": "drawImg",
				"width": this.width-this.padding.left-this.padding.right+"px",
				"height": this.height-this.padding.top-this.padding.bottom+"px",
				"transform":'translate('+this.padding.left+','+this.padding.top+')',
				"font-family": "黑体",
			})
		
			this.drawCircle=this.drawImg.append("g")
			.attr({
				"class": "drawCircle",
				"transform": 'translate('+this.width/2+','+(this.height-this.padding.top-this.padding.bottom)/1.35+')'
			})
			
			this.totalTitleText();	// 总标题
			this.smallTitleText();	// 小标题
			this.drawCircleAll();		// 绘制圆弧
			this.drawText();		// 绘制圆弧的文字
			this.taketurns();			// 重复调用
		},
		totalTitleText: function(){
			var that=this;
			
			var totalTitleGroup=this.drawImg.append("g")
		    .attr("class","totalTitleText");
			var totalTitleText=totalTitleGroup.append("text")
		    	.datum(this.totalTitle)
		    	.text(function(d){
		        return d;
		    	})
		    	.attr("fill",function(d){
		        return that.color[0];
		    	})
		    	.attr("font-size",Math.min(this.width,this.height)/15)
		    	.attr("font-weight","bold");
		},
		smallTitleText: function(){
			var that=this;
			
			var smallTitleGroup=this.drawImg.append("g")
			.attr({
				"class": "smallTitleText",
				"transform": 'translate('+0+','+this.padding.top+')'
			});

		var smallTitleText1=smallTitleGroup
		    .append("text")
		    .data(that.resourceData)
		    .text(function(d,i){return d.type;})
		    .attr({
		    	"fill": function(){return that.color[1];},
		    	"font-size": Math.min(this.width,this.height)/20,
		    	"font-weight": "bold"
		    });
		    

		var smallTitleText2=smallTitleGroup     // 电子课堂数字
		    .append("text")
		    .data(this.resourceData)
		    .text(function(d,i){return d.value;})
		    .attr({
		    	"fill": function(){ return that.color[2];},
		    	"font-size": Math.min(this.width,this.height)/15,
		    	"font-family": "黑体",
		    	"transform": 'translate('+this.padding.left*4.5+','+0+')'
		    });
		    

		var smallTitleText3=smallTitleGroup
		    .append("text")
		    .data(this.resourceData)
		    .text(function(d,i){return d.unit;})
		    .attr({
		    	"fill": function(){ return that.color[1];},
		    	"font-size": Math.min(this.width,this.height)/20,
		    	"font-family": "黑体",
		    	"transform": 'translate('+this.padding.left*8+','+0+')'
		    });

		// 右边文字
		var smallTitleText1_1=smallTitleGroup
		    .append("text")
		    .data(this.resourceData)
		    .text(function(d,i){return that.resourceData[1].type;})
		    .attr({
		    	"fill": function(){return that.color[1];},
			    "font-size": Math.min(this.width,this.height)/20,
			    "font-family": "黑体",
			    "transform": 'translate('+this.padding.left*10+','+0+')'
		    });

		var smallTitleText2_1=smallTitleGroup
		    .append("text")
		    .data(this.resourceData)
		    .text(function(d,i){return that.resourceData[1].value;})
		    .attr({
		    	"fill": function(){return that.color[3];},
		    	"font-size": Math.min(this.width,this.height)/15,
		    	 "font-family": "黑体",
		    	"transform": 'translate('+this.padding.left*13.5+','+0+')'
		    });

		var smallTitleText3_1=smallTitleGroup
		    .append("text")
		    .data(this.resourceData)
		    .text(function(d,i){return  that.resourceData[1].unit;})
		    .attr({
		    	"fill": function(){return that.color[1];},
		    	"font-size": Math.min(this.width,this.height)/20,
		    	"font-weight": "bold",
		    	"transform": 'translate('+this.padding.left*18+','+0+')'
		    });
		},
		drawCircleAll: function(){
			var that=this;
			
			this.drawCircle.selectAll("path").remove();
			this.drawCircle.selectAll("circle").remove();
			

		var myCircle=this.drawCircle.append("circle")    // 内层完整圆
			.attr({
				"r": this.innerRadius/1.2,
				"fill": "none",
				"stroke": function(d,i){return that.color[3];},
			    "stroke-width": 1,
			    "opacity": 0
			})
		    .transition()
		    .duration(800)
		    .attr("opacity",1);

		/*----第二圈----*/
		var circleTwo = d3.svg.arc()
		    .outerRadius(this.outerRadius)        // 设置外半径访问器
		    .innerRadius(this.innerRadius);

		drawCircleTwo=this.drawCircle.append("path")
			.attr({"fill": function(d,i){return that.color[5]}})
		    .transition()
		    .duration(800)
		    .attrTween('d', function () {
		    	var start = {
			            startAngle:9*Math.PI/8,
			            endAngle: 9*Math.PI/8
			        };
			        var finish={
			            startAngle:9*Math.PI/8,        // 设置开始角度访问器
			            endAngle:7*Math.PI/8+2*Math.PI       // 设置结束角度访问器
			        }
			        var i = d3.interpolate(start, finish);
			        return function (d) { return circleTwo(i(d));}
		    });
		
		// 第二圈数据上层
		drawCircleTwoTop=this.drawCircle.append("path")
		    .attr("fill",function(d,i){return that.color[2]})
		    .transition()
		    .duration(800)
		    .delay(300)
		    .attrTween('d', function () {
		        var start = {
		            startAngle:9*Math.PI/8,
		            endAngle: 9*Math.PI/8
		        };
		        var finish={
		            startAngle:9*Math.PI/8,        // 设置开始角度访问器
		            endAngle:that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total)       // 设置结束角度访问器
		        }
		        var i = d3.interpolate(start, finish);
		        return function (d) {return circleTwo(i(d));}
		    });

		/*----最外圈（黄色）----*/
		var circleThree = d3.svg.arc()
		    .outerRadius(this.outerRadiusTwo)        // 设置外半径访问器
		    .innerRadius(this.innerRadiusTwo);

		drawCircleTwo=this.drawCircle.append("path")
		    .attr("fill",function(d,i){return that.color[4]})
		    .transition()
		    .duration(800)
		    .attrTween('d', function () {
		        var start = {
		            startAngle:9*Math.PI/8,
		            endAngle: 9*Math.PI/8
		        };
		        var finish={
		            startAngle:9*Math.PI/8,        // 设置开始角度访问器
		            endAngle:7*Math.PI/8+2*Math.PI       // 设置结束角度访问器
		        }
		        var i = d3.interpolate(start, finish);
		        return function (d) {return circleThree(i(d));}
		    });

		// 最外圈数据上层
		drawCircleThreeTop=this.drawCircle.append("path")
		    .attr("fill",function(d,i){ return that.color[3]})
		    .transition()
		    .duration(800)
		    .delay(300)
		    .attrTween('d', function () {
		        var start = {
		            startAngle:9*Math.PI/8,
		            endAngle: 9*Math.PI/8
		        };
		        var finish={
		            startAngle:9*Math.PI/8,        // 设置开始角度访问器
		            endAngle:that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total)       // 设置结束角度访问器
		        }
		        var i = d3.interpolate(start, finish);
		        return function (d) { return circleThree(i(d));}
		    });

		/*----最内圈----*/
		var circleLi = d3.svg.arc()
		    .outerRadius(this.outerRadiusTwo/1.8)        // 设置外半径访问器
		    .innerRadius(this.innerRadiusTwo/2);

		drawCircleLi=this.drawCircle.append("path")
		    .attr("fill",function(d,i){ return that.color[3]})
		    .transition()
		    .duration(800)
		    .attrTween('d', function () {
		        var start = {
		            startAngle:9*Math.PI/8,
		            endAngle: 9*Math.PI/8
		        };
		        var finish={
		            startAngle:9*Math.PI/8,        // 设置开始角度访问器
		            endAngle:7*Math.PI/8       // 设置结束角度访问器
		        }
		        var i = d3.interpolate(start, finish);
		        return function (d) {return circleLi(i(d));}
		    });
		},
		drawText: function(){
			var that=this;
			this.drawCircle.select(".axis").remove();
			
			var axis = this.drawCircle
		    .append("g")
		    .attr("class", "axis");
			
			/* 圆内文字 */
			var circleText=axis.append("text")
			    .text("使用率")
			    .attr({
			    	"font-size": this.width/17,
			    	"fill": function(d,i){return that.color[1];},
				    "font-family": "黑体",
				    "text-anchor": "middle",
				    "dy": "0.35em",
				    "opacity": 0
			    })
			    .transition()
			    .duration(800)
			    .attr("opacity",1);
			/*-----------------------------------------------------------引出线*/
			
			// 内圈引出
			var axisLine=axis.append("line")
				.attr({
					"x1": this.innerRadius * Math.cos(this.gaugeCircleX(this.end_nei_1) - Math.PI / 2),
					"y1": this.innerRadius * Math.sin(this.gaugeCircleX(this.end_nei_1) - Math.PI / 2),// 起始x\y位置
					"class": "line",
					"stroke-width": "1px",
					"x2": function () { return that.innerRadius * Math.cos(that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total) - Math.PI / 2);},
					"y2": function () { return that.innerRadius * Math.sin(that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total) - Math.PI / 2);},
					"stroke": function () {return that.color[1]}
				})
			    .transition()
			    .duration(600)
			    .delay(800)
			    .attr({
			    	"x2": function () {return that.innerRadius *2* Math.cos(that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total)- Math.PI / 2);},
			    	"y2": function () {return that.innerRadius *2* Math.sin(that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total)- Math.PI / 2);}
			    });

			// 外圈引出
			var axisLineWai=axis.append("line")
				.attr({
					"x1": this.innerRadiusTwo * Math.cos(this.gaugeCircleX(this.resourceData[1].value/this.resourceData[1].total) - Math.PI / 2),
					"y1": this.innerRadiusTwo * Math.sin(this.gaugeCircleX(this.resourceData[1].value/this.resourceData[1].total) - Math.PI / 2),// 起始x\y位置
					"class": "line",
					"stroke-width": "1px",
					"x2": function () { return that.innerRadiusTwo * Math.cos(that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total) - Math.PI / 2);},
					"y2": function () { return that.innerRadiusTwo * Math.sin(that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total) - Math.PI / 2);},
					"stroke": function () {return that.color[1]}
				})
			    .transition()
			    .duration(600)
			    .delay(800)
			    .attr({
			    	"x2": function () { return that.innerRadius *2.3* Math.cos(that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total)- Math.PI / 2);},
			    	"y2": function () { return that.innerRadius *2.3* Math.sin(that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total)- Math.PI / 2);}
			    });


			// 内层引出圆
			var yinCiecleNei=axis
			    .selectAll("circle")
			    .data(this.resourceData)
			    .enter()
			    .append("circle")
			    .attr("fill",function(){return that.color[1]})
			    .attr("transform",'translate('+(this.innerRadius *2* Math.cos(this.gaugeCircleX(this.end_nei_1)- Math.PI / 2))+',' +
			        ''+(this.innerRadius *2* Math.sin(this.gaugeCircleX(this.end_nei_1)- Math.PI / 2))+')')
			    .transition()
			    .duration(600)
			    .delay(1000)
			    .attr("r",this.width/100+"px")

			// 外层引出圆
			var yinCiecleWai=axis.append("circle")
			    .attr("fill",function(d,i){return that.color[1]})
			    .attr("transform",'translate('+(this.innerRadius *2.3* Math.cos(this.gaugeCircleX(this.resourceData[1].value/this.resourceData[1].total)- Math.PI / 2))+',' +
			        ''+(this.innerRadius *2.3* Math.sin(this.gaugeCircleX(this.resourceData[1].value/this.resourceData[1].total)- Math.PI / 2))+')')
			    .transition()
			    .duration(600)
			    .delay(1000)
			    .attr("r",this.width/100+"px")

			// 内层引出百分比
			var yinTextNei_1=axis.append("text")
			    .text(function(d,i){
			        return parseFloat(that.resourceData[0].value/ that.resourceData[0].total).toFixed(3)*100+"%";
			    })
			    .attr({
			    	"font-size": this.width/25,
			    	"fill": function(d,i){return that.color[1];}
			    })
			    .attr("dx", function(){
			        if(that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total)/Math.PI*180< 360){
			            return "-0.5em";
			        }else{
			            return "0.5em";
			        }
			    })
			    .attr("dy",function(){
			        if(that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total)/Math.PI*180 == 360){
			            return "-0.5em";
			        }else{
			            return "1em";
			        }
			    })
			    .attr("transform",'translate('+(this.innerRadius *2* Math.cos(this.gaugeCircleX(this.end_nei_1)- Math.PI / 2))+',' +
			        ''+(this.innerRadius *2* Math.sin(this.gaugeCircleX(this.end_nei_1)- Math.PI / 2))+')')
			    .attr("opacity",0)
			    .transition()
			    .duration(500)
			    .delay(1000)
			    .attr("opacity",1);

			// 外层引出百分比
			var yinTextWai_1=axis.append("text")
			    .text(function(){return parseFloat(that.resourceData[1].value/ that.resourceData[1].total).toFixed(3)*100+"%"; })
			    .attr({
			    	"font-size": this.width/25,
			    	"fill": function(){return that.color[1];}
			    })
			    .attr("dx", function(){
			        if(that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total)/Math.PI*180< 360){
			            return "-0.5em";
			        }else{
			            return "0.5em";
			        }
			    })
			    .attr("dy",function(){
			        if(that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total)/Math.PI*180 == 360){
			            return "-0.5em";
			        }else{
			            return "1em";
			        }
			    })
			    .attr("transform",'translate('+(this.innerRadius *2.3* Math.cos(this.gaugeCircleX(this.end_nei_2)- Math.PI / 2))+',' +
			        ''+(this.innerRadius *2.3* Math.sin(this.gaugeCircleX(this.end_nei_2)- Math.PI / 2))+')')
			    .attr("opacity",0)
			    .transition()
			    .duration(500)
			    .delay(1000)
			    .attr("opacity",1);

			// 内层引出文字
			var yinTextNei=axis
			    .append("text")
			    .text(function(d,i){ return that.resourceData[0].type; })
			    .attr({
			    	"font-size": this.width/30,
			    	"fill": function(d,i){ return that.color[1];},
				    "dy": -this.width/25
			    })
			    .attr("transform",function(){
			         var r = 0;
			            if(that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total)/Math.PI*180 < 360 ){
			                r=180*((that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total)+Math.PI/2)/Math.PI);
			            }
			            else {
			                r =180*((that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total)-Math.PI/2)/Math.PI)
			            }
			        var weiZhi = 0;
			        if(that.gaugeCircleX(that.resourceData[0].value/that.resourceData[0].total)/Math.PI*180 < 360 ){
			            weiZhi= 'translate('+-that.innerRadiusTwo*2+','+0+')'
			        }
			        else {
			            weiZhi= 'translate('+that.innerRadiusTwo+','+0+')'
			        }
			        var translate =weiZhi;
			        var rotate = "rotate(" + r+ ")";
			        return  rotate + " " + translate;
			    })
			    .attr("opacity",0)
			    .transition()
			    .duration(500)
			    .delay(1000)
			    .attr("opacity",1);

			// 外层引出文字
			var yinTextWai=axis
			    .append("text")
			    .text(function(d,i){return that.resourceData[1].type;})
			    .attr({
			    	"font-size": this.width/30,
			    	"fill": function(d,i){ return that.color[1];},
				    "dy": -this.width/25
			    })
			    .attr("transform",function(){
			        var r = 0;
			        if(that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total)/Math.PI*180 < 360 ){
			            r=180*((that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total)+Math.PI/2)/Math.PI);
			        }
			        else {
			            r =180*((that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total)-Math.PI/2)/Math.PI)
			        }
			        var weiZhi = 0;
			        if(that.gaugeCircleX(that.resourceData[1].value/that.resourceData[1].total)/Math.PI*180 < 360 ){
			            weiZhi= 'translate('+-that.innerRadiusTwo*2+','+0+')'
			        }
			        else {
			            weiZhi= 'translate('+that.innerRadiusTwo*1.2+','+0+')'
			        }
			        var translate =weiZhi;
			        var rotate = "rotate(" + r+ ")";
			        return  rotate + " " + translate;
			    })
			    .attr("opacity",0)
			    .transition()
			    .duration(500)
			    .delay(1000)
			    .attr("opacity",1);

			/*--------------------------------------从圆心引出的线*/
			// 内圈引出
			var axisLine1=axis.append("line")
				.attr({
					"x1": 0,
					"y1": 0,// 起始x\y位置
					"class": "line",
					"stroke-width": "1px",
					"x2": function () { return 0;},
				    "y2": function () { return 0;},
				    "stroke": function () {return that.color[3]},
				    "stroke-width": "0.25px"
				})
			     .transition()
			     .duration(800)
			     .attr({
			    	 "x2": function () {return that.innerRadiusTwo/ 1.3*Math.cos(7*Math.PI/8-Math.PI/2);},
			    	 "y2": function () {return that.innerRadiusTwo/1.3* Math.sin(7*Math.PI/8-Math.PI/2);}
			     })

			var axisLine2=axis.append("line")
				.attr({
					"x1": 0,
					"y1": 0,// 起始x\y位置
					"class": "line",
					"stroke-width": "1px",
					"x2": function () { return 0;},
				    "y2": function () { return 0;},
				    "stroke": function () {return that.color[3]},
				    "stroke-width": "0.25px"
				})
			    .transition()
			     .duration(800)
			     .attr({
			    	 "x2": function () { return that.innerRadiusTwo/ 1.3*Math.cos(9*Math.PI/8-Math.PI/2);},
			    	 "y2": function () { return that.innerRadiusTwo/1.3* Math.sin(9*Math.PI/8-Math.PI/2);}
			     });
		},
		repaint:function(){
			var that=this;
			
				that.drawCircleAll();
				that.drawText();
		}	
})// 教育资源平台结束


/**
 * 宽带网络建设
 * 
 * @class zhnx.chart.eduAdmin
 */
zhnx.chart.eduKuanDai = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduKuanDai.prototype = $.extend({}, zhnx.chart.base,{
		constructor:zhnx.chart.eduKuanDai,
		_defaults : {},	
		
		totalTitle:undefined,
		dataKuanDai:undefined,
		
		color:["#DC7512","white","#2DB0E6","#E69C16","#1E6999","#1A5B89","rgba(45,176,230,.7)","rgba(250,250,250,.5)"],
		padding:{top:50,right:20,bottom:20,left:20},
		gaugeCircleX:undefined,
		outerRadiusHalf:undefined,
		innerRadiusHalf:undefined,
		innerRadiusRightNei:undefined,// 最内层
		outerRadiusRightNei:undefined,// 最外层\透明层的外径
		outerRadiusRightWai:undefined,// 最外层
		innerRadiusRightWai:undefined,// 最外层
		innerRadiusRightTou:undefined,// 透明内层
		outerRadiusMid:undefined,// 最外层
		innerRadiusMid:undefined,// 最外层
		testNum:1,
		centerText_0:undefined,
		centerText_1:undefined,
		centerText_2:undefined,
		circleEndDeg:undefined,
		init: function(args){
			this.baseInit(args.selector);
			
			this.totalTitle=args.totalTitle;
			this.dataKuanDai=args.dataKuanDai;
			
			this.gaugeCircleX = d3.scale.linear().range([0,2*Math.PI]).domain([0,1]);
			this.outerRadiusHalf = this.width / 22;
			this.innerRadiusHalf = this.width / 22+0.01;
			this.innerRadiusRightNei=this.width / 8;		// 最内层
			this.outerRadiusRightNei=this.width / 6.8;	// 最外层\透明层的外径
			this.outerRadiusRightWai=this.width / 5.5;	// 最外层
			this.innerRadiusRightWai=this.width / 5;		// 最外层
			this.innerRadiusRightTou=this.width / 9;		// 透明内层
			this.outerRadiusMid=this.width / 5.8;			// 最外层
			this.innerRadiusMid=this.width / 6.3;			// 最外层
		
			
			this.drawImg=this.svg.append("g")
			.attr({
				"class": "drawImg",
				"width": this.width-this.padding.left-this.padding.right+"px",
				"height": this.height-this.padding.top-this.padding.bottom+"px",
				"transform": 'translate('+this.padding.left+','+this.padding.top+')'
			});
					
			this.drawTotalTitle();		// 绘制总标题
			this.drawNav(1);			// 绘制左侧导航部分文字
			this.drawRightText();		// 绘制右侧圆环文字
			this.drawRightCircle(1);	// 绘制右侧圆环
			this.drawBottom(1);			// 绘制下面的部分
			this.taketurns(1);				// 从导航第一个开始
			
		},
		drawTotalTitle: function(){
			var that=this;
			
			var totalTitleGroup=this.drawImg.append("g")
		    .attr("class","totalTitleText");
			
		var totalTitleText=totalTitleGroup.append("text")
		    .datum(this.totalTitle)
		    .text(function(d){ return d;})
		    .attr({
		    	"fill": function(d){ return that.color[0];},
			    "font-size": Math.min(this.width,this.height)/15,
			    "font-family": "黑体"
		    });
		},
		drawNav: function(circleNum){
			var that=this;
			
			this.svg.selectAll("defs").remove(); // 重复调用前清除
			this.drawImg.selectAll(".navTextG").remove();
			this.centerText_0=this.dataKuanDai[circleNum].data[0];
			this.centerText_2=this.dataKuanDai[circleNum].data[2];
			this.centerText_1=this.dataKuanDai[circleNum].data[1];
			this.circleEndDeg=this.centerText_0 / this.centerText_1;
			
			var navTextG=this.drawImg.append("g")
			.attr({
				"class": "navTextG",
				"transform": 'translate('+this.width/5+','+this.height/6+')'
			});
			
		// 文字
		    d3.select(".navTextLeft").remove("fill")
		    
		var navTextLeft=navTextG
		    .selectAll("text")
		    .data(this.dataKuanDai)
		    .enter()
		    .append("text")
		    .text(function(d,i){return d.type;})
		    .attr({
		    	"class": "navTextLeft",
		    	"dy": function(d,i){ return that.padding.left*1.5*i;},
			    "font-size": Math.min(this.width,this.height)/20,
			    "transform": 'translate('+-this.padding.left/3+','+0+')'
		    })
		    .attr("fill",function(d,i){
		        if(i==circleNum){
		            return that.color[3];
		        }else{
		            return that.color[1];
		        }
		    })
		    .on("click",function(d,i){
		    	that.drawNav(i);
		        that.drawRightText(i);
		        that.drawRightCircle(i);
		        that.drawBottom(i);
		    })


		// 小圆点
		var circleHalfAll = d3.svg.arc()
		    .startAngle(this.gaugeCircleX(0.5))        // 设置开始角度访问器
		    .endAngle(this.gaugeCircleX(1))
		    .outerRadius(this.outerRadiusHalf)        // 设置外半径访问器
		    .innerRadius(this.innerRadiusHalf);
		    
		var circleHalf1=circleHalfAll
		    .outerRadius(this.outerRadiusHalf)        // 设置外半径访问器
		    .innerRadius(this.innerRadiusHalf)

		// 小圆点前面的半圆
		var defsCircle=this.svg.append("defs")
		    .append("g")
		    .attr("id","defsCircle")
		    .append("path")
		    .attr("d",circleHalf1)
		    .attr({
		    	"fill": "none",
		    	"stroke": function(d,i){ return that.color[7]; }
		    });
		    

		// 1圈
		var navCircle1=navTextG
		    .append("g")
		    .attr("class","navCircle")
		    .append("use")
		    .attr("xlink:href","#defsCircle")
		    .attr("y",function(d,i){ return that.padding.left/4;})
		    .attr("transform",function (d, i) {
		        var translate = "translate(" +-that.padding.left+ ", " + -that.padding.left/15+ ")";
		        return  translate;
		    })
		// 2圈
		    var navCircle2=navTextG
		        .append("g")
		        .attr("class","navCircle")
		        .append("use")
		        .attr("xlink:href","#defsCircle")
		        .attr("y",function(d,i){ return that.padding.left/1.7;})
		        .attr("transform",function (d, i) {
		            var translate = "translate(" +-that.padding.left+ ", " + -that.padding.left/10+ ")";
		            var scale = 'scale('+1.8+','+1.8+')';
		            return  translate+''+scale;
		        })
		// 3圈
		    var navCircle3=navTextG
		        .append("g")
		        .attr("class","navCircle")
		        .append("use")
		        .attr("xlink:href","#defsCircle")
		        .attr("y",function(d,i){ return that.padding.left/1.35;})
		        .attr("transform",function (d, i) {
		            var translate = "translate(" +-that.padding.left+ ", " + -that.padding.left/10+ ")";
		            var scale = 'scale('+2.6+','+2.6+')';
		            return  translate+''+scale;
		        })
		// 4圈
		    var navCircle4=navTextG
		        .append("g")
		        .attr("class","navCircle")
		        .append("use")
		        .attr("xlink:href","#defsCircle")
		        .attr("y",function(d,i){ return that.padding.left/1.35;})
		        .attr("transform",function (d, i) {
		            var translate = "translate(" +-that.padding.left+ ", " + -that.padding.left/10+ ")";
		            var scale = 'scale('+3.4+','+3.4+')';
		            return  translate+''+scale;
		        })
		    // 5圈
		    var navCircle5=navTextG
		        .append("g")
		        .attr("class","navCircle")
		        .append("use")
		        .attr("xlink:href","#defsCircle")
		        .attr("y",function(d,i){  return that.padding.left/1.25;})
		        .attr("transform",function (d, i) {
		            var translate = "translate(" +-that.padding.left+ ", " + -that.padding.left/10+ ")";
		            var scale = 'scale('+4.2+','+4.2+')';
		            return  translate+''+scale;
		        });
		    
		// 文字前面的圆点
		var navTextCircle=navTextG
		    .selectAll("circle")
		    .data(this.dataKuanDai)
		    .enter()
		    .append("circle")
		    .attr("r",function(d,i){
		        if(i==0||i==6){
		            return 0;
		        }else{
		            return that.width/120+"px";
		        }
		    })
		    .attr({
		    	"cy": function(d,i){  return that.padding.left*1.5*i; },
		    	"cx": -this.padding.left/2,
		    	"fill": function(d,i){  return that.color[3];},
		    	"transform": 'translate('+-this.padding.left/2+','+-this.padding.left/3+')'
		    });		
		},
		drawRightText: function(){
			var that=this;
			
			this.drawImg.selectAll(".circleRight").remove();
			
			var circleRight=this.drawImg.append("g")
			.attr({
				"class": "circleRight",
				"transform": 'translate('+this.width/3+','+this.padding.top/1.5+')'
			});

		/*----------------右侧文字(网络覆盖率)----------*/
		var circleRightText=circleRight.append("text")
		    .text(function(d,i){ return that.dataKuanDai[0].title;})
		    .attr({
		    	"font-size": this.width/20,
		    	"fill": function(){ return that.color[1];},
				 "font-weight": "bold",
				 "text-anchor": "middle",
				 "transform": 'scale('+0+','+0+')'
		    })
		    .transition()
		    .duration(1000)
		    .delay(500)
		    .attr("transform",'scale('+1+','+1+')')

		/*-------------------------------------绘制引出线-----*/
		/*----绘制斜线*/
		var lineXie=circleRight.append("line")
			.attr({
				"x1": 85,
				"y1": 10,// 起始x\y位置
				"class": "line",
				"x2": 100,
				"y2": 40,
				"stroke":  function(){ return that.color[2]  },
			    "stroke-width": "1px",
			    "fill": "none",
			    "opacity": 0
			})
		    .transition()
		    .duration(800)
		    .delay(200)
		    .attr("opacity",1)
		/*-------绘制横线1--*/
		var lineHeng1=circleRight.append("line")
			.attr({
				"x1": 85,
				"y1": 10,// 起始x\y位置
				"class": "line",
				"x2": -60,
				"y2": 10,
				"stroke": function(){ return that.color[2]},
			    "stroke-width": "1px",
			    "fill":"none",
			    "opacity":0
			})
		    .transition()
		    .duration(800)
		    .delay(200)
		    .attr("opacity",1)
		/*-------绘制横线2--*/
		var lineHeng2=circleRight.append("line")
			.attr({
				"x1": 65,
				"y1": 15,// 起始x\y位置
				"class": "line",
				"x2": -80,
				"y2": 15,
				"stroke": function(){ return that.color[2] },
			    "stroke-width": "1px",
			    "fill": "none",
			    "opacity": 0
			})
		    .transition()
		    .duration(800)
		    .delay(200)
		    .attr("opacity",1)
		},
		drawRightCircle: function(circleNum){
			var that=this;
			this.drawImg.selectAll(".rightCircle").remove();
			
			var pie = d3.layout.pie();// 定义饼图布局方式的域
			var testData=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
			var circleRightImg=this.drawImg.append("g")
			    .attr("class","rightCircle")
			    .attr("transform","translate("+this.width/1.4+","+(this.height-this.padding.top-this.padding.bottom)/2+")");

			/* 绘制底层圆 */
			var arc = d3.svg.arc()
			    .innerRadius(this.innerRadiusRightNei)
			    .outerRadius(this.outerRadiusRightNei)

			var arcs = circleRightImg.selectAll("g")
			    .data(pie(testData))
			    .enter()
			    .append("g")
			    .each(function(d){
			        var padding = 0.01;
			        d.startAngle += padding;
			        d.endAngle -= padding;
			    })

			arcs.append("path")
			    .attr("fill",function(){ return that.color[4]})
			    .attr("d",function(d){
			        var padding = 0.01  ;
			        d.startAngle += padding;
			        d.endAngle -= padding;
			        return arc(d);
			    })
			    .attr("opacity",0)
			    .transition()
			    .duration(800)
			    .attr("opacity",1)

			/*-----最外层圆-----*/
			var circleWai=d3.svg.arc()
			    .startAngle(this.gaugeCircleX(0))        // 设置开始角度访问器
			    .outerRadius(this.outerRadiusRightWai)        // 设置外半径访问器
			    .innerRadius(this.innerRadiusRightWai);

			var drawCircleWai=circleRightImg.append("path")
			    .attr("fill",function(d,i){ return that.color[2] })
			    .transition()
			    .duration(800)
			    .attrTween("d", function(d) {            // 插值
			        return function(t) {
			            circleWai.endAngle( that.gaugeCircleX(1) * t);
			            return circleWai();
			        };
			    });
			
			        /*-------------------------------绘制透明层-----------*/
			        var circleTouMing = d3.svg.arc()
			            .startAngle(this.gaugeCircleX(0))        // 设置开始角度访问器
			            .outerRadius(this.outerRadiusRightNei)        // 设置外半径访问器
			            .innerRadius(this.innerRadiusRightTou);
			        
			        var drawCircleTouMing = circleRightImg.append("path")
			            .data(this.dataKuanDai)
			            .attr("fill", function (d, i) { return that.color[6] })
			            .transition()
			            .duration(800)
			            .attrTween("d", function (d, i) {            // 插值
			                return function (t) {
			                    circleTouMing.endAngle(that.gaugeCircleX(that.circleEndDeg) * t);
			                    return circleTouMing();
			                };
			            });


			        /*-------------------绘制中间层-----------*/
			        var circleMid = d3.svg.arc()
			            .startAngle(this.gaugeCircleX(0))        // 设置开始角度访问器
			            .outerRadius(this.outerRadiusMid)        // 设置外半径访问器
			            .innerRadius(this.innerRadiusMid);

			        var drawCircleMid = circleRightImg.append("path")
			            .data(this.dataKuanDai)
			            .attr("fill", function (d, i) { return that.color[5] })
			            .transition()
			            .duration(800)
			            .attrTween("d", function (d, i) {            // 插值
			                return function (t) {
			                    circleMid.endAngle(that.gaugeCircleX(that.circleEndDeg) * t);
			                    return circleMid();
			                };
			            });

			        /*------------------------绘制中心文字---------*/
			        var rightCircleText = circleRightImg.append("text")
			            .data(this.dataKuanDai)
			            .text(function (d, i) {
			                return parseFloat(that.circleEndDeg * 100).toFixed(1)
			            })
			            .attr({
			            	"font-size": this.width / 12,
			            	"fill": function () {  return that.color[2];},
				            "font-familt": "黑体",
				            "text-anchor": "end",
				            "y": this.padding.top / 4,
				            "x": this.padding.left * 1.3,
				            "opacity": 0
			            })
			            .transition()
			            .duration(500)
			            .delay(600)
			            .attr("opacity", 1)

			        var rightCircleText_1 = circleRightImg.append("text")
			            .text("%")
			            .attr({
			            	"font-size": this.width / 18,
			            	"fill": function () {  return that.color[4];},
				            "font-weight": "bold",
				            "text-anchor": "end",
				            "y": -this.padding.top / 3,
				            "x": this.padding.left * 2,
				            "opacity": 0
			            })
			            .transition()
			            .duration(500)
			            .delay(600)
			            .attr("opacity", 1)

			        /*-----------------------------绘制圆环上的矩形-----*/
			        var axis = circleRightImg
			            .append("g")
			            .attr("class", "axis");
			        /*-----开始矩形---*/
			        axis.append("line")
			        	.attr({
			        		"x1": this.outerRadiusRightNei * Math.cos(0 - Math.PI / 2),
			        		"y1": this.outerRadiusRightNei * Math.sin(0 - Math.PI / 2)// 起始x\y位置
			        	})
			            .transition()
			            .duration(500)
			            .delay(300)
			            .attr({
			            	"x2": function () { return that.outerRadiusMid * Math.cos(0 - Math.PI / 2);},
			            	"y2": function () { return that.outerRadiusMid * Math.sin(0 - Math.PI / 2);},
			            	"class": "line",
			            	"stroke": function () { return that.color[1]},
				            "stroke-width": "2px"
			            });


			        /*-----结束矩形---*/
			        var myRecrAxis=axis.append("line")
			        	.attr({
			        		"x1": this.outerRadiusRightNei * Math.cos(this.gaugeCircleX(this.centerText_0 / this.centerText_1) - Math.PI / 2),
			        		"y1": this.outerRadiusRightNei * Math.sin(this.gaugeCircleX(this.centerText_0 / this.centerText_1) - Math.PI / 2),// 起始x\y位置
			        	})
			            .transition()
			            .duration(500)
			            .delay(300)
			            .attr({
			            	"x2": function () { return that.outerRadiusMid * Math.cos(that.gaugeCircleX(that.circleEndDeg) - Math.PI / 2);},
				            "y2": function () {  return that.outerRadiusMid * Math.sin(that.gaugeCircleX(that.circleEndDeg) - Math.PI / 2);},
				            "class": "line",
				            "stroke": function () { return that.color[1] },
				            "stroke-width": "2px"
			            });
			
		},
		drawBottom: function(circleNum){
			var that=this;
			
			this.svg.selectAll(".rectBottom").remove();
			
			  var rectBottom=this.svg.append("g")
		        .attr("class","rectBottom")
		        .attr("transform","translate("+(this.padding.left*2)+","+(this.height-this.padding.top/1.3)+")");
		
			  // 设置x线性比例尺
		    var myXScale=d3.scale.linear()
		        .domain([0,this.centerText_0])
		        .range([this.width-this.padding.left-this.padding.right,0]);

		// 绘制底层的矩形（完全填充）
		    var rectBottomNei=rectBottom
		        .append("rect")
		        .attr({
		        	"class": "myRect",
		        	"width": this.width-this.padding.right*2-this.padding.left*2,
		        	"height": (this.height-this.padding.top-this.padding.bottom)/12,// 矩形间的间距+高度
		        	"rx": (this.height-this.padding.top-this.padding.bottom)/24,
		        	"fill": function(d,i){ return that.color[4]}
		        });

		// 绘制完全填充外面的层
		    var rectBottomWai=rectBottom
		        .append("rect")
		        .attr({
		        	"class": "myRect",
		        	"width": this.width-this.padding.right*2-this.padding.left*2+8,
		        	"height": (this.height-this.padding.top-this.padding.bottom+108)/12,// 矩形间的间距+高度
		        	"rx": (this.height-this.padding.top-this.padding.bottom+96)/24,
		        	"fill": "none",
		        	"stroke": function(){ return that.color[3] },
			        "stroke-width": "1px",
			        "y": -4,
			        "x": -4
		        });

		// 上层的数据条（变化）
		    var rectTop=rectBottom
		        .append("rect")
		        .attr({
		        	"class": "myRectTop",
		        	"height": (this.height-this.padding.top-this.padding.bottom)/12,// 矩形间的间距+高度
		        	"rx": (this.height-this.padding.top-this.padding.bottom)/24,
		        	"fill": function(){ return that.color[3] }
		        });

		    rectTop
		        .attr("width",0)
		        .transition()
		        .duration(800)
		        .attr("width",function(){  return that.width-that.padding.right-that.padding.left- myXScale(that.dataKuanDai[circleNum].data[2]); })
		    /*---------------------------矩形文字*/
		    var rectTextBot=rectBottom.append("text")
		        .text("使用率")
		        .attr({
		        	"font-size": rectTop.attr("height")/1.5,
		        	"fill": function(){ return that.color[1];},
			        "font-weight": "bold",
			        "opacity": 0
		        })
		        .attr("transform",'translate('+((this.width-this.padding.right-this.padding.left- myXScale(this.centerText_2))/2)+','+(rectTop.attr("height")/1.5)+')')
		        .transition()
		        .duration(500)
		        .delay(800)
		        .attr("opacity",1)

		    /*------------------------------------绘制圆球*/
		// 绘制填充完整的圆球
		    var endCircleNei=rectBottom.append("circle")
		    	.attr({
		    		"r": rectTop.attr("height"),
		    		"fill": rectTop.attr("fill"),
		    		"transform": 'translate('+0+','+(rectTop.attr("height")/2)+')'
		    	})
		        .transition()
		        .duration(800)
		        .attr("transform",'translate('+((this.width-this.padding.right-this.padding.left- myXScale(this.centerText_2)))+','+(rectTop.attr("height")/2)+')')

		// 绘制填充圆球外面部分
		    var endCircleWai=rectBottom.append("circle")
		    	.attr({
		    		"r": rectTop.attr("height")*1.15,
		    		"fill": "none",
		    		"stroke": rectTop.attr("fill"),
		    		"stroke-width": "1px",
		    		"transform": 'translate('+0+','+(rectTop.attr("height")/2)+')'
		    	})
		        .transition()
		        .duration(800)
		        .attr("transform",'translate('+((this.width-this.padding.right-this.padding.left- myXScale(this.centerText_2)))+','+(rectTop.attr("height")/2)+')')

		    /*-----------------------------------------绘制圆球中的文字*/
		    var rectBottomText=rectBottom.append("text")
		        .text(function(){
		            return parseFloat(that.dataKuanDai[circleNum].data[2]/that.dataKuanDai[circleNum].data[0]).toFixed(3)*100
		        })
		        .attr({
		        	"font-size": rectTop.attr("height")/1.5,
		        	"fill": function(){ return that.color[1];},
			        "font-family": "黑体",
			        "text-anchor": "middle",
			        "opacity": 0
		        })
		        .attr("transform",'translate('+((this.width-this.padding.right-this.padding.left- myXScale(this.centerText_2))-5)+','+(rectTop.attr("height")/1.3)+')')
		        .transition()
		        .duration(500)
		        .delay(800)
		        .attr("opacity",1)

		// 绘制百分号
		    var rectBottomText_1=rectBottom.append("text")
		        .text("%")
		        .attr({
		        	"font-size": rectTop.attr("height")/3,
		        	"fill": function(){ return that.color[1]; },
			        "text-anchor": "middle",
			        "opacity": 0
		        })
		        .attr("transform",'translate('+((this.width-this.padding.right-this.padding.left- myXScale(this.centerText_2))*1.06)+','+(rectTop.attr("height")/3)+')')
		        .transition()
		        .duration(500)
		        .delay(800)
		        .attr("opacity",1)
		},
		repaint: function(){
			var that=this;
			
				that.testNum=++that.testNum;
				if(that.testNum>5){
					that.testNum=1;
				}else{
					that.testNum;
				}
				that.drawNav(that.testNum);
		        that.drawRightText();
		        that.drawRightCircle(that.testNum);
		        that.drawBottom(that.testNum);
		}
		
})// 绘制宽带网络建设结束


/**
 * 残疾学生地区对比分析
 * 
 * @class zhnx.chart.eduAdmin
 */
zhnx.chart.eduCanJi = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduCanJi.prototype = $.extend({}, zhnx.chart.base,{
		constructor:zhnx.chart.eduCanJi,
		_defaults : {},	
		
		dataCanJi:undefined,
		totalTitle:undefined,
		tuTlTitle:undefined,
		
		color:["#DC7512","rgba(255,255,255,.7)","#FDAB01","#05A8F7","#5D5D5D"],
		padding:{top:50,right:20,bottom:20,left:20},
		yScaleRight:undefined,	// 右侧y轴比例尺
		largeNumUnit:3000,		// y轴左侧值域
		yScale:undefined,		// y轴左侧比例尺
		xScale:undefined,		// x轴
		totalNum:[],
		dataLength:undefined,
		maxNum:undefined,
		city:undefined,
		
		formatAsPercentage:undefined,	// 设置右侧Y轴坐标格式
		formaLeft:undefined,			// 设置左侧Y轴坐标格式
		init: function(args){
			this.baseInit(args.selector)
			
			this.dataCanJi=args.dataCanJi;
			this.totalTitle=args.totalTitle;
			this.tuTlTitle=args.tuTlTitle;
			this.city=args.city;
			
			this.yScale = d3.scale.linear()
		    .domain([this.largeNumUnit,0])
		    .range([0,(this.height-this.padding.top-this.padding.bottom*3.5)]);
			this.formatAsPercentage=d3.format(".2%");
			this.formaLeft = d3.format("1000");
			this.drawImg=this.svg.append("g")
			.attr({
				"class": "drawImg",
				"width": this.width-this.padding.left-this.padding.right+"px",
				"height": this.height-this.padding.top-this.padding.bottom+"px",
				"transform": 'translate('+this.padding.left+','+this.padding.top/2+')'
			});
		
		    this.drawXian=this.drawImg.append("g").attr("class", "drawXian")
		    	.attr("transform",'translate('+0+','+(this.padding.top/2)+')')

			for(var a=0;a<this.dataCanJi.length;a++){  // 获取百分比的数组
			    this.totalNum.push(this.dataCanJi[a].data[1]);
			}
			this.maxNum=d3.max(this.totalNum);

			this.yScaleRight = d3.scale.linear()
		    .domain([this.maxNum/100,0])
		    .range([0,(this.height-this.padding.top-this.padding.bottom*3.5)]);
			
			this.xScale = d3.scale.ordinal().domain(this.city).rangePoints([this.padding.left, this.width-this.padding.right]);
			
			this.drawTotalTitle();
			this.drawTuLi();
			this.drawZheXian();
			this.drawHengXian();
			this.drawJuXing();
			this.drawScale();
			this.drawDanWei();
			this.taketurns();
		},
		drawTotalTitle: function(){
			var that=this;
			
			var totalTitleGroup=this.drawImg.append("g")
		    .attr("class","totalTitleText");
		var totalTitleText=totalTitleGroup.append("text")
		    .datum(this.totalTitle)
		    .text(function(d){ return d;})
		    .attr({
		    	"fill": function(d,i){ return that.color[0];},
			    "font-size": Math.min(this.width,this.height)/15,
			    "font-family": "黑体"
		    });
		},
		drawTuLi: function(){
			var that=this;
			
			var drawTuLi=this.drawImg.append("g")
		    .attr("class",drawTuLi)
		    .attr("transform",'translate('+this.width/1.7+','+this.padding.top/2+')');

		var drawTuLiImgAll=drawTuLi.append("g")
		    .attr("fill",function(d,i){  return that.color[2];});

		var drawTuLiImgCir=drawTuLiImgAll.append("circle")
		    .attr("r",this.padding.left/4+"px");
		
		var drawTuLiImgLine=drawTuLiImgAll.append("line")
			.attr({
				"x1": -this.padding.left*1.5,
				"x2": this.padding.left*1.5,
				"stroke": function(d,i){ return that.color[2]; },
			    "stroke-width": "3"
			});

		var drawTuLiText=drawTuLi.append("text")
		    .datum(this.tuTlTitle)
		    .text(function(d,i){  return d; })
		    .attr({
		    	"font-size": Math.min(this.width,this.height)/25,
		    	"font-weight": "bold",
		    	"fill": function(d,i){ return that.color[1]; },
			    "x": this.padding.left*2,
			    "y": 0
		    });
		},
		drawZheXian: function(){
			var that=this;
							
			 if(!this.drawImg.select(".drawLine").empty())
			    {
			        this.drawImg.select(".drawLine").remove();
			    }
			 
				this.totalCity=[];
			 
			 for(var b=0;b<this.dataCanJi.length;b++){  // 获取城市数组
				    this.totalCity.push(this.dataCanJi[b].city);
				}

			 this.drawLine=this.drawImg.append("g")
			 	.attr({
			 		"class": "drawLine",
			 		"transform": 'translate('+0+','+this.padding.top/2+')'
			 	})
			 	
				this.drawLine.attr({
					"width": this.width-this.padding.left-this.padding.right,
					"height": this.height-this.padding.top-this.padding.bottom
					});
			 
			
			
		var g_lines = this.drawLine.append("g").attr("class", "g_lines");
		var g_circles = this.drawLine.append("g").attr("class", "g_circles");
		var g_text = this.drawLine.append("g").attr("class", "g_text");
		for(var j=1; j<this.dataCanJi.length; ++j)
		{
		    var x1 =this.padding.left+(j-1)*(this.width-this.padding.right*2.5-this.padding.left)/(this.totalCity.length-1);
		    var y1 = this.height-this.padding.bottom*3.3-this.totalNum[j-1]*(this.height-this.padding.bottom*3.3-this.padding.top+8)/this.maxNum;
		    var x2 = this.padding.left+(j)*(this.width-this.padding.right*2.5-this.padding.left)/(this.totalCity.length-1);
		    var y2 = this.height-this.padding.bottom*3.3-this.totalNum[j]*(this.height-this.padding.bottom*3.3-this.padding.top+8)/this.maxNum;

		    /*------绘制折线*/
		    g_lines.append("line").attr({
		            "class":"line"+j+1,
		            "x1":x1,
		            "y1":y1,
		            "x2":x1,
		            "y2":y1,
		            "stroke-width":"2px",
		            "stroke":function(){ return that.color[2] }
		        })
		        .transition().delay(100+200*j).duration(200).ease("linear").attr("x2", x2).attr("y2", y2);

		    /*------绘制折线圆圈*/
		    g_circles.append("circle")
		        .attr("class","g_circles")
		        .attr("cx",function(){
		            if(j==1){
		                return 0
		            }else{
		                return x1;
		            }
		        })
		        .attr("cy",function(){
		            if(j==1){
		                return 0
		            }else{
		                return y1;
		            }
		        })
		        .attr("r",function(){
		            if(j==1){
		                return 0
		            }else{
		                return "5px";
		            }
		        })
		        .attr({
		        	"fill": function(){ return that.color[2] },
		        	"opacity": 0
		        })
		        .transition()
		        .delay(100+200*j)
		        .duration(200)
		        .attr("opacity",1)

		    /*------绘制折线文字*/
		    g_text
		        .append("text")
		        .text(function(){
		            if(j==1){
		                return d3.select(this).remove();
		            }else{
		                return that.totalNum[j-1]+"%";
		            }
		        })
		        .attr({
		        	"fill": function(){ return that.color[1] },
		        	"x": x1,
		        	"y": y1,
		        	"dy": "-1em",
		        	"dx": "-1em",
		        	"opacity": 0
		        })
		        .transition()
		        .delay(100+200*j)
		        .duration(200)
		        .attr("opacity",1)
			}
		},
		drawHengXian: function(){
			var that=this;
			
			var H_lines = this.drawXian.append("g").attr("class", "H_lines");
			var H_x=this.width-this.padding.right-this.padding.right*3;
			for(var k= 1;k<this.dataCanJi.length;++k){
			    var H_y=k*(this.height-this.padding.top-this.padding.bottom)/this.dataCanJi.length-1;

			    H_lines
			        .append("line")
			        .attr({
			        	"x1": this.padding.left*2.5,
			        	"y1": H_y,
			        	"x2": H_x,
			        	"y2": H_y,
			        	"stroke": function(){ return that.color[4] },
				        "stroke-width": "1px"
			        });
			}
			
		},
		drawScale: function(){
			var that=this;

			var yAxisRight=d3.svg.axis() // y
			    .scale(this.yScaleRight)
			    .ticks(6)
			    .tickSize(0,0)
			    .orient("left")
			    .tickFormat(this.formatAsPercentage);
			
			var gyAxis=this.drawXian.append("g")
			    .attr("class","axis")
			    .attr("fill",function(){ return that.color[1]})
			    .attr("transform",'translate('+(this.width-this.padding.right)+','+(this.padding.bottom*2.3)+')')
			    .call(yAxisRight)

			/*-----------------------------------------------y轴比例尺(左边)-----*/
			var yAxis=d3.svg.axis() // y
			    .scale(this.yScale)
			    .ticks(5)
			    .tickSize(0,0)
			    .tickFormat(this.formaLeft)
			    .orient("right")

			var yXis=this.drawXian.append("g")
			    .attr("class","axis")
			    .attr("fill",function(){ return that.color[1]})
			    .attr("transform",'translate('+0+','+(this.padding.bottom*2.3)+')')
			    .call(yAxis)

			/*-----------------------------------------------x轴-----*/
			var xName=this.svg.append("g")
			    .attr("class","xName")

			xName.append("g")
				.selectAll("text")
			    .data(this.city)
			    .enter()
			    .append("text")
			    .attr("class","xText")
			    .text(function(d){ return d;})
			    .attr({
				    "fill": function(){  return that.color[1]},
				    "y": this.height-this.padding.bottom /4,
				    "x": function(d,i){  return that.padding.left*1.7+(i)*(that.width-that.padding.right*3)/(that.totalRect.length-1)},
				    "text-anchor": "middle",
				    "font-family": "黑体"
			    });
			
		},
		drawJuXing: function(){
			var that=this;
			
			  if(!this.drawImg.select(".drawRect").empty())
			    {
			        this.drawImg.select(".drawRect").remove();
			    }
			  this.totalRect=[];
			  for(var c=0;c<this.dataCanJi.length;c++){  
				    this.totalRect.push(this.dataCanJi[c].data[0]);
				}
			var drawRect=this.drawImg.append("g").attr("class","drawRect");
			
		var yScale_1=d3.scale.linear()
		    .domain([0,this.largeNumUnit])
		    .range([0,(this.height-this.padding.top-this.padding.bottom*3.5)]);

		for(var a= 0;a<this.totalRect.length;){
	        a=a+2;
	        if(a<this.totalRect.length-1){
	        	this.totalRect.splice(a,0,0);
	        }else{
	        	this.totalRect;
	        }

	    }
// this.totalRect.splice(2,0,0);
// this.totalRect.splice(4,0,0);
// this.totalRect.splice(6,0,0);
// this.totalRect.splice(8,0,0);

		var linePath=d3.svg.line()
		            .x(function(d,m){
		                    return that.padding.left*2+(m)*(that.width-that.padding.right*2.5-that.padding.left*5)/(that.totalRect.length-1)
		            })
		            .y(function(d,m){
		                    return that.height - that.padding.bottom-(that.totalRect[m] * (that.height - that.padding.bottom*3.5 - that.padding.top) / that.largeNumUnit)
		            })
		            .interpolate("step");

		drawRect.append("path")
			.attr({
				"fill": "none",
				"stroke": function(){  return that.color[3]},
			    "stroke-width": "2px",
			    "transform": 'translate('+this.padding.left+','+-this.padding.top/2+')'
			})
		     .transition()
		     .duration(300)
		     .delay(1500)
		    .attr("d",function(d,m){ return linePath(that.totalRect)})
		    for(var b=1;b<this.totalRect.length;){
		        b=b+1;
		       if(b<this.totalRect.length-2){
		    	   this.totalRect.splice(b,1);
		       }else{
		    	   this.totalRect;
		       }
		    }
// this.totalRect.splice(2,1);
// this.totalRect.splice(3,1);
// this.totalRect.splice(4,1);
// this.totalRect.splice(5,1);
			
		},
		drawDanWei:function(){
			var that=this;
			
			var drawUnit=this.svg.append("g")
			.attr({
				"class": "drawUnit",
				"fill": function(){ return that.color[1]},
			    "font-size": this.padding.left/1.5,
			    "font-family": "黑体",
			    "text-anchor": "middle",
			    "transform": 'translate('+this.padding.left*2.2+','+this.padding.top*1.5+')'
			});

		var unitLeft=drawUnit.append("text")
		    .text(function(){ return that.dataCanJi[0].unitLeft;});

		var unitRight=drawUnit.append("text")
		    .text(function(){ return that.dataCanJi[0].unitRight;})
		    .attr("x",this.width-this.padding.left-this.padding.right*2.5);
		},
		repaint: function(){
			var that=this;
			
				that.drawJuXing();
				that.drawZheXian();
		}
})// 残疾学生地区对比分析结束

/**
 * 教育管理平台
 * 
 * @class zhnx.chart.eduAdmin
 */
zhnx.chart.eduAdmin = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduAdmin.prototype = $.extend({}, zhnx.chart.base, {
		constructor:zhnx.chart.eduAdmin,
		_defaults : {},	
		
		totalTitle:undefined,
		smallTitle:undefined,
		dataAdmin:undefined,
		
		padding:{top:50,right:20,bottom:20,left:20},
		color:["#DC7512","white","#2491C4"],	// 黄色、白色、蓝色
		dataLength:undefined,
		xScale:undefined,
		xWidth:400,	
		init: function(args){
			this.baseInit(args.selector);
			
			this.totalTitle=args.totalTitle;
			this.smallTitle=args.smallTitle;
			this.dataAdmin=args.dataAdmin;
			
			this.dataLength=this.dataAdmin.length;
			this.xScale=d3.scale.ordinal().domain(d3.range(this.dataLength)).rangeRoundBands([0,this.xWidth]);
			this.drawImg=this.svg.append("g")
			.attr({
				"class": "drawImg",
				"width": this.width-this.padding.left-this.padding.right+"px",
				"height": this.height-this.padding.top-this.padding.bottom+"px",
				"transform": 'translate('+this.padding.left+','+this.padding.top+')'
			});
			
			this.drawTotalTitle();
			this.drawSmallTitle();
			this.drawLine();
			this.drawImgText();
			this.taketurns();
		},
		drawTotalTitle: function(){
			var that = this;
			
			var totalTitleGroup=this.drawImg.append("g") .attr("class","totalTitleText");
			
		var totalTitleText=totalTitleGroup.append("text")
		    .datum(this.totalTitle)
		    .text(function(d){ return d;})
		    .attr({
		    	"fill": "#DC7512",
		    	"font-size": Math.min(this.width,this.height)/15,
		    	"font-family": "黑体"
		    });
		},
		drawSmallTitle: function(){
			var that = this;
			
			var smallTitleGroup=this.drawImg.append("g").attr("class","smallTitleText");
			
		var smallTitleText=smallTitleGroup.append("text")
		    .datum(this.smallTitle)
		    .text(function(d){ return d;})
		    .attr({
		    	"fill": "white",
		    	"font-size": Math.min(this.width,this.height)/20,
		    	"font-family": "黑体",
		    	"transform": 'translate('+0+','+this.padding.top+')'
		    });
		},
		drawLine: function(){
			var that = this;
			
			this.svg.selectAll("defs").remove();
			this.drawImg.selectAll(".adminImg").remove();
			
			/*------绘制图形节点*/
			var drawDefs=this.svg.append("defs")
		    .append("polyline")
		    .attr("points","0,0 0,0 0,0 0,0 0,0 0,0")
		    .attr("id","drawDefs")
		    .attr("fill","rgba(255,255,255,0)")
		    .attr("stroke",function(){ return that.color[2]})
		    .transition()
		    .duration(1000)
		    .ease("linear")
		    .attr("points","0,0 150,-150 190,-150 190,-110 80,0 0,0")
		    
			/*--------根据数据绘制图形*/
			this.adminImg=this.drawImg.append("g")
			    .attr("class","adminImg")
			    .attr("transform",'translate('+0+','+this.height/2+')');     // 调整文字和图形的整体位置

			/*-------绘制形状*/
			var drawAdminImg=this.adminImg.selectAll("g")
		    .data(this.dataAdmin)
		    .enter()
		    .append("g")
		    .attr("class","drawAdminImg")
		    .attr("transform",function(d,i){
		        var myTranslate='translate('+(-that.padding.left+that.xScale(i))/1.2+','+that.width/5+')';
		        var myRotate= 'rotate(' + (0)+ ')';     // 角度看情况需不需要调整，根据图最好不调整
		        var myScale='scale('+10/(i+10)+','+10/(i+10)+')';
		        return myTranslate +''+ myRotate +''+ myScale;
		    })
		    .append("use")
		    .attr("xlink:href","#drawDefs")
		},
		drawImgText: function(){
			var that = this;

			/*------绘制文字*/
			var drawAdminImText=this.adminImg.selectAll("text")
		    .data(this.dataAdmin)
		    .enter()
		    .append("text")
		    .attr("class","drawAdminImText")
		    .text(function(d){return d.adminNam+d.adminNum+ d.adminUnit;  })
		    .attr({
		    	"fill": "white",
		    	"font-size": Math.min(this.width,this.height)/20,
		    	"font-family": "黑体"
		    })
		    .attr("transform",function(d,i){
		        var myTranslate='translate('+(that.padding.left*2+that.xScale(i))+','+that.width/5.5+')';   // 文字位置最后调整
		        var myRotate= 'rotate(' + (-45)+ ')';     // 文字角度最后调整
		        var myScale='scale('+6/(i+6)+','+6/(i+6)+')';
		        return myTranslate +''+ myRotate +''+ myScale;
		    })
		    .attr("dx",function(d,i){  return -that.padding.left*1.3*i})
		    .attr("dy",function(d,i){ return -that.padding.left*1.3*i})
		    .attr("opacity" ,0)
		    .transition()
		    .duration(600)
		    .delay(900)
		    .attr("opacity" ,1)
		},
		repaint: function(){
			var that= this;
			
				that.drawLine();
				that.drawImgText();
		}
		
})
// 教育管理平台结束
// Q--edu--stop

// 水利云右侧title
zhnx.chart.waterCloudRightTitle = function(args){
	this.args = $.extend({}, this._defaults, args);
	this.init();
}
zhnx.chart.waterCloudRightTitle.prototype = {
	constructor: zhnx.chart.waterCloudRightTitle,
	_defaults : {},
	args: undefined,
	r: 13,
	rectWidth: 185,
	strokeWidth: 1.5,
	font32Width: 16,
	font32Height: 33,
	width: 226,
	height: 54,
	padding: {
		left : 2,
		right : 0,
		top : 3,
		bottom : 2
	},
	destroy : function(){
		this.svgUpTitle.remove();
		this.svgUpTitle = null;
	},
	init: function(){
		var that = this;
		var $title = $("<div/>")
			.css({
				"position" : "absolute",
				"top" : "0px",
				"left" : "0px",
				"float" : "left"
			})
			.appendTo($(this.args.selector));
		this.svgUpTitle = d3.select($title.get(0)).append("svg").attr({
			"width" : that.width,
			"height" : that.height
		});
		this.drawTitle(this.args.text);
	},
	drawTitle : function(text) {
		var that = this;
		var rectHeight = this.height - this.padding.top - this.padding.bottom - this.strokeWidth;
		var rect = this.svgUpTitle.append("rect")
			.attr({
				"transform" : "translate(" + that.strokeWidth + "," + that.strokeWidth + ")",
				"x" : that.padding.left,
				"y" : that.padding.top,
				"rx" : that.r,
				"ry" : that.r,
				"width" : that.rectWidth,
				"height" : rectHeight,
				"fill" : d3.rgb(8, 54, 98).toString(),
				"stroke" : "rgba(0,0,0,0)",
				"stroke-width" : that.strokeWidth
			});
		this.svgUpTitle.append("rect")
			.attr({
				"transform" : "translate(" + that.strokeWidth + "," + that.strokeWidth + ")",
				"x" : 0,
				"y" : 0,
				"rx" : that.r,
				"ry" : that.r,
				"width" : that.rectWidth,
				"height" : rectHeight,
				"fill" : "rgba(0,0,0,0)",
				"stroke" : d3.rgb(28, 166, 235).toString(),
				"stroke-width" : that.strokeWidth
			});
		this.svgUpTitle.append("text").datum(text)
			.attr({
				"transform" : "translate(" + that.strokeWidth + "," + that.strokeWidth + ")",
				"x" : function(d) {
					return (that.rectWidth - zhnx.utils.countStringLen(d) * that.font32Width) / 2;
				},
				"y" : function(d) {
					return rectHeight - rectHeight / 4;
				},
				"font-size" : function(d, i) {
					return "32px";
				},
				"fill" : "#EFA120",
				"font-family" : "黑体"
			}).text(function(d) {
				return d;
			});
		var lineLen = 15;
		var triangle = this.svgUpTitle.append("polyline").datum(lineLen)
			.attr({
				"transform" : "translate(" + (that.strokeWidth + that.rectWidth - that.padding.left) + "," + (that.strokeWidth - that.padding.top) + ")",
				"points" : function(d) {
					var point1 = [ d, ((rectHeight - lineLen) / 2) ];
					var point2 = [ d, ((rectHeight - lineLen) / 2 + lineLen) ];
					var point3 = [ Math.sqrt((lineLen * lineLen) - (lineLen * lineLen / 4)) + d, point1[1] + lineLen / 2 ];
					var point4 = [ d, ((rectHeight - lineLen) / 2) ];
					return point1.join(",") + " " + point2.join(",") + " " + point3.join(",") + " " + point4.join(",");
				},
				"fill" : d3.rgb(8, 54, 98).toString(),
				"stroke" : "rgba(0,0,0,0)",
				"stroke-width" : that.strokeWidth
			});
		this.svgUpTitle.append("polyline").datum(lineLen)
			.attr({
				"transform" : "translate(" + (that.strokeWidth + that.rectWidth) + "," + that.strokeWidth + ")",
				"points" : function(d) {
					var point1 = [ d, ((rectHeight - lineLen) / 2) ];
					var point2 = [ d, ((rectHeight - lineLen) / 2 + lineLen) ];
					var point3 = [ Math.sqrt((lineLen * lineLen) - (lineLen * lineLen / 4)) + d, point1[1] + lineLen / 2 ];
					var point4 = [ d, ((rectHeight - lineLen) / 2) ];
					return point1.join(",") + " " + point2.join(",") + " " + point3.join(",") + " " + point4.join(",");
				},
				"fill" : "rgba(0,0,0,0)",
				"stroke" : d3.rgb(28, 166, 235).toString(),
				"stroke-width" : that.strokeWidth
			});
	}
}






// ==============================================================================================================================================
// ===================== ================================
// ===================== ================================
// ===================== ================================
// ==============================================================================================================================================
/**
 * 教育云单个三角柱状图
 * 
 * @class zhnx.chart.eduSingleTriangle
 */
zhnx.chart.eduSingleTriangle = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduSingleTriangle.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.eduSingleTriangle,
	_defaults : {},
	
	title : undefined,
	unit : undefined,
	citys : undefined,
	dataSet : undefined,
	xScale : undefined,
	yScale : undefined,
	yMax : undefined,
	padding : {left: 40, top: 30, right: 40, bottom: 50},
	colors : "#f6a704",
	
	init : function(args){
		this.baseInit(args.selector);
		this.title = args.title;
		this.unit = args.unit;
		this.citys = args.citys;
		this.dataSet = args.dataSet;
		this.yMax = 100*(Math.floor(d3.max(this.dataSet)/100)+1);
		this.yScale = d3.scale.linear().domain([0, this.yMax]).range([this.height-this.padding.bottom, 3*this.padding.top]);
		this.xScale = d3.scale.ordinal().domain(this.citys).rangePoints([3*this.padding.left, this.width-3*this.padding.right]);
		this.drawBasicArea();
		this.drawTriangleArea();
		
	},
	
	drawTriangleArea : function(){
		var that = this;
		if(!that.svg.select(".chartArea").empty()){
			that.svg.select(".chartArea").remove();
		}
		var chartArea = that.svg.append("g").attr("class", "chartArea");
		// 画三角路径
		chartArea.append("g").attr("class", "g_path").selectAll("path").data(that.dataSet).enter().append("path").attr({
	        "class": function(d, i){ return "path"+i; },
	        "d": function (d, i) {
	            var x1 = that.xScale(that.citys[i]);
	            var y1 = that.height-that.padding.bottom;
	            var x2 = x1 - 0.5 * (that.height-that.yScale(that.dataSet[i])-that.padding.bottom);
	            var y2 = y1;
	            var x3 = x1 + 0.5 * (that.height-that.yScale(that.dataSet[i])-that.padding.bottom);
	            var y3 = y2;
	            var startPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y3+" L "+x1+" "+y1;
	            return startPath;
	        },
	        "fill": that.colors,
	        "opacity":0.5
	    })
	        .on("mouseover", function(d, i){
	            d3.select(".path"+i).transition().delay(200).duration(300).attr("opacity", 1);
	            d3.select(".line"+i).transition().delay(200).duration(300).attr("opacity", 0);
	            var strClass = d3.select(this).attr("class");
            	var iIndex = strClass.charAt(4);
            	zhnx.getTooltip().style({
	        		"opacity": "0.9",
	        		"width": "130px",
	        		"height": "50px",
	        		"line-height": "23px",
	        		"z-index": "99999",
	        		"left": (d3.event.pageX - 75) + "px",
	        		"top": (d3.event.pageY - 67) + "px"
	        	})
	        	.html(that.citys[iIndex] + "市" + "<br>" + "学生人数：" + that.dataSet[iIndex] + "人");
	        })
	        .on("mouseout", function (d, i) {
	            d3.select(".path"+i).transition().delay(200).duration(300).attr("opacity", 0.5);
	            d3.select(".line"+i).transition().delay(200).duration(300).attr("opacity", 0.5);
	            zhnx.getTooltip().style({
	        		"opacity": 0,
	        		"z-index": "-1"
            	});
	        })
	        .transition().delay(200).duration(800).ease("circle-out").attr({
	        "d": function (d, i) {
	            var x1 = that.xScale(that.citys[i]);
	            var y1 = that.yScale(that.dataSet[i]);
	            var x2 = x1 - 0.5 * (that.height-y1-that.padding.bottom);
	            var y2 = that.height - that.padding.bottom;
	            var x3 = x1 + 0.5 * (that.height-y1-that.padding.bottom);
	            var y3 = y2;
	            var fillPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y3+" L "+x1+" "+y1;
	            return fillPath;
	        }
	    });
	    // 画虚线
		chartArea.append("g").attr("class", "g_lines").selectAll("line").data(that.dataSet).enter().append("line").attr({
	        "class": function(d, i){ return "line"+i; },
	        "x1": function(d, i){ return that.xScale(that.citys[i]); },
	        "y1": that.height-that.padding.bottom,
	        "x2": function(d, i){ return that.xScale(that.citys[i]); },
	        "y2": function(d, i){ return that.yScale(d) },
	        "stroke-width":"1px",
	        "stroke":"#fff",
	        "opacity":0,
	        "stroke-dasharray":(5, 5)
	    }).transition().delay(1000).duration(500).ease("linear").attr("opacity", 0.5);
	},
	
	drawBasicArea : function(){
		this.addTitle();
		this.addAxis();		
	},
	
	addAxis : function(){
		var that = this;
		// 坐标轴
	    that.svg.append("line").attr({
	        "x1": that.padding.left,
	        "y1": that.height-that.padding.bottom,
	        "x2": that.padding.left,
	        "y2": 3*that.padding.top,
	        "stroke-width":"1px",
	        "stroke":"#fff"
	    });
	    var yAxis = d3.svg.axis().scale(that.yScale).orient("left").ticks(5).tickSize(7);
	    var yBar = that.svg.append("a").attr("class", "g_yAxis").attr("transform", "translate("+that.padding.left+",0)").call(yAxis);
	    yBar.selectAll("text").attr({"font-family": "黑体", "font-size": "14px", "fill": "#fff"});
	    yBar.selectAll("path").attr({
	        "fill": "none",
	        "stroke": "#fff",
	        "stroke-width": "1px",
	        "shape-rendering": "crispEdges"
	    });
	    yBar.selectAll("line").attr({"fill": "none", "stroke": "#fff", "stroke-width": "1px"});

	    // 横轴城市
	    that.svg.append("g").attr("class", "g_xAxis").selectAll("text").data(that.citys).enter().append("text").attr({
	        "x":function(d, i){ return that.xScale(that.citys[i]); },
	        "y":that.height-0.55*that.padding.bottom,
	        "dy":".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "14px",
	        "text-anchor": "middle"
	    }).text(function(d, i){ return that.citys[i]; });
	},
	
	addTitle : function(){
		var that = this;
		// 添加标题
	    that.svg.append("text").text(that.title).attr({
	        "x":2*that.padding.left,
	        "y":that.padding.top,
	        "dy":".35em",
	        "fill": "#e57509",
	        "font-family": "黑体",
	        "font-size": "22px",
	        "font-weight":"bold",
	        "text-anchor": "left"
	    });
	    // 添加单位
	    that.svg.append("text").text(that.unit).attr({
	        "x":that.padding.left,
	        "y":2.5*that.padding.top,
	        "dy":".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "14px",
	        "text-anchor": "middle"
	    });
	}
});

/**
 * 水利云日程管理部分
 * 
 * @class zhnx.chart.waterManager
 * 
 */
zhnx.chart.waterManager = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.waterManager.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.waterManager,
	_defaults : {},
	
	title : undefined,
	types : undefined,
	values : undefined,
	padding : {top: 25, left: 20, bottom: 20, right: 20},
	colors : ["#05bcfe", "#f6a704"],
	
	init : function(args){
		this.baseInit(args.selector);
		this.title = args.title;
		this.types = args.type;
		this.values = args.value;
		
		this.drawData();	
		
	},
	
	drawData : function(){
		var that = this;
		var textArea = this.svg.append("g").attr("class", "textArea");
		// 添加标题
		textArea.append("rect").attr({
            "x":that.padding.left,
            "y":that.padding.top,
            "width":0.3*that.width,
            "height":1.2*that.padding.top,
            "rx":0.3*that.padding.top,
            "ry":0.3*that.padding.top,
            "fill": "#172763",
            "stroke": "#4981bc",
            "stroke-width": "1px",
            "stroke-dasharray":(5, 20)
        });
		textArea.append("text").text(that.title).attr({
            "x":that.padding.left+0.15*that.width,
            "y":1.6*that.padding.top,
            "dy":".35em",
            "fill": that.colors[1],
            "font-family": "黑体",
            "font-size": "16px",
            "font-weight": "bold",
            "text-anchor": "middle"
        });
		
		textArea.append("g").attr("class", "detailName").selectAll("text").data(that.types).enter().append("text").attr({
            "x":function(d, i){ return (4-i)*that.padding.left; },
            "y":function(d, i){ return (3+i)*that.padding.top; },
            "dy":".35em",
            "fill": that.colors[0],
            "font-family": "黑体",
            "font-size": "14px",
            "font-weight": "bold",
            "text-anchor": "left"
        }).text(function(d){ return d; });
		textArea.append("g").attr("class", "detailValue").selectAll("text").data(that.values).enter().append("text").attr({
            "x":0.5*that.width,
            "y":function(d, i){ return (3+i)*that.padding.top; },
            "dy":".35em",
            "fill": that.colors[1],
            "font-family": "黑体",
            "font-size": "14px",
            "font-weight": "bold",
            "text-anchor": "left"
        }).text(function(d){ return d; });
	}
});

// 水利云企业人员状况
zhnx.chart.waterEmployee = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.waterEmployee.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.waterEmployee,
	_defaults : {},
	
	
	title : undefined,
	subTitle : undefined,
	types : undefined,
	values : undefined,
	padding : {top: 20, left: 20, bottom: 20, right: 20},
	colors : ["#05bcfe", "#f6a704"],
	
	
	init : function(args){
		this.baseInit(args.selector);
		this.title = args.title;
		this.subTitle = args.subTitle;
		this.types = args.type;
		this.values = args.value;
		
		this.drawData();	
		
	},
	
	drawData : function(){
		var that = this;
		var textArea = this.svg.append("g").attr("class", "textArea");
		// 添加标题
		textArea.append("rect").attr({
            "x":2*that.padding.left,
            "y":that.height-2*that.padding.bottom,
            "width":0.25*that.width,
            "height":1.2*that.padding.top,
            "rx":0.3*that.padding.top,
            "ry":0.3*that.padding.top,
            "fill": "#172763",
            "stroke": "#4981bc",
            "stroke-width": "1px",
            "stroke-dasharray":(5, 20)
        });
		textArea.append("text").text(that.title).attr({
            "x":2*that.padding.left+0.125*that.width,
            "y":that.height-1.5*that.padding.bottom,
            "dy":".35em",
            "fill": that.colors[0],
            "font-family": "黑体",
            "font-size": "16px",
            "font-weight": "bold",
            "text-anchor": "middle"
        });
		// 添加标题
		textArea.append("rect").attr({
            "x":0.6*that.width,
            "y":that.height-2*that.padding.bottom,
            "width":0.25*that.width,
            "height":1.2*that.padding.top,
            "rx":0.3*that.padding.top,
            "ry":0.3*that.padding.top,
            "fill": "#172763",
            "stroke": "#4981bc",
            "stroke-width": "1px",
            "stroke-dasharray":(5, 20)
        });
		textArea.append("text").text(that.subTitle).attr({
            "x":0.725*that.width,
            "y":that.height-1.5*that.padding.bottom,
            "dy":".35em",
            "fill": that.colors[0],
            "font-family": "黑体",
            "font-size": "16px",
            "font-weight": "bold",
            "text-anchor": "middle"
        });
		
		var r1 = 25;
		var r2 = 4;
		var xx = [40, 140, 240, 340];
		var yy = [60, 130, 110];
		textArea.append("g").attr("class", "lines1").selectAll("line").data(xx).enter().append("line").attr({
			"x1": function(d){ return d-r1; },
			"y1": yy[0],
			"x2": function(d){ return d-r2; },
			"y2": yy[2],
			"stroke": that.colors[1],
            "stroke-width": "1px",
		});
		textArea.append("g").attr("class", "lines2").selectAll("line").data(xx).enter().append("line").attr({
			"x1": function(d){ return d+r1; },
			"y1": yy[0],
			"x2": function(d){ return d+r2; },
			"y2": yy[2],
			"stroke": that.colors[1],
            "stroke-width": "1px",
		});
		textArea.append("g").attr("class", "circles").selectAll("circle").data(xx).enter().append("circle").attr({
			"cx": function(d){ return d; },
			"cy": yy[0],
			"r": r1,
			"fill": "none",
			"stroke": that.colors[1],
            "stroke-width": "1px",
		});
		textArea.append("g").attr("class", "smallcircles").selectAll("circle").data(xx).enter().append("circle").attr({
			"cx": function(d){ return d; },
			"cy": yy[2],
			"r": r2,
			"fill": "#fff",
			"stroke": "none"
		});
		textArea.append("g").attr("class", "detailName").selectAll("text").data(that.types).enter().append("text").attr({
            "x":function(d, i){ return xx[i]; },
            "y":yy[0],
            "dy":".35em",
            "fill": that.colors[0],
            "font-family": "黑体",
            "font-size": "13px",
            "text-anchor": "middle"
        }).text(function(d){ return d; });
		textArea.append("g").attr("class", "detailValue").selectAll("text").data(that.values).enter().append("text").attr({
            "x":function(d, i){ return xx[i]; },
            "y":yy[1],
            "dy":".35em",
            "fill": that.colors[1],
            "font-family": "黑体",
            "font-size": "16px",
            "font-weight": "bold",
            "text-anchor": "middle"
        }).text(function(d){ return d; });
		
		
	}
});

/**
 * 线图
 * 
 * @param args
 *            zhnx.chart.line({ selector: zhnx.windows.minor({selector: ".zone",
 *            title: "水利防灾减灾建设"}), title: "水利防灾减灾建设", subTitle: "水库容量", labels:
 *            ["2013年", "2014年", "2015年", "2016年"], unit: "亿立方米", series: [{
 *            city: "银川", data: [5, 3, 8, 1] }, { city: "石嘴山", data: [2, 7, 3,
 *            6] }, { city: "吴忠", data: [3, 4, 5, 4] }, { city: "固原", data: [8,
 *            5, 2, 3] }, { city: "中卫", data: [6, 6, 7, 5] }] })
 */
zhnx.chart.line = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.line.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.line,
	_defaults : {},
	
	title : undefined,
	subTitle : undefined,
	labels : undefined,
	unit : undefined,
	citys : undefined,
	dataSet : undefined,
	tipWidth : 80,
	padding : {left: 40, top: 50, right: 100, bottom: 40},
	lineColor : ["#ffe91d", "#f6a704", "#e57509", "#674424", "#3d3334"],
	
	init : function(args){
		this.baseInit(args.selector);
		this.title = args.title;
		this.subTitle = args.subTitle;
		this.labels = args.labels;
		this.unit = args.unit;
		this.citys = d3.map(args.series, function(d){return d.city;}).keys();
		this.dataSet = [];
		for (var i=0; i<this.citys.length ;++i){
			this.dataSet.push(args.series[i].data);
		}
		this.drawBasicArea();
		this.drawChart();
		this.taketurns();
	},
	repaint : function(){
    	this.drawChart();
    },
    
    addTitle : function(){
    	var that = this;
    	var titleArea = that.svg.append("g").attr("class", "titleArea");
		// 添加标题
    	titleArea.append("text").text(that.title).attr({
            "x": that.padding.left,
            "y": 0.5 * that.padding.top,
            "dy": ".35em",
            "fill": "#f6a704",
            "font-weight":"bold",
            "font-family": "黑体",
            "font-size": "25px",
            "text-anchor": "left"
        });
        // 添加副标题
    	titleArea.append("text").text(that.subTitle).attr({
            "x": that.padding.left,
            "y": 1.2*that.padding.top,
            "dy": ".35em",
            "fill": "#f6a704",
            "font-family": "黑体",
            "font-size": "20px",
            "text-anchor": "left"
        });
        // 添加纵轴单位
    	titleArea.append("text").text(that.unit).attr({
            "x": that.padding.left,
            "y": 2*that.padding.top,
            "dy": ".35em",
            "fill": "#fff",
            "font-family": "黑体",
            "font-size": "12px",
            "text-anchor": "middle"
        });
    },
    
    addAxis : function(){
    	var that = this;
    	// 横网格线
        var axisLines = that.svg.append("g").attr("class", "axisLines");
        for (var i=0; i<Math.floor(d3.max(d3.merge(that.dataSet)))+1; ++i){
        	
            var yValue = that.height-that.padding.bottom-i*(that.height-that.padding.bottom-2.5*that.padding.top)/Math.floor(d3.max(d3.merge(that.dataSet)));
            var _text = (i).toString();
            axisLines.append("line").attr({
                "x1":that.padding.left,
                "y1":yValue,
                "x2":that.width-that.padding.right,
                "y2":yValue
            });
            axisLines.append("text").text(_text).attr("x", that.padding.left-15).attr("y", yValue);
        }
        // 纵网格线
        for (var i=0; i<that.labels.length; ++i){
            var xValue = that.padding.left+i*(that.width-that.padding.right-that.padding.left)/(that.labels.length-1);
            axisLines.append("line").attr({
                "x1":xValue,
                "y1":that.height-that.padding.bottom,
                "x2":xValue,
                "y2":2.5*that.padding.top
            });
            axisLines.append("text").text(that.labels[i]).attr("x", xValue).attr("y", that.height-that.padding.bottom+15);
        }
        axisLines.selectAll("line").attr({
            "stroke-width":"1px",
            "stroke":"#fff",
            "opacity": "0.2"
        });
        axisLines.selectAll("text").attr({
            "dy": ".35em",
            "fill": "#fff",
            "font-family": "黑体",
            "font-size": "12px",
            "text-anchor": "middle"
        });
    },
    
    addLegend : function(){
    	var that = this;
    	// 绘制图例
        var legendRect = this.svg.append("g").attr("class", "legendRect");
        legendRect.selectAll("rect").data(that.citys).enter().append("rect").attr({
        	"x": that.width-that.padding.right+0.2*that.padding.right,
        	"y": function(d, i){ return 1.2*that.padding.top+i*0.2*that.padding.right; },
        	"width": 0.2*that.padding.right,
        	"height": 0.1*that.padding.right,
        	"fill": function(d, i){ return that.lineColor[i]; },
        	"opacity": 1
        })
        .on("click", function(d, i){  
        	this.taketurns();
        	if ("gray" != d3.select(this).attr("fill")){
        		d3.select(this).attr("fill", "gray");
        		for(var iIndex=0; iIndex<that.labels.length; ++iIndex){
        			that.svg.select(".circle"+i+iIndex).transition().delay(100).duration(400).ease("linear").attr("opacity", 0);
        			that.svg.select(".line"+i+iIndex).transition().delay(100).duration(400).ease("linear").attr("opacity", 0);
        		}        		
        	}else{
        		d3.select(this).attr("fill", that.lineColor[i]);
        		for(var iIndex=0; iIndex<that.labels.length; ++iIndex){
        			that.svg.select(".circle"+i+iIndex).transition().delay(100).duration(400).ease("linear").attr("opacity", 1);
        			that.svg.select(".line"+i+iIndex).transition().delay(100).duration(400).ease("linear").attr("opacity", 1);
        		}         		
        	}
        });
        legendRect.selectAll("text").data(that.citys).enter().append("text").attr({
        	"x": that.width-that.padding.right+0.5*that.padding.right,
        	"y": function(d, i){ return 1.2*that.padding.top+0.05*that.padding.right+i*0.2*that.padding.right; },
        	"font-size": "12px",
        	"font-family": "黑体",
        	"fill":"#fff",
        	"text-anchor":"left",
        	"dy":"0.35em"
        }).text(function(d, i){ return that.citys[i]; });
    },
    
	drawBasicArea : function(){
		this.addTitle();
		this.addAxis();
        this.addLegend();        
	},
	drawChart : function()
	{
		var that = this;
		if(!this.svg.select(".chartArea").empty())
		{
			this.svg.select(".chartArea").remove();
		}
		var chartArea = that.svg.append("g").attr("class", "chartArea");
        for(var i=0; i<that.citys.length; ++i)
        {
            var g_lines = chartArea.append("g").attr("class", "g_lines"+i);
            var g_circles = chartArea.append("g").attr("class", "g_circles"+i);
            for(var j=1; j<that.labels.length; ++j)
            {
                var x1 = that.padding.left+(j-1)*(that.width-that.padding.right-that.padding.left)/(that.labels.length-1);
                var y1 = that.height-that.padding.bottom-that.dataSet[i][j-1]*(that.height-that.padding.bottom-2.5*that.padding.top)/Math.floor(d3.max(d3.merge(that.dataSet)));
                var x2 = that.padding.left+j*(that.width-that.padding.right-that.padding.left)/(that.labels.length-1);
                var y2 = that.height-that.padding.bottom-that.dataSet[i][j]*(that.height-that.padding.bottom-2.5*that.padding.top)/Math.floor(d3.max(d3.merge(that.dataSet)));
                g_lines.append("line").attr({
                	"class":"line"+i+(j-1),
                    "x1":x1,
                    "y1":y1,
                    "x2":x1,
                    "y2":y1,
                    "stroke-width":"2px",
                    "stroke":that.lineColor[i]
                }).transition().delay(100+200*i+200*j).duration(200).ease("linear").attr("x2", x2).attr("y2", y2);
                if(g_circles.select(".circle"+i+(j-1)).empty())
                {
                    g_circles.append("circle").attr({
                        "class":"circle"+i+(j-1),
                        "cx": x1,
                        "cy": y1,
                        "r": "5px",
                        "fill":that.lineColor[i],
                        "opacity":0
                    });
                }
                if(g_circles.select(".circle"+i+j).empty())
                {
                    g_circles.append("circle").attr({
                        "class":"circle"+i+j,
                        "cx": x2,
                        "cy": y2,
                        "r": "5px",
                        "fill":that.lineColor[i],
                        "opacity":0
                    });
                }
            }
        }
        chartArea.selectAll("circle").transition().delay(1500).duration(300).ease("linear").attr("opacity", 1);
		this.svg.selectAll("circle").each(function(d, i){
			 d3.select(this).on({
		    	"mouseover": function(){
					var iIndex = d3.select(this).attr("class").charAt(6);
					var jIndex = d3.select(this).attr("class").charAt(7);
					zhnx.getTooltip().style({
		        		"opacity": "0.9",
		        		"width": "130px",
		        		"height": "50px",
		        		"line-height": "23px",
		        		"z-index": "99999",
		        		"left": (d3.event.pageX - 75) + "px",
		        		"top": (d3.event.pageY - 67) + "px"
		        	})
		        	.html(that.labels[jIndex] + " " + that.citys[iIndex] + "<br>"+ "水库容量:" + that.dataSet[iIndex][jIndex]);
				},
		    	"mouseout":function(){
		    		zhnx.getTooltip().style({
		        		"opacity": 0,
		        		"z-index": "-1"
		        	});
		    	}                    	
		    });
		 });
	}
});

/**
 * 单数据面图
 * 
 * @param args
 *            zhnx.chart.area({ selector: zhnx.windows.custom({selector:
 *            "#centerZone", title: "近几年水利项目投资情况"}, 500, 350), title:
 *            "近几年水利项目投资情况", unit: "投资额（万）", labels: ["2010", "2011", "2012",
 *            "2013", "2014", "2015", "2016"], Counts: [50, 80, 100, 850, 90,
 *            120, 70] })
 */
zhnx.chart.area = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.area.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.area,
	_defaults : {},
	padding : {left:40, top:40, right:30, bottom:70},
	xGap : 20,
	titleHeight : 25,
	tipLineHeight : 20,
	tipRectWidth : 30,
	tipRectHeight : 20,
	
	title : undefined,
	unit : undefined,
	labels : undefined,
	dataSet : undefined,
	
	init : function(args){
		this.baseInit(args.selector);
		this.title = args.title;
		this.unit = args.unit;
		this.dataSet = args.Counts;
		this.labels = args.labels;
		this.basicArea();
		this.drawData();
		this.taketurns();
	},
	repaint : function(){
    	this.drawData();
    },
    
    addTitle : function(){
    	var that = this;
    	var titleArea = that.svg.append("g").attr("class", "titleArea");
		// 添加标题
    	titleArea.append("g").attr("class", "g_title").append("rect").attr({
            "x":0.3*that.width,
            "y":that.height-0.5*that.padding.bottom,
            "width":0.4*that.width,
            "height":that.titleHeight,
            "rx":0.2*that.titleHeight,
            "ry":0.2*that.titleHeight,
            "fill": "#172763",
            "stroke": "#4981bc",
            "stroke-width": "1px",
            "stroke-dasharray":(5, 20)
        });
    	titleArea.select(".g_title").append("text").text(that.title).attr({
            "x":0.5*that.width,
            "y":that.height-0.5*that.padding.bottom+0.5*that.titleHeight,
            "dy":".35em",
            "fill": "#05bcfe",
            "font-family": "黑体",
            "font-size": "18px",
            "text-anchor": "middle"
        });
        // 定义箭头元素
    	titleArea.append("defs").append("marker").attr({
            "id":"arrow",
            "markerUnits":"strokeWidth",
            "markerWidth":"10px",
            "markerHeight":"10px",
            "viewBox":"0 0 10 10",
            "refX":"0px",
            "refY":"5px",
            "orient":"auto"
        });
    	titleArea.select("#arrow").append("path").attr({
            "d":"M 0, 0 L 10, 5 L 0, 10 L 0, 0",
            "fill":"#05bcfe"
        });
    },
    
    addAxis : function(){
    	var that = this;
    	var axisArea = that.svg.append("g").attr("class", "axisArea");
    	// 画坐标轴
    	axisArea.append("g").attr("class","g_axis").append("line").attr({
            "class":"axisLine",
            "x1": that.padding.left,
            "y1": that.height - that.padding.bottom,
            "x2": that.width - that.padding.right,
            "y2": that.height - that.padding.bottom
        });
    	axisArea.select(".g_axis").append("line").attr({
            "class":"axisLine",
            "x1": that.padding.left,
            "y1": that.height - that.padding.bottom,
            "x2": that.padding.left,
            "y2": that.padding.top
        });
    	axisArea.selectAll(".axisLine").attr({
            "stroke":"#05bcfe",
            "stroke-width":"1px",
            "marker-end":"url(#arrow)"
        });
        // 添加纵轴标注
    	axisArea.append("g").append("text").text(that.unit).attr({
            "x":1.2*that.padding.left,
            "y":0.7*that.padding.top,
            "fill":"#fff",
            "font-family":"黑体",
            "font-size":"12px",
            "text-anchor":"middle"
        });
        // 画坐标轴、刻度值
        var xScale = d3.scale.linear()
            .domain([0, that.labels.length-1])
            .range([that.padding.left+that.xGap, that.width-that.padding.right-that.xGap]);
        var yScale = d3.scale.linear()
            .domain([0, d3.max(that.dataSet)])
            .range([that.height-that.padding.bottom, that.padding.top+0.1*that.xGap]);
        var xAxis = d3.svg.axis().scale(xScale).orient("bottom").ticks(that.labels.length).tickSize(6);
        var xBar = axisArea.append("g").attr("class", "Axis").attr("transform", "translate(0," + (that.height-that.padding.bottom) + ")");
        xBar.call(xAxis);
        xBar.selectAll("text").text(function(d, i){return that.labels[i];}).attr({"font-family":"黑体", "font-size":"12px", "fill":"#fff"});
        xBar.selectAll("path").attr({"fill":"none", "stroke":"#05bcfe", "stroke-width":"1px", "shape-rendering":"crispEdges"});
        xBar.selectAll("line").attr({"fill":"none", "stroke":"#05bcfe", "stroke-width":"1px"});
        var yAxis = d3.svg.axis().scale(yScale).orient("left").ticks(8).tickSize(6, 0);
        var yBar = axisArea.append("g").attr("class", "Axis").attr("transform", "translate(" + that.padding.left + ", 0)");
        yBar.call(yAxis);
        yBar.selectAll("text").text(function(d, i){return 100*i;}).attr({"font-family":"黑体", "font-size":"12px", "fill":"#fff"});
        yBar.selectAll("path").attr({"fill":"none", "stroke":"#05bcfe", "stroke-width":"1px", "shape-rendering":"crispEdges"});
        yBar.selectAll("line").attr({"fill":"none", "stroke":"#05bcfe", "stroke-width":"1px"});
    },
    
	// 绘制面积图的不需要修改的部分
	basicArea : function(){
		this.addTitle();
		this.addAxis();
	},
	// 绘制面积图部分
	drawData : function(){
		var that = this;
		if(!this.svg.select(".chartArea").empty()){
			this.svg.select(".chartArea").remove();
		}
		var startPath = d3.svg.area()
        .x(function(d, i){return that.padding.left+that.xGap+i*((that.width-that.padding.right-that.padding.left-2*that.xGap)/(that.labels.length-1));})
        .y0(function(d, i){return that.height-that.padding.bottom;})
        .y1(function(d, i){return that.height-that.padding.bottom;});
		var areaPath = d3.svg.area()
        .x(function(d, i){return that.padding.left+that.xGap+i*((that.width-that.padding.right-that.padding.left-2*that.xGap)/(that.labels.length-1));})
        .y0(function(d, i){return that.height-that.padding.bottom;})
        .y1(function(d, i){return that.height-that.padding.bottom-d*((that.height-that.padding.bottom-that.padding.top-that.xGap)/d3.max(that.dataSet));});
		this.svg.append("g").attr("class","chartArea").append("path").attr({
			"d":startPath(that.dataSet),
	        "stroke":"black",
	        "stroke-width":"1px",
	        "fill":"#f6a704"
		}).transition().delay(200).duration(800).ease("circle-out").attr("d",areaPath(that.dataSet));
	    // 绘制数据提示图
	    for(var i = 0; i < this.dataSet.length; ++i){
	        var x0 = this.padding.left+this.xGap+i*((this.width-this.padding.right-this.padding.left-2*this.xGap)/(this.labels.length-1));
	        var y0 = this.height-this.padding.bottom-this.dataSet[i]*((this.height-this.padding.bottom-this.padding.top-this.xGap)/d3.max(this.dataSet));
	        this.drawTipInfo(x0, y0, this.dataSet[i]);
	    }
	    this.svg.select(".chartArea").on("mouseover", function(){
	    	that.svg.selectAll(".tips").attr("opacity", 0).transition().delay(300).duration(700).ease("linear").attr("opacity", 1);
	    	});
	},
    drawTipInfo : function(x, y, d){
    	var that = this;
    	var tips = this.svg.select(".chartArea").append("g").attr("class", "tips");
        tips.append("rect").attr({
            "x":x-0.5*that.tipRectWidth,
            "y":y-that.tipLineHeight-that.tipRectHeight,
            "width":that.tipRectWidth,
            "height":that.tipRectHeight,
            "rx":0.3*that.tipRectHeight,
            "ry":0.3*that.tipRectHeight,
            "fill":"none",
            "stroke":"#fff",
            "stroke-width":"1px"
        }).attr("opacity", 0).transition().delay(1000).duration(500).ease("linear").attr("opacity", 1);
        var linePath = "M "+ x + " " + y + " V " + (y-this.tipLineHeight).toString();
        tips.append("path").attr({"d":linePath, "fill":"#fff" }).style({"stroke":"#fff", "stroke-width":"1px"})
        .attr("opacity", 0).transition().delay(1000).duration(500).ease("linear").attr("opacity", 1);
        tips.append("text").text(d).attr({
            "x":x,
            "y":y-that.tipLineHeight-0.5*that.tipRectHeight,
            "dy":".35em",
            "fill":"#fff",
            "font-family":"黑体",
            "font-size":"12px",
            "text-anchor":"middle"
        }).attr("opacity", 0).transition().delay(1000).duration(500).ease("linear").attr("opacity", 1)
    }
});

/**
 * 多数据面图
 * 
 * @param args
 *            zhnx.chart.multiArea({ selector: zhnx.windows.custom({ id:
 *            "widget3", pagePath: "module/waterCloud/agriculture", selector:
 *            "#centerZone", title: "在建项目" }, 550, 360), title: "企业信用等级", unit:
 *            "数量", xMarks: ["施工企业", "勘察设计企业", "监理企业", "招标代理机构"], serious: [{
 *            type: "AAA(A)", data: [40, 10, 15, 5] }, { type: "AA(A)", data:
 *            [30, 43, 23, 10] }, { type: "A(A)", data: [20, 13, 10, 10] }, {
 *            type: "B", data: [10, 21, 20, 35] }] })
 */
zhnx.chart.multiArea = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.multiArea.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.multiArea,
	_defaults : {},
	
	gap : 20,
	titleHeight : 25,
	colors : ["#ffe91d", "#f6a704", "#e57509", "#674424", "#3d3334"],
	padding : {left:30, top:50, right:60, bottom:40},
		
	types : undefined,	
	dataSet : undefined,
	title : undefined,
	unit : undefined,
	xMarks : undefined,
	
	init : function(args){
		this.baseInit(args.selector);
		this.title = args.title;
		this.unit = args.unit;
		this.xMarks = args.xMarks;
		this.types = d3.map(args.serious, function(d){return d.type;}).keys();
		this.dataSet = [];		
		for (var i=0; i < this.types.length; ++i){
			this.dataSet.push(args.serious[i].data);
		}
		this.basicArea();
		this.drawData();
		this.taketurns();
	},
	repaint : function(){
    	this.drawData();
    },
    
    addTitle : function(){
    	var that = this;
    	var titleArea = that.svg.append("g").attr("class", "titleArea");
		// 添加标题
    	titleArea.append("g").attr("class", "title").append("rect").attr({
            "x": 0.5*that.width,
            "y": 0.3*that.padding.top,
            "width": 0.3*that.width,
            "height": that.titleHeight,
            "rx": 0.2*that.titleHeight,
            "ry": 0.2*that.titleHeight,
            "fill": "#172763",
            "stroke": "#4981bc",
            "stroke-width": "1px",
            "stroke-dasharray":(5, 20)
        });
    	titleArea.select(".title").append("text").text(that.title).attr({
            "x": 0.65*that.width,
            "y": 0.3*that.padding.top+0.5*that.titleHeight,
            "dy":".35em",
            "fill": "#05bcfe",
            "font-family": "黑体",
            "font-size": "18px",
            "text-anchor": "middle"
        });
        // 定义箭头元素
    	titleArea.append("defs").append("marker").attr({
            "id":"arrow",
            "markerUnits":"strokeWidth",
            "markerWidth":"15px",
            "markerHeight":"15px",
            "viewBox":"0 0 15 15",
            "refX":"0px",
            "refY":"7.5px",
            "orient":"auto"
        });
    	titleArea.select("#arrow").append("path").attr({
            "d":"M 0, 0 L 15, 7.5 L 0, 15 L 0, 0",
            "fill":"#05bcfe"
        });
    },
    
    addAxis : function(){
    	var that = this;
    	var axisArea = that.svg.append("g").attr("class", "axisArea");
    	// 画坐标轴
    	axisArea.append("g").attr("class","g_axis").append("line").attr({
            "class":"axisLine",
            "x1": that.padding.left,
            "y1": that.height - that.padding.bottom,
            "x2": that.width - that.padding.right,
            "y2": that.height - that.padding.bottom
        });
    	axisArea.select(".g_axis").append("line").attr({
            "class":"axisLine",
            "x1": that.padding.left,
            "y1": that.height - that.padding.bottom,
            "x2": that.padding.left,
            "y2": that.padding.top
        });
    	axisArea.selectAll(".axisLine").attr({
            "stroke":"#05bcfe",
            "stroke-width":"1px",
            "marker-end":"url(#arrow)"
        });
        // 添加纵轴标注
    	axisArea.append("g").append("text").text(this.unit).attr({
            "x":that.padding.left,
            "y":0.7*that.padding.top,
            "fill":"#fff",
            "font-family":"黑体",
            "font-size":"12px",
            "text-anchor":"middle"
        });
        // 画坐标轴、刻度值
        var xScale = d3.scale.linear()
            .domain([0, that.xMarks.length-1])
            .range([that.padding.left+that.gap, that.width-that.padding.right-that.gap]);
        var yScale = d3.scale.linear()
            .domain([0, d3.max(d3.merge(that.dataSet))])
            .range([that.height-that.padding.bottom, that.padding.top+0.5*that.gap]);
        var xAxis = d3.svg.axis().scale(xScale).orient("bottom").ticks(that.xMarks.length).tickSize(6);
        var xBar = axisArea.append("g").attr("class", "Axis").attr("transform", "translate(0," + (that.height-that.padding.bottom + ")"));
        xAxis(xBar);
        xBar.selectAll("text").text(function(d, i){return that.xMarks[d];}).attr({"font-family":"黑体", "font-size":"12px", "fill":"#fff"});
        xBar.selectAll("path").attr({"fill":"none", "stroke":"#05bcfe", "stroke-width":"1px", "shape-rendering":"crispEdges"});
        xBar.selectAll("line").attr({"fill":"none", "stroke":"#05bcfe", "stroke-width":"1px"});
        var yAxis = d3.svg.axis().scale(yScale).orient("left").ticks(5).tickSize(6, 0);
        var yBar = axisArea.append("g").attr("class", "Axis").attr("transform", "translate(" + that.padding.left + ", 0)");
        yAxis(yBar);
        yBar.selectAll("text").text(function(d, i){return 10*i;}).attr({"font-family":"黑体", "font-size":"12px", "fill":"#fff"});
        yBar.selectAll("path").attr({"fill":"none", "stroke":"#05bcfe", "stroke-width":"1px", "shape-rendering":"crispEdges"});
        yBar.selectAll("line").attr({"fill":"none", "stroke":"#05bcfe", "stroke-width":"1px"});
    },
    
    addLegend : function(){
    	var that = this;
    	// 绘制图例
        var legendX = that.width-that.padding.right-0.5*that.gap;
        var legendY = that.padding.top+0.5*that.gap;
        var legendRect = this.svg.append("g").attr("class", "legendRect");
        legendRect.selectAll("rect").data(that.types).enter().append("rect").attr({
        	"x": legendX,
        	"y": function(d, i){ return legendY+that.gap*i; },
        	"width": that.gap,
        	"height": 0.5*that.gap,
        	"fill": function(d, i){ return that.colors[i]; },
        	"opacity": 1
        })
        .on("click", function(d, i){ 
        	that.taketurns();
        	if ("gray" != d3.select(this).attr("fill")){
        		d3.select(this).attr("fill", "gray");
        		that.svg.select(".areaPath"+i).transition().delay(100).duration(400).ease("linear").attr("opacity", 0);
        	}else{
        		d3.select(this).attr("fill", that.colors[i]);
        		that.svg.select(".areaPath"+i).transition().delay(100).duration(400).ease("linear").attr("opacity", 0.5);
        	}
        });
        legendRect.selectAll("text").data(that.types).enter().append("text").attr({
        	"x": legendX+1.5*that.gap,
        	"y": function(d, i){ return legendY+that.gap*(0.5+i); },
        	"font-family":"黑体",
        	"fill":"#fff",
        	"font-size":"12px"
        }).text(function(d, i){ return that.types[i]; });
    },
    
	basicArea : function(){
		this.addTitle();
		this.addAxis();
		this.addLegend();     
	},
	drawData : function(){
		// 绘制区域图
		var that = this;
		if(!this.svg.select(".chartArea").empty()){
			this.svg.select(".chartArea").remove();
		}
        var legendX = that.width-that.padding.right-0.5*that.gap;
        var legendY = that.padding.top+0.5*that.gap;
        var area = that.svg.append("g").attr("class","chartArea");
        for (var j=0; j<that.types.length; ++j)
        {
        	var startPath = d3.svg.area()
            .x(function(d, i){return that.padding.left+that.gap+i*((that.width-that.padding.left-that.padding.right-2*that.gap)/(that.xMarks.length-1));})
            .y0(function(d, i){return that.height-that.padding.bottom;})
            .y1(function(d, i){return that.height-that.padding.bottom;});
            var areaPath = d3.svg.area()
                .x(function(d, i){return that.padding.left+that.gap+i*((that.width-that.padding.left-that.padding.right-2*that.gap)/(that.xMarks.length-1));})
                .y0(function(d, i){return that.height-that.padding.bottom;})
                .y1(function(d, i){return that.height-that.padding.bottom-d*((that.height-that.padding.bottom-that.padding.top-that.gap)/d3.max(d3.merge(that.dataSet)));});
            area.append("path").attr({
            	"class":"areaPath"+j,
                "d":startPath(that.dataSet[j]),
                "stroke":"none",
                "fill":that.colors[j],
                "opacity": 0.5
            }).transition().delay(200+400*j).duration(800).ease("circle-out").attr("d",areaPath(that.dataSet[j]));
        }
	}
});

/**
 * 多数据纵向柱图
 * 
 * @param args
 *            zhnx.chart.multiColumn({ selector : zhnx.windows.custom({ id:
 *            "widget4", pagePath: "module/waterCloud/agriculture", selector:
 *            "#centerZone", title: "治理水土流失面积" }, 400, 300), title:"治理水土流失面积",
 *            unit:"平方公里", years:["2013年", "2014年", "2015年"], series:[{
 *            city:"银川", data:[2250, 3670, 4440] },{ city:"石嘴山", data:[2768,
 *            2367, 4780] },{ city:"吴忠", data:[3540, 1679, 5080] },{ city:"固原",
 *            data:[1467, 4527, 2500] },{ city:"中卫", data:[4680, 5500, 1500] }] })
 */
zhnx.chart.multiColumn = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.multiColumn.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.multiColumn,
	_defaults : {},
	
	title : undefined,
	unit : undefined,
	years : undefined,
    citys : undefined,
    columnWidth : undefined,// 每一个柱子宽度
    dataSet : undefined,
    padding : {left:60, top:30, right:30, bottom:40},
    colors : ["#ffe91d", "#f6a704", "#e57509", "#674424", "#3d3334"],
    yGap : 1000,// y轴间隔值
    xGap : undefined,// x轴组间隔
    xBlank : 10,// x轴每组数据间空隙
    
    init : function(args){
    	this.baseInit(args.selector);
		this.title = args.title;
		this.unit = args.unit;
		this.years = args.years;
		this.xGap = (this.width - 4*this.padding.right)/args.years.length;
		this.citys = d3.map(args.series, function(d){return d.city;}).keys();
		this.columnWidth = (this.xGap-2*this.xBlank)/this.citys.length;
		this.dataSet = [];	
		for (var i=0; i<this.citys.length; ++i){
			this.dataSet.push(args.series[i].data);
		}
		this.drawBasicArea();
		this.drawChart();
		this.taketurns();
    },
    repaint : function(){
    	this.drawChart();
    },
    
    addTitle : function(){
    	// 添加标题
    	var that = this;
    	var titleArea = this.svg.append("g").attr("class", "titleArea");
    	titleArea.append("text").text(that.title).attr({
            "x": that.width / 2,
            "y": that.padding.top,
            "fill": "#e57509",
            "font-family": "黑体",
            "font-size": "24px",
            "font-weight": "bold",
            "text-anchor": "middle",
            "dominant-baseline": "middle"
        });
        // 添加纵轴标注
    	titleArea.append("g").append("text").text(that.unit).attr({
            "x": that.padding.left,
            "y": 2.5 * that.padding.top,
            "fill": "#fff",
            "font-family": "黑体",
            "font-size": "12px",
            "text-anchor": "middle"
        });
    },
    
    addAxis : function(){
    	var that = this;
    	var axisArea = that.svg.append("g").attr("class", "axisArea");
    	// 画坐标轴
    	axisArea.append("g").attr("class", "g_axis").append("line").attr({
            "class": "axisLine",
            "x1": that.padding.left,
            "y1": that.height - that.padding.bottom,
            "x2": that.width - that.padding.right,
            "y2": that.height - that.padding.bottom
        });
    	axisArea.select(".g_axis").append("line").attr({
            "class": "axisLine",
            "x1": that.padding.left,
            "y1": that.height - that.padding.bottom,
            "x2": that.padding.left,
            "y2": 3 * that.padding.top
        });
    	axisArea.selectAll(".axisLine").attr({
            "stroke": "#fff",
            "stroke-width": "1px"
        });
        // 画坐标轴、刻度值
        for (var i = 0; i < that.years.length; ++i) {
        	axisArea.append("text").text(that.years[i]).attr({
                "x": that.padding.left + (i + 0.5) * that.xGap,
                "y": that.height - that.padding.bottom / 2,
                "fill": "#fff",
                "font-family": "黑体",
                "font-size": "12px",
                "text-anchor": "middle",
                "dominant-baseline": "middle"
            })
        }
        var yScale = d3.scale.linear()
            .domain([0, d3.max(d3.merge(that.dataSet))])
            .range([that.height - that.padding.bottom, 3 * that.padding.top]);
        var yAxis = d3.svg.axis().scale(yScale).orient("left").ticks(5).tickSize(6,0);
        var yBar = axisArea.append("g").attr("class", "Axis").attr("transform", "translate(" + that.padding.left + ", 0)");
        yAxis(yBar);
        yBar.selectAll("text").text(function (d, i) {
            return that.yGap * i;
        }).attr({"font-family": "黑体", "font-size": "12px", "fill": "#fff"})
        yBar.selectAll("path").attr({
            "fill": "none",
            "stroke": "#fff",
            "stroke-width": "1px",
            "shape-rendering": "crispEdges"
        });
        yBar.selectAll("line").attr({"fill": "none", "stroke": "#fff", "stroke-width": "1px"});
    },
    
    addLegend : function(){
    	var that = this;
    	// 绘制图例
        var legendX = that.width-2*that.padding.right;
        var legendY = 2*that.padding.top;
        var legendW = 0.6*that.padding.top;
        var legendH = 0.3*that.padding.top;
        var legendRect = this.svg.append("g").attr("class", "legendRect");
        legendRect.selectAll("rect").data(that.citys).enter().append("rect").attr({
        	"x": that.width-2*that.padding.right,
        	"y": function(d, i){ return legendY+i*1.5*legendH; },
        	"width": 0.6*that.padding.top,
        	"height": legendH,
        	"fill": function(d, i){ return that.colors[i]; },
        	"opacity": 1
        })
        .on("click", function(d, i){  
        	that.taketurns();
        	if ("gray" != d3.select(this).attr("fill")){
        		d3.select(this).attr("fill", "gray");
        		for(var iIndex=0; iIndex<that.years.length; ++iIndex){
        			that.svg.select(".rect"+i+iIndex).transition().delay(100).duration(400).ease("linear").attr("opacity", 0);
        		}        		
        	}else{
        		d3.select(this).attr("fill", that.colors[i]);
        		for(var iIndex=0; iIndex<that.years.length; ++iIndex){
        			that.svg.select(".rect"+i+iIndex).transition().delay(100).duration(400).ease("linear").attr("opacity", 1);
        		}        		
        	}
        });
        legendRect.selectAll("text").data(that.citys).enter().append("text").attr({
        	"x": legendX+1.2*legendW,
        	"y": function(d, i){ return legendY+i*1.5*legendH; },
        	"font-family": "黑体",
        	"font-size": "12px",
        	"fill":"#fff",
        	"text-anchor":"left",
        	"dy":"0.6em"
        }).text(function(d, i){ return that.citys[i]; });
    },
    
    drawBasicArea : function(){
    	this.addTitle();
        this.addAxis();
        this.addLegend();        
    },
    
    drawChart : function(){
    	// 绘制柱状图
    	var that = this;
    	var chartArea;
    	if (!that.svg.select(".chartArea").empty()){
    		chartArea = that.svg.select(".chartArea");
    	}else{
    		chartArea = that.svg.append("g").attr("class", "chartArea");
    	}
        for (var i = 0; i < that.years.length; i++) {
            var xPosition = that.padding.left + i * that.xGap + that.xBlank;
            for (var j = 0; j < that.citys.length; j++) {
                var yValue = that.dataSet[j][i] * (that.height - that.padding.bottom - 4 * that.padding.top) / d3.max(d3.merge(that.dataSet));
                var yPosition = that.height - that.padding.bottom - yValue;
                if(!chartArea.select(".rect"+j+i).empty()){
                	chartArea.select(".rect"+j+i).attr("y", that.height - that.padding.bottom).attr("height", 0)
                	.transition().delay(function(){return j * 200;}).duration(1000).ease("circle-out").attr({
                        "y": yPosition,
                        "height": yValue
                    });
                }else{
                	chartArea.append("rect").attr({
                        "class":"rect"+j+i,
                        "x": xPosition + j * that.columnWidth,
                        "y": that.height - that.padding.bottom,
                        "width": that.columnWidth,
                        "height": 0,
                        "fill": that.colors[j],
                        "stroke": "none"
                    })
                    .on("mouseover", function(){
                    	var iIndex = d3.select(this).attr("class").charAt(4);
                    	var jIndex = d3.select(this).attr("class").charAt(5);
                    	zhnx.getTooltip().style({
        	        		"opacity": "0.9",
        	        		"width": "130px",
        	        		"height": "50px",
        	        		"line-height": "23px",
        	        		"z-index": "99999",
        	        		"left": (d3.event.pageX - 75) + "px",
        	        		"top": (d3.event.pageY - 67) + "px"
        	        	})
        	        	.html(that.years[jIndex] + that.citys[iIndex] + "<br>" + that.dataSet[iIndex][jIndex] + that.unit);
                    })
                    .on("mouseout", function(){
                    	zhnx.getTooltip().style({
        	        		"opacity": 0,
        	        		"z-index": "-1"
        	        	});
                    })
                    .transition().delay(function () {
                        return j * 200;
                    }).duration(1000).ease("circle-out").attr({
                        "y": yPosition,
                        "height": yValue
                    });
                }

            }
        }
        // 添加鼠标悬浮事件
    }
});

/**
 * 多数据三角柱图
 * 
 * @param args
 *            zhnx.chart.multiTriangleColumn({ selector: zhnx.windows.custom({
 *            id: "widget7", pagePath: "module/waterCloud/agriculture",
 *            selector: "#centerZone", title: "饮水困难师生" }, 400, 300), title:
 *            "饮水困难师生", unit: "万人", citys: ["银川", "石嘴山", "吴忠", "固原", "中卫"],
 *            series: [{ year: "2013年", data: [2.25, 3.67, 4.44, 3.22, 5.18] }, {
 *            year: "2014年", data: [3.25, 2.67, 3.44, 4.22, 4.18] }, { year:
 *            "2015年", data: [4.25, 4.67, 2.44, 5.22, 3.18] }] });
 */
zhnx.chart.multiTriangleColumn = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.multiTriangleColumn.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.multiTriangleColumn,
	_defaults : {},
	
	title : undefined,
	unit : undefined,
	citys : undefined,
	dataSet : undefined,
	years : undefined,
	padding : {left:40, top:30, right:50, bottom:50},
    colors : ["#05bcfe", "#4981bc", "#1e3680"],
    yGap : 1,// y轴间隔值
    xGap : undefined,// x轴组间隔
    xBlank : 8,// x轴每组数据间空隙
    columnWidth : undefined,// 每一个柱子宽度
    
    init : function(args){
    	this.baseInit(args.selector);
		this.title = args.title;
		this.unit = args.unit;
		this.citys = args.citys;
		this.years = d3.map(args.series, function(d){return d.year;}).keys();
		this.xGap = (this.width - this.padding.left - 2*this.padding.right)/this.citys.length;
		this.columnWidth = (this.xGap-2*this.xBlank)/this.years.length;
		this.dataSet = [];
		for (var i=0; i<this.years.length; ++i){
			this.dataSet.push(args.series[i].data);
		}
		this.drawBasicChart();
		this.drawChart();
		this.taketurns();
    },
    repaint : function(){
    	this.drawChart();
    },
    
    addTitleArea : function(){
    	var that = this;
    	var titleArea = that.svg.append("g").attr("class", "titleArea");
    	// 添加标题
    	titleArea.append("text").text(that.title).attr({
            "x": that.width/2,
            "y": that.padding.top,
            "fill": "#e57509",
            "font-family": "黑体",
            "font-size": "24px",
            "font-weight":"bold",
            "text-anchor": "middle",
            "dominant-baseline": "middle"
        });
        // 添加纵轴标注
    	titleArea.append("text").text(that.unit).attr({
            "x":that.padding.left,
            "y":2.5*that.padding.top,
            "fill":"#fff",
            "font-family":"黑体",
            "font-size":"12px",
            "text-anchor":"middle"
        });
        // 画横坐标轴
    	titleArea.append("line").attr({
            "class":"axisLine",
            "x1": that.padding.left,
            "y1": that.height - that.padding.bottom,
            "x2": that.width - 1.5*that.padding.right,
            "y2": that.height - that.padding.bottom,
            "stroke":"#fff",
            "stroke-width":"1px"
        });
        for(var i=0; i<that.citys.length; ++i)
        {
        	titleArea.append("text").text(that.citys[i]).attr({
                "x":that.padding.left+(i+0.5)*that.xGap,
                "y":that.height-that.padding.bottom/2,
                "fill": "#fff",
                "font-family": "黑体",
                "font-size": "12px",
                "text-anchor": "middle",
                "dominant-baseline": "middle"
            })
        }    	
    },
    
    addAxis : function(){
    	var that = this;
    	var axisArea = that.svg.append("g").attr("class", "axisArea");
        // 画纵坐标轴、刻度值
        var yScale = d3.scale.linear()
            .domain([0, d3.max(d3.merge(that.dataSet))])
            .range([that.height-that.padding.bottom, 3*that.padding.top]);
        var yAxis = d3.svg.axis().scale(yScale).orient("left").ticks(6).tickSize(6, 0);
        var yBar = axisArea.append("g").attr("class", "Axis").attr("transform", "translate(" + that.padding.left + ", 0)");
        yAxis(yBar);
        yBar.selectAll("text").text(function(d, i){return that.yGap*i;}).attr({"font-family":"黑体", "font-size":"12px", "fill":"#fff"})
        yBar.selectAll("path").attr({"fill":"none", "stroke":"#fff", "stroke-width":"1px", "shape-rendering":"crispEdges"});
        yBar.selectAll("line").attr({"fill":"none", "stroke":"#fff", "stroke-width":"1px"});
    },
    
    addLegend : function(){
    	var that = this;
    	// 绘制图例
        var legendX = that.width-2*that.padding.right;
        var legendY = 2*that.padding.top;
        var legendW = 0.6*that.padding.top;
        var legendH = 0.3*that.padding.top;
        var legendRect = this.svg.append("g").attr("class", "legendRect");
        legendRect.selectAll("rect").data(that.years).enter().append("rect").attr({
        	"x": that.width-2*that.padding.right,
        	"y": function(d, i){ return legendY+i*1.5*legendH; },
        	"width": 0.6*that.padding.top,
        	"height": legendH,
        	"fill": function(d, i){ return that.colors[i]; },
        	"opacity": 1
        })
        .on("click", function(d, i){  
        	that.taketurns();
        	if ("gray" != d3.select(this).attr("fill")){
        		d3.select(this).attr("fill", "gray");
        		for(var iIndex=0; iIndex<that.citys.length; ++iIndex){
        			that.svg.select(".path"+i+iIndex).transition().delay(100).duration(400).ease("linear").attr("opacity", 0);
        		}        		
        	}else{
        		d3.select(this).attr("fill", that.colors[i]);
        		for(var iIndex=0; iIndex<that.citys.length; ++iIndex){
        			that.svg.select(".path"+i+iIndex).transition().delay(100).duration(400).ease("linear").attr("opacity", 1);
        		}        		
        	}
        });
        legendRect.selectAll("text").data(that.years).enter().append("text").attr({
        	"x": legendX+1.2*legendW,
        	"y": function(d, i){ return legendY+i*1.5*legendH; },
        	"font-family":"黑体",
        	"font-size": "12px",
        	"fill":"#fff",
        	"text-anchor":"left",
        	"dy":"0.6em"
        }).text(function(d, i){ return that.years[i]; });
    },
    
    drawBasicChart : function(){
    	this.addTitleArea();
    	this.addAxis();
    	this.addLegend();        
    },
    
    drawChart : function(){
    	var that = this;
    	var chartArea;
    	if (!that.svg.select(".chartArea").empty()){
    		chartArea = that.svg.select(".chartArea");
    	}else{
    		chartArea = that.svg.append("g").attr("class", "chartArea");
    	}
    	// 绘制三角柱状图
        for(var i=0; i<that.dataSet[0].length; ++i){
            var xPosition = that.padding.left + i*that.xGap + that.xBlank;
            for(var j=0; j<that.years.length; ++j){
                var yValue = that.dataSet[j][i]*(that.height-that.padding.bottom-4*that.padding.top)/d3.max(d3.merge(that.dataSet));
                var startPath = "M "+(xPosition+j*that.columnWidth).toString()+" "+(that.height-that.padding.bottom).toString()+" L "
                    +(xPosition+(0.5+j)*that.columnWidth).toString()+" "+(that.height-that.padding.bottom).toString()+" L "
                    +(xPosition+(1+j)*that.columnWidth).toString()+" "+(that.height-that.padding.bottom).toString()+" L "
                    +(xPosition+j*that.columnWidth).toString()+" "+(that.height-that.padding.bottom).toString();
                var trianglePath = "M "+(xPosition+j*that.columnWidth).toString()+" "+(that.height-that.padding.bottom).toString()+" L "
                    +(xPosition+(0.5+j)*that.columnWidth).toString()+" "+(that.height-that.padding.bottom-yValue).toString()+" L "
                    +(xPosition+(1+j)*that.columnWidth).toString()+" "+(that.height-that.padding.bottom).toString()+" L "
                    +(xPosition+j*that.columnWidth).toString()+" "+(that.height-that.padding.bottom).toString();
                if(!chartArea.select(".path"+j+i).empty()){
                	chartArea.select(".path"+j+i).attr("d", startPath).transition().delay(function() { return j * 250;}).duration(1000).ease("circle-out")
                        .attr("d", trianglePath);
                }else{
                	chartArea.append("path").attr({
                        "class":"path"+j+i,
                        "d":startPath,
                        "fill":that.colors[j],
                        "stroke":"none",
                        "opacity":1-0.2*j
                    })
                    .on("mouseover", function(){
                    	var iIndex = d3.select(this).attr("class").charAt(4);
                    	var jIndex = d3.select(this).attr("class").charAt(5);
                    	zhnx.getTooltip().style({
        	        		"opacity": "0.9",
        	        		"width": "130px",
        	        		"height": "50px",
        	        		"line-height": "23px",
        	        		"z-index": "99999",
        	        		"left": (d3.event.pageX - 75) + "px",
        	        		"top": (d3.event.pageY - 67) + "px"
        	        	})
        	        	.html(that.citys[jIndex] + "市" + that.years[iIndex] + "<br>" + that.dataSet[iIndex][jIndex] + that.unit);
                    })
                    .on("mouseout", function(){
                    	zhnx.getTooltip().style({
        	        		"opacity": 0,
        	        		"z-index": "-1"
        	        	});
                    })
                    .transition().delay(function () {
                        return j * 250;
                    }).duration(1000).ease("circle-out").attr("d", trianglePath);

                }
            }
        }
    }
});

/**
 * 箭形柱图
 * 
 * @param args
 *            zhnx.chart.arrow({ selector: zhnx.windows.custom({ id: "widget8",
 *            pagePath: "module/waterCloud/agriculture", selector:
 *            "#centerZone", title: "管理成本降低" }, 400, 425), title:"管理成本降低",
 *            years:["2013年", "2014年", "2015年"], series:[{ city:"银川",
 *            data:[0.12, 0.33, 0.55] },{ city:"石嘴山", data:[0.28, 0.44, 0.60]
 *            },{ city:"吴忠", data:[0.38, 0.55, 0.71] },{ city:"固原", data:[0.49,
 *            0.65, 0.88] },{ city:"中卫", data:[0.50, 0.75, 0.92] }] });
 * 
 */
zhnx.chart.arrow = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.arrow.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.arrow,
	_defaults : {},

	title : undefined,
	years : undefined,
	citys : undefined,
	dataSet : undefined,
	padding : {left:20, top:20, right:20, bottom:20},
    arrowArea : {width:70, height:40},
    
    init : function(args){
    	this.baseInit(args.selector);
		this.title = args.title;
		this.years = args.years;
		this.citys = d3.map(args.series, function(d){return d.city;}).keys();
		this.dataSet = [];
		for (var i=0; i<this.citys.length; ++i){
			this.dataSet.push(args.series[i].data);
		}
		this.drawBasicArea();
		this.drawChart();
		this.taketurns();
    },
    repaint : function(){
	    this.drawChart();
    },
    drawBasicArea : function(){
    	var that = this;
    	// 添加标题
    	var titleArea = this.svg.append("g").attr("class", "titleArea");
    	titleArea.append("text").text(that.title).attr({
            "x": that.width/2,
            "y": 2*that.padding.top,
            "fill": "#e57509",
            "font-family": "黑体",
            "font-size": "24px",
            "font-weight":"bold",
            "text-anchor": "middle",
            "dominant-baseline": "middle"
        });
        // 添加城市、年份坐标
        for(var i=0; i<that.citys.length; ++i){
        	titleArea.append("text").text(that.citys[i]).attr({
                "x":40,
                "y":100 + 55*i,
                "fill": "#fff",
                "font-family": "黑体",
                "font-size": "14px",
                "text-anchor": "middle",
                "dominant-baseline": "middle"
            })
        }
        for(var i=0; i<that.years.length; ++i){
        	titleArea.append("text").text(that.years[i]).attr({
                "x":120 + 110*i,
                "y":100 + 55*that.citys.length,
                "fill": "#fff",
                "font-family": "黑体",
                "font-size": "14px",
                "text-anchor": "middle",
                "dominant-baseline": "middle"
            })
        }
        this.drawBasicArrow();
    },
    drawBasicArrow : function(){
    	var that = this;
    	var basicArrow = that.svg.append("g").attr("class", "basicArrow");
    	for(var i=0; i<this.years.length; ++i){
            var xx = 120 + 110*i;
            for(var j=0; j<this.citys.length; ++j){
                var yy = 100 + 55*j;
                basicArrow.append("rect").attr({
                    "x":xx-that.arrowArea.width/4,
                    "y":yy-that.arrowArea.height/2,
                    "width":that.arrowArea.width/2,
                    "height":that.arrowArea.height/2,
                    "fill":"#1e3680",
                    "stroke":"none"
                });
                var trianglePath = "M "+(xx-that.arrowArea.width/2).toString()+" "+yy+" H "+(xx+that.arrowArea.width/2).toString()
                    +" L "+xx+" "+(yy+that.arrowArea.height/2).toString()+" L "+(xx-that.arrowArea.width/2).toString()+" "+yy;
                basicArrow.append("path").attr("d", trianglePath).attr("fill", "#1e3680").attr("stroke", "none");                
            }
        }
    },
    
    drawChart : function(){
    	// 画箭头图
    	var that = this;
    	if(!that.svg.select(".g_chartArea").empty()){
    		that.svg.select(".g_chartArea").remove();
    	}
    	var chartArea = this.svg.append("g").attr("class", "g_chartArea");
        for(var i=0; i<this.years.length; ++i){
            var xx = 120 + 110*i;
            for(var j=0; j<this.citys.length; ++j){
                var yy = 100 + 55*j;
                var trianglePath = "M "+(xx-that.arrowArea.width/2).toString()+" "+yy+" H "+(xx+that.arrowArea.width/2).toString()
                	+" L "+xx+" "+(yy+that.arrowArea.height/2).toString()+" L "+(xx-that.arrowArea.width/2).toString()+" "+yy;
                var startPath = "M "+xx+" "+(yy+that.arrowArea.height/2).toString()+" H "+xx+" L "+xx+" "+(yy+that.arrowArea.height/2).toString()
                	+" L "+xx+" "+(yy+that.arrowArea.height/2).toString();
            
	            if(that.dataSet[j][i]>=0.5){
	            	chartArea.append("path").attr("d", startPath).attr("fill", "#05bcfe").attr("stroke", "none")
	                    .transition().delay(200+i*300).duration(500).ease("linear").attr("d", trianglePath);
	                var t = (that.dataSet[j][i]-0.5)*1000;
	                chartArea.append("rect").attr({
	                    "x":xx-that.arrowArea.width/4,
	                    "y":yy,
	                    "width":that.arrowArea.width/2,
	                    "height":0,
	                    "fill":"#05bcfe",
	                    "stroke":"none"
	                }).transition().delay(700+i*300).duration(t).ease("linear").attr({
	                    "y":yy-(that.dataSet[j][i]-0.5)*that.arrowArea.height,
	                    "height":(that.dataSet[j][i]-0.5)*that.arrowArea.height
	                });
	            }else{
	                var fillPath = "M "+(xx-that.dataSet[j][i]*that.arrowArea.width).toString()+" "+(yy+(0.5-that.dataSet[j][i])*that.arrowArea.height).toString()+" H "
	                    +(xx+that.dataSet[j][i]*that.arrowArea.width).toString()+" L "+xx+" "+(yy+that.arrowArea.height/2).toString()+" L "
	                    +(xx-that.dataSet[j][i]*that.arrowArea.width).toString()+" "+(yy+(0.5-that.dataSet[j][i])*that.arrowArea.height).toString();
	                chartArea.append("path").attr("d", startPath).attr("fill", "#05bcfe").attr("stroke", "none")
	                    .transition().delay(500+i*300).duration(1000).ease("circle-out").attr("d", fillPath);
	            }
	            var Text = that.accMul(100, that.dataSet[j][i]).toString() + "%";
	            chartArea.append("text").text(Text).attr({
	                "x":xx,
	                "y":yy+that.arrowArea.height/6,
	                "fill": "#fff",
	                "font-family": "黑体",
	                "font-size": "12px",
	                "text-anchor": "middle",
	                "dominant-baseline": "middle",
	                "opacity": 0
	            }).transition().delay(1000).duration(300).attr("opacity", 1);
            }
        }
    },
    
    // 乘法函数，用来得到精确的乘法结果
    // 说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。
    // 调用：accMul(arg1,arg2)
    // 返回值：arg1乘以arg2的精确结果
    accMul : function(arg1,arg2)
    {
    	 var m=0,s1=arg1.toString(),s2=arg2.toString();
         try{m+=s1.split(".")[1].length}catch(e){}
         try{m+=s2.split(".")[1].length}catch(e){}
         return Number(s1.replace(".",""))*Number(s2.replace(".",""))/Math.pow(10,m)
    }
});

/**
 * 营养早餐成本及发放率
 * 
 * @class zhnx.chart.eduStudentAndTeacherAmount
 * 
 */
zhnx.chart.eduFoodCostAndPostRatio = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduFoodCostAndPostRatio.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.eduFoodCostAndPostRatio,
	_defaults : {},	
	
	padding : {left:40, top:30, right:100, bottom:30},
	costColors : "#f6a704",
	postColors : ["#172763", "#05bcfe"],
	axisColor : "#05bcfe",
	opacitys : [1, 0.8, 0.6],
	outerPadding : 20,// x轴的左边和右边的外部间距
	gap : 4,// 小矩形间隔
	rectGap : 20,// 矩形百分比图的整体间隔
	rectLine : 5,// 每一个矩形块百分图有5列
	
	title : undefined,
	unit : undefined,
	years : undefined,
	types : undefined,
	citys : undefined,
	postRatios : undefined,
	costs : undefined,		
	xGapWidth : undefined,// 每一年所有类型的三角柱图的宽度
	coloumWidth : undefined,// 每一个三角柱图的宽度
	rectWidth : undefined,// 小矩形百分图每个矩形的宽度
	xScale : undefined,
	yScale : undefined,
	axisAreaHeight : undefined,// 坐标轴部分的高度
	chartArea : undefined,// 绘图区域
	cityLegend : undefined, // 城市图例部分
	typeLegend : undefined,// 类型图例部分
	iCount : 0,
	
	init : function(args){
		this.baseInit(args.selector);
		this.chartArea = this.svg.append("g").attr("class", "chartArea");
		this.cityLegend = this.svg.append("g").attr("class", "cityLegend");
		this.typeLegend = this.svg.append("g").attr("class", "typeLegend");
		this.title = args.title;
		this.unit = args.unit;
		this.years = args.years;
		this.types = args.types;			
		this.citys = d3.map(args.series, function(d){return d.city;}).keys();
		this.postRatios = [];
		this.costs = [];
		for(var i=0; i<this.citys.length; ++i){
			this.postRatios.push(args.series[i].postRatio);
	        this.costs.push(args.series[i].cost);
		}
		this.xGapWidth = (this.width-1.5*this.padding.right-this.padding.left-2*this.outerPadding)/this.years.length;
		this.coloumWidth = (this.xGapWidth-this.outerPadding)/this.types.length;
		this.rectWidth = Math.floor((this.xGapWidth-this.rectGap)/this.rectLine-this.gap);
		this.axisAreaHeight = 0.6 * this.height;
		this.xScale = d3.scale.ordinal().domain(this.years)
			.rangeRoundBands([this.padding.left, this.width-1.5*this.padding.right-this.xGapWidth], 1, this.outerPadding/this.xGapWidth);
		this.yScale = d3.scale.linear().domain([0, d3.max(d3.merge(d3.merge(this.costs)))]).range([this.axisAreaHeight, 2.5*this.padding.top]);
		this.drawBasicArea();
		this.selectCity(0);// 初始化选中银川市
		this.taketurns();
		
	},
	
	repaint : function(){
		this.iCount = (++this.iCount)%this.citys.length;
		this.selectCity(this.iCount);
    },
	
	drawBasicArea : function(){
		this.addTitleAndUnit();
		this.addAxis();
	    this.addLegend();
	    this.drawBasicPostRatioArea();
	},
	// 绘制投放率的动态部分
    drawPostRatioArea : function(iIndex){
    	var that = this;
        this.clearPostRatioArea();
        var postRatioArea = that.svg.append("g").attr("class", "postRatioArea");
        var lines = [];
        var rows = [];
        // 确定行列
        for(var i=0; i<that.years.length; ++i){
            lines.push(Math.floor(that.postRatios[iIndex][i]/10));
            rows.push(that.postRatios[iIndex][i]%10);
        }
        for(var i=0; i<that.years.length; ++i){
            var xStartValue = that.xScale(that.years[i])+that.rectWidth;
            var yStartValue = that.axisAreaHeight+35+9*(that.gap+that.rectWidth);
            for(var j=0; j<lines[i]; ++j){
                for(var k=0; k<5; ++k){
                    // 整行部分
                    postRatioArea.append("rect").attr({
                        "x": xStartValue+k*(that.gap+that.rectWidth),
                        "y": yStartValue-j*(that.gap+that.rectWidth),
                        "width": that.rectWidth,
                        "height": 0,
                        "fill": that.postColors[1],
                        "stroke": "none"
                    }).transition().delay(100*j+100*k).duration(100).ease("linear").attr("height", that.rectWidth);
                }
            }
            for(var m=0; m<Math.floor(rows[i]/2); ++m){
                // 最上面一行的整块部分
                postRatioArea.append("rect").attr({
                    "x": xStartValue+m*(that.gap+that.rectWidth),
                    "y": yStartValue-lines[i]*(that.gap+that.rectWidth),
                    "width": that.rectWidth,
                    "height": 0,
                    "fill": that.postColors[1],
                    "stroke": "none"
                }).transition().delay(100*lines[i]+500).duration(100).ease("linear").attr("height", that.rectWidth);
            }
            if(rows[i]%2 != 0){
                // 如果有占半个矩形的
                postRatioArea.append("rect").attr({
                    "x": xStartValue+Math.floor(rows[i]/2)*(that.gap+that.rectWidth),
                    "y": yStartValue-lines[i]*(that.gap+that.rectWidth),
                    "width": 0.5*that.rectWidth,
                    "height": 0,
                    "fill": that.postColors[1],
                    "stroke": "none"
                }).transition().delay(100*lines[i]+500).duration(100).ease("linear").attr("height", that.rectWidth);
            }
        }
        // 百分比值部分
        postRatioArea.append("g").selectAll("text").data(that.postRatios[iIndex]).enter().append("text").attr({
            "x": function(d, i){ return that.xScale(that.years[i])+3*(that.gap+that.rectWidth); },
            "y": that.axisAreaHeight+35+11*(that.gap+that.rectWidth),
            "font-family": "黑体",
            "font-size": "18px",
            "font-weight":"bold",
            "fill": "#fff",
            "text-anchor":"middle",
            "dy":"0.5em"
        }).text(function(d){ return d+"%"; });
    },
	// 绘制发放率基础图
    drawBasicPostRatioArea : function(){
    	var that = this;
        var postRatioArea = that.svg.append("g").attr("class", "basicPostRatioArea");
        for(var i=0; i<that.years.length; ++i){
            var xStartValue = that.xScale(that.years[i])+that.rectWidth;
            var yStartValue = that.axisAreaHeight+35;
            var g_temp = postRatioArea.append("g").attr("class", "postRect"+i);
            for(var j=0; j<10; ++j){
                for(var k=0; k<5; ++k){
                    g_temp.append("rect").attr({
                        "x": xStartValue+k*(that.gap+that.rectWidth),
                        "y": yStartValue+j*(that.gap+that.rectWidth),
                        "width": that.rectWidth,
                        "height": that.rectWidth,
                        "fill": that.postColors[0],
                        "stroke": "none"
                    });
                }
            }
            postRatioArea.append("rect").attr({
                "x": xStartValue,
                "y": yStartValue+10*(that.gap+that.rectWidth),
                "width": 5*(that.gap+that.rectWidth)-that.gap,
                "height": 2*(that.gap+that.rectWidth),
                "fill": that.costColors,
                "stroke": "none"
            });
            var x1 = xStartValue;
            var x2 = xStartValue+5*(that.gap+that.rectWidth)-that.gap;
            var x3 = 0.5*(x1+x2);
            var y1 = yStartValue+12*(that.gap+that.rectWidth);
            var y2 = y1;
            var y3 = y2+1.5*(that.gap+that.rectWidth);
            var fillPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y3+" L "+x1+" "+y1;
            postRatioArea.append("path").attr({
                "d":fillPath,
                "fill":that.costColors,
                "stroke": "none"
            });
        }
    },
	// 绘制成本部分
    drawCostArea : function(iIndex){
    	var that = this;
        this.clearCostArea();	
        var costChart = that.chartArea.append("g").attr("class", "costChart"+iIndex);
        for(var i=0; i<that.types.length; ++i){
            var coloumChart = costChart.append("g").attr("class", "coloumChart"+iIndex+i);
            var tipLineChart = costChart.append("g").attr("class", "tipLineChart"+iIndex+i);
            var tipTextChart = costChart.append("g").attr("class", "tipTextChart"+iIndex+i);
            for(var j=0; j<that.years.length; ++j){
                var x1 = that.xScale(that.years[j])+i*that.coloumWidth;
                var x2 = x1+that.coloumWidth;
                var x3 = 0.5*(x1+x2);
                var y1 = that.yScale(0);
                var y2 = y1;
                var y3 = that.yScale(that.costs[iIndex][j][i]);
                var y4 = y1;
                var startPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y4+" L "+x1+" "+y1;
                var fillPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y3+" L "+x1+" "+y1;
                coloumChart.append("path").attr({
                    "d": startPath,
                    "fill": that.costColors,
                    "stroke-width": "1px",
                    "stroke": "none",
                    "opacity": that.opacitys[i]
                })
                    .on("mouseover", function(){
                        d3.select(this).transition().delay(100).duration(200).attr("stroke", "#fff");
                    })
                    .on("mouseout", function(){
                        d3.select(this).transition().delay(100).duration(200).attr("stroke", "none");
                    })
                    .transition().delay(200).duration(600).ease("circle-out").attr("d", fillPath);
                tipLineChart.append("line").attr({
                    "x1": x3,
                    "y1": y3,
                    "x2": x3-that.coloumWidth+5,
                    "y2": y3,
                    "stroke-width": "2px",
                    "stroke": that.costColors,
                    "opacity": 0
                }).transition().delay(800).duration(200).attr("opacity", 1);
                tipTextChart.append("text").text(that.costs[iIndex][j][i]).attr({
                    "x": x3-0.5*that.coloumWidth,
                    "y": y3-10,
                    "font-family": "黑体",
                    "font-size": "12px",
                    "fill": "#fff",
                    "text-anchor":"middle",
                    "dy":"0.35em",
                    "opacity": 0
                }).transition().delay(800).duration(200).attr("opacity", 1);
            }
        }
    },
	// 画图例部分
	addLegend : function(){	
		var that = this;
	    // 类型图例
	    that.typeLegend.selectAll("rect").data(that.types).enter().append("rect").attr({
	            "class":function(d, i){ return "rect"+i; },
	            "x": that.width-1.5*that.padding.right,
	            "y": function(d, i){ return 2*that.padding.top+0.8*i*that.padding.top; },
	            "width": 0.5*that.padding.top,
	            "height": 0.4*that.padding.top,
	            "fill": that.costColors,
	            "stroke": "none",
	            "opacity":function(d,i){ return that.opacitys[i]; }
	        })
	        .on("click", function(d, i){
	        	that.taketurns();
	            if(d3.select(this).attr("fill")==that.costColors){
	                d3.select(this).transition().delay(100).duration(200).attr("fill", "gray");
	                for(var m=0; m<that.citys.length; ++m){
	                    if(that.svg.select(".cityLegendRect"+m).attr("opacity")==1){
	                    	that.svg.select(".coloumChart"+m+i).transition().delay(100).duration(400).attr("opacity", 0);
	                    	that.svg.select(".tipLineChart"+m+i).transition().delay(100).duration(400).attr("opacity", 0);
	                    	that.svg.select(".tipTextChart"+m+i).transition().delay(100).duration(400).attr("opacity", 0);
	                    }
	                }
	            }else{
	                d3.select(this).transition().delay(100).duration(200).attr("fill", that.costColors);
	                for(var m=0; m<that.citys.length; ++m){
	                    if(that.svg.select(".cityLegendRect"+m).attr("opacity")==1){
	                    	that.svg.select(".coloumChart"+m+i).transition().delay(100).duration(400).attr("opacity", 1);
	                    	that.svg.select(".tipLineChart"+m+i).transition().delay(100).duration(400).attr("opacity", 1);
	                    	that.svg.select(".tipTextChart"+m+i).transition().delay(100).duration(400).attr("opacity", 1);
	                    }
	                }
	            }
	        });
	    that.typeLegend.selectAll("text").data(that.types).enter().append("text").attr({
	        "x": that.width-1.3*that.padding.right,
	        "y": function(d, i){ return 2*that.padding.top+0.8*i*that.padding.top; },
	        "font-family": "黑体",
	        "font-size": "14px",
	        "fill": that.costColors,
	        "text-anchor":"left",
	        "dy":"0.8em",
	        "opacity":function(d,i){ return that.opacitys[i]; }
	    }).text(function(d){ return d; });


	    // 城市图例
	    that.cityLegend.selectAll("rect").data(that.citys).enter().append("rect").attr({
	        "class":function(d, i){ return "cityLegendRect"+i; },
	        "x": that.width - 0.9 * that.padding.right,
	        "y": function(d, i){ return 1.6*that.padding.top+i*that.padding.top; },
	        "width": 0.8 * that.padding.right,
	        "height": 0.8 * that.padding.top,
	        "fill": that.costColors,
	        "stroke": "none",
	        "opacity":0
	    }).on("click", function(d, i){
	    	that.taketurns();
	        that.selectCity(i);
	    });
	    that.cityLegend.selectAll("circle").data(that.citys).enter().append("circle").attr({
	        "class":function(d, i){ return "circle"+i; },
	        "cx": that.width - 0.8 * that.padding.right,
	        "cy": function(d, i){ return 2*that.padding.top+i*that.padding.top; },
	        "r": "6px",
	        "fill":"none",
	        "stroke": that.costColors,
	        "stroke-width": "1px",
	        "opacity":1
	    });
	    that.cityLegend.selectAll("text").data(that.citys).enter().append("text").attr({
	        "class":function(d, i){ return "text"+i; },
	        "x": that.width - 0.65 * that.padding.right,
	        "y": function(d, i){ return 2*that.padding.top+i*that.padding.top; },
	        "font-family": "黑体",
	        "font-size": "16px",
	        "fill": "#fff",
	        "text-anchor":"left",
	        "dy":"0.35em"
	    })
	        .text(function(d){ return d; })
	        .on("click", function(d, i){
	        	that.selectCity(i);
	        });
	},
	selectCity : function(iIndex){
		if (1 == this.svg.select(".cityLegendRect"+iIndex).attr("opacity")){
			this.svg.select(".cityLegendRect"+iIndex).transition().delay(100).duration(400).attr("opacity", 0);
			this.freshCityLegendCircle();// 刷新城市图例状态
			this.clearPostRatioArea();// 清空投放率区域
			this.clearCostArea();// 清空成本区域
        }else{
        	this.freshCityLegendCircle();
        	this.freshCityLegendRect();
        	this.svg.select(".cityLegendRect"+iIndex).transition().delay(100).duration(400).attr("opacity", 1);
        	this.cityLegend.select(".circle"+iIndex).transition().delay(100).duration(400).attr("fill", "#fff");
        	this.drawPostRatioArea(iIndex);// 绘制投放率区域
        	this.drawCostArea(iIndex);// 绘制成本区域
        }
	},
	// 清空成本部分
	clearCostArea : function(){
		for(var i=0; i<this.citys.length; ++i){
            if(!this.chartArea.select(".costChart"+i).empty()){
                this.chartArea.select(".costChart"+i).remove();
            }
        }
	},
	// 清空动态投放率部分
    clearPostRatioArea : function(){
        if (!this.svg.select(".postRatioArea").empty()){
            this.svg.select(".postRatioArea").remove();
        }
    },
    // 刷新城市图例中的矩形部分
    freshCityLegendRect : function(){
        for(var i=0; i<this.citys.length; ++i){
            if(1 == this.svg.select(".cityLegendRect"+i).attr("opacity")){
                this.svg.select(".cityLegendRect"+i).transition().delay(100).duration(400).attr("opacity", 0);
            }
        }
    },
    // 刷新城市图例中的选中状态
    freshCityLegendCircle : function(){
        for(var i=0; i<this.citys.length; ++i){
            this.cityLegend.select(".circle"+i).attr("fill", "none");
        }
    },
	addTitleAndUnit : function(){
		// 添加标题
		var that = this;
	    this.svg.append("text").text(that.title).attr({
	        "x": 10,
	        "y": that.padding.top,
	        "dy": ".35em",
	        "fill": "#e57509",
	        "font-family": "黑体",
	        "font-size": "22px",
	        "font-weight": "bold",
	        "text-anchor": "left"
	    });
	  // 添加单位
	    this.svg.append("text").text(that.unit).attr({
	        "x": 0.7*that.padding.left,
	        "y": 2.2 * that.padding.top,
	        "dy": ".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "14px",
	        "text-anchor": "middle"
	    });
	},
	addAxis : function(){
		var that = this;
		// 画坐标轴
	    this.svg.append("line").attr({
	        "x1": that.padding.left,
	        "y1": that.axisAreaHeight,
	        "x2": that.width - 1.3*that.padding.right,
	        "y2": that.axisAreaHeight,
	        "stroke-width": "1px",
	        "stroke": that.axisColor,
	        "opacity": 0.8
	    });
	    this.svg.append("line").attr({
	        "x1": that.padding.left,
	        "y1": that.axisAreaHeight,
	        "x2": that.padding.left,
	        "y2": 2.3*that.padding.top,
	        "stroke-width": "1px",
	        "stroke": that.axisColor,
	        "opacity": 1
	    });
	    var yAxis = d3.svg.axis().scale(that.yScale).orient("left").tickSize(8);
	    var yBar = that.svg.append("g").attr("transform", "translate("+that.padding.left+",0)").call(yAxis);
	    yBar.selectAll("text").attr({
	            "font-family": "sans-serif",
	            "font-size": "12px",
	            "fill": "#fff"
	        }).text(function(d){ return (Math.floor(d) == d)? d : ""; });
	    yBar.selectAll("path").attr({
	        "fill": "none",
	        "stroke": that.axisColor,
	        "stroke-width": "1px",
	        "shape-rendering": "crispEdges"
	    });
	    yBar.selectAll("line").attr({"fill": "none", "stroke": that.axisColor, "stroke-width": "1px"});
	    // x轴比例尺
	    this.svg.append("g").selectAll("text").data(that.years).enter().append("text").attr({
	        "x": function(d){ return that.xScale(d)+1.5*that.coloumWidth; },
	        "y": that.axisAreaHeight+15,
	        "font-family": "黑体",
	        "font-size": "15px",
	        "fill": "#fff",
	        "text-anchor":"middle",
	        "dy":"0.35em"
	    }).text(function(d){ return d; });
	}	
});

/**
 * 三通两平台
 * 
 * @class zhnx.chart.eduStudentAndTeacherAmount
 * 
 */
zhnx.chart.eduSTLPT = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduSTLPT.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.eduSTLPT,
	_defaults : {},
	
	xGap : 5,
	yMaxValue : 12,
	yValue : [0, 3, 6, 9, 12],
    padding : {left: 30, top: 30, right: 40, bottom: 40},
    colors : ["#ffe91d","#f6a704", "#e57509", "#674424", "#3d3334"],
    
    chartArea : undefined,
    unit : undefined,
    years : undefined,
    types : undefined,
    dataSet : undefined,    
    total : undefined,    
    yHeight : undefined,
    yearWidth : undefined,
    coloumWidth : undefined,
    
	init : function(args){
		this.baseInit(args.selector);
		this.chartArea = this.svg.append("g").attr("class", "chartArea");
		this.unit = args.unit;
		this.years = args.years;
		this.types = args.types;
	    this.dataSet = args.dataSet;
	    this.total = [];
	    for(var i=0; i<this.dataSet.length; ++i){
	    	this.total.push(d3.sum(this.dataSet[i]));
	    }
	    this.yearWidth = (this.width - this.padding.left - this.padding.right)/this.years.length;
	    this.yHeight = (this.height-this.padding.bottom-2*this.padding.top)/this.yValue.length;	  
	    this.coloumWidth = (this.yearWidth-this.xGap*(this.types.length+1))/this.types.length;
	    
	    this.drawBasicArea();
	    this.drawChartArea();
		this.taketurns();
	},
	
	repaint : function(){
		this.drawChartArea();
    },
	
	drawBasicArea : function(){
		this.addTitle();
		this.addAxis();
	},
	
	drawChartArea : function(){
		this.drawLineArea();
	    this.drawColoumChart();
	},
	
	drawColoumChart : function(){
		var that = this;
		for(var i=0; i<that.years.length; ++i){
			if(!that.chartArea.select(".yearsColoum"+i).empty()){
				that.chartArea.select(".yearsColoum"+i).remove();
			}
		}
		for(var iIndex=0; iIndex<that.years.length; ++iIndex){
	        that.chartArea.append("g").attr("class", "yearsColoum"+iIndex).selectAll("rect").data(that.dataSet[iIndex]).enter().append("rect").attr({
	            "x": function(d, i){ return that.padding.left+iIndex*that.yearWidth+i*(that.xGap+that.coloumWidth)+that.xGap; },
	            "y": that.height-that.padding.bottom,
	            "width": that.coloumWidth,
	            "height": 0,
	            "fill": function(d, i){ return that.colors[i]; },
	            "stroke": "none"
	        })
	        .transition().delay(200).duration(800).ease("circle-out").attr({
	        	"y": function(d){ return that.height-that.padding.bottom-d*(that.yHeight/3); },
	        	"height": function(d){ return d*(that.yHeight/3); }
	        });
	    }
	},
	drawLineArea : function(){
		var that = this;
		if(!that.chartArea.selectAll(".totalCircle1").empty()){
			that.chartArea.selectAll(".totalCircle1").remove();
		}
		if(!that.chartArea.selectAll(".totalCircle2").empty()){
			that.chartArea.selectAll(".totalCircle2").remove();
		}
		if(!that.chartArea.selectAll(".totalLine").empty()){
			that.chartArea.selectAll(".totalLine").remove();
		}
		// 绘制总数据折线图
	    that.chartArea.append("g").attr("class", "totalCircle1").selectAll("circle").data(that.total).enter().append("circle").attr({
	        "cx": function(d, i){ return that.padding.left+(1+i)*that.yearWidth; },
	        "cy": function(d){ return that.height-that.padding.bottom-d*(that.yHeight/3); },
	        "r": "10px",
	        "fill":"none",
	        "stroke": that.colors[1],
	        "stroke-width": "2px",
	        "opacity":0
	    }).transition().delay(1000).duration(300).attr("opacity", 1);
	    that.chartArea.append("g").attr("class", "totalCircle2").selectAll("circle").data(that.total).enter().append("circle").attr({
	        "cx": function(d, i){ return that.padding.left+(1+i)*that.yearWidth; },
	        "cy": function(d){ return that.height-that.padding.bottom-d*(that.yHeight/3); },
	        "r": "5px",
	        "fill":that.colors[1],
	        "opacity":0
	    }).transition().delay(1000).duration(300).attr("opacity", 1);
	    var lines = that.chartArea.append("g").attr("class", "totalLine");
	    for(var i=0; i<that.years.length-1; ++i){
	        var x1 = that.padding.left+(1+i)*that.yearWidth;
	        var y1 = that.height-that.padding.bottom-that.total[i]*(that.yHeight/3);
	        var x2 = that.padding.left+(2+i)*that.yearWidth;
	        var y2 = that.height-that.padding.bottom-that.total[i+1]*(that.yHeight/3);
	        lines.append("line").attr({
	            "x1":x1,
	            "y1":y1,
	            "x2":x1,
	            "y2":y1,
	            "stroke-width":"2px",
	            "stroke":that.colors[1]	            
	        }).transition().delay(100+300*i).duration(300).attr({
	        	"x2": x2,
	        	"y2": y2
	        });
	    }
	},
	addAxis : function(){
		var that = this;
		var axisArea = that.svg.append("g").attr("class", "axisArea");
	    axisArea.append("line").attr({
	        "x1":that.padding.left,
	        "y1":that.height-that.padding.bottom,
	        "x2":that.width-that.padding.right,
	        "y2":that.height-that.padding.bottom,
	        "stroke-width":"1px",
	        "stroke":"#fff"
	    });
	    axisArea.append("line").attr({
	        "x1":that.width-that.padding.right,
	        "y1":that.height-that.padding.bottom,
	        "x2":that.width-that.padding.right,
	        "y2":2*that.padding.top,
	        "stroke-width":"1px",
	        "stroke":"#fff"
	    });
	    for(var i = 0; i<that.years.length-1; ++i){
	        axisArea.append("line").attr({
	            "x1":that.padding.left+(1+i)*that.yearWidth,
	            "y1":that.height-that.padding.bottom,
	            "x2":that.padding.left+(1+i)*that.yearWidth,
	            "y2":2*that.padding.top,
	            "stroke-width":"1px",
	            "stroke":"#fff",
	            "stroke-dasharray": (3, 8)
	        });
	    }
	    axisArea.append("g").selectAll("text").data(that.years).enter().append("text").attr({
	        "x": function(d, i){ return that.padding.left+(i+0.5)*that.yearWidth; },
	        "y": that.height-0.7*that.padding.bottom,
	        "dy": ".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "14px",
	        "text-anchor": "middle"
	    }).text(function(d){ return d; });
	    axisArea.append("g").selectAll("text").data(that.yValue).enter().append("text").attr({
	        "x": that.width - 0.6*that.padding.right,
	        "y": function(d, i){ return that.height-that.padding.bottom-i*that.yHeight; },
	        "dy": ".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "14px",
	        "text-anchor": "middle"
	    }).text(function(d){ return d; });
	},
	addTitle : function(){
		var that = this;
		var titleArea = that.svg.append("g").attr("class", "titleArea");
	    titleArea.append("circle").attr({
	        "cx": 0.4*that.width,
	        "cy": that.padding.top,
	        "r": "5px",
	        "fill":that.colors[1]
	    });
	    titleArea.append("circle").attr({
	        "cx": 0.4*that.width,
	        "cy": that.padding.top,
	        "r": "10px",
	        "fill":"none",
	        "stroke": that.colors[1],
	        "stroke-width": "2px"
	    });
	    titleArea.append("text").text(that.unit).attr({
	        "x": 0.4*that.width+15,
	        "y": that.padding.top,
	        "dy": ".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "18px",
	        "text-anchor": "left"
	    });
	},	
});

/**
 * 学生/教职工年级数量分析
 * 
 * @class zhnx.chart.eduStudentAndTeacherAmount
 * 
 */
zhnx.chart.eduStudentAndTeacherAmount = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduStudentAndTeacherAmount.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.eduStudentAndTeacherAmount,
	_defaults : {},
	padding : {left: 60, top: 30, right: 50, bottom: 60},
    colors : ["#f6a704", "#e57509", "#b4162f"],
    lineCount : 6,
    yGap : 30000,
    yMax : 150000,
	
	chartArea : undefined,
	title : undefined,
	subTitle : undefined,
	unit : undefined,
	grades : undefined,
	types : undefined,
	dataSet : undefined,
	xScale : undefined,
	yScale : undefined,
	
	init : function(args){
		this.baseInit(args.selector);
		this.chartArea = this.svg.append("g").attr("class", "chartArea");
		this.title = args.title;
		this.subTitle = args.title;
		this.unit = args.unit;
		this.grades = args.grades;
	    this.types = args.types;
	    this.dataSet = args.dataSet;
	    this.xScale = d3.scale.linear().domain([0, this.grades.length-1]).range([this.padding.left+20, this.width-this.padding.right-20]);
	    this.yScale = d3.scale.linear().domain([0, this.yMax]).range([this.height - this.padding.bottom, 5 * this.padding.top]);
	    
	    this.drawBasicArea();
		this.drawCharArea();
		this.taketurns();
	},
	
	repaint : function(){
		this.drawCharArea();
    },
	
	drawBasicArea : function(){
		this.addTitle();
		this.addAxis();
	},
	
	drawCharArea : function(){
		this.drawCircle();
		this.drawLine();
	},
	
	drawCircle : function(){
		var that = this;
		if(!that.chartArea.select(".circleStu").empty()){
			that.chartArea.select(".circleStu").remove();
		}
		if(!that.chartArea.select(".circleTea").empty()){
			that.chartArea.select(".circleTea").remove();
		}
		that.chartArea.append("g").attr("class", "circleStu").selectAll("circle").data(that.dataSet[0]).enter().append("circle").attr({
	        "class":function(d, i){ return "studentCircle"+i; },
	        "cx": function(d, i){ return that.xScale(i); },
	        "cy": function(d){ return that.yScale(d); },
	        "r": "6px",
	        "fill": that.colors[0],
	        "opacity": 0
	    })
	        .on("mouseover", function(){
            	var strClass = d3.select(this).attr("class");
            	var index;
            	if (strClass.length == 14){
            		index = strClass.charAt(13);
            	}
            	if (strClass.length == 15){
            		index = strClass.charAt(13)+strClass.charAt(14);
            	}
            	zhnx.getTooltip().style({
	        		"opacity": "0.9",
	        		"width": "130px",
	        		"height": "50px",
	        		"line-height": "23px",
	        		"z-index": "99999",
	        		"left": (d3.event.pageX - 75) + "px",
	        		"top": (d3.event.pageY - 67) + "px"
	        	})
	        	.html(that.types[0] + "<br>" + that.grades[index] + ":" + that.dataSet[0][index] + that.unit);
            })
            .on("mouseout", function(d, i){
            	zhnx.getTooltip().style({
	        		"opacity": 0,
	        		"z-index": "-1"
	        	});
            })
	        .transition().delay(2400).duration(500).attr("opacity", 1);
		that.chartArea.append("g").attr("class", "circleTea").selectAll("circle").data(that.dataSet[1]).enter().append("circle").attr({
	        "class":function(d, i){ return "teacherCircle"+i; },
	        "cx": function(d, i){ return that.xScale(i); },
	        "cy": function(d){ return that.yScale(d); },
	        "r": "6px",
	        "fill": that.colors[1],
	        "opacity": 0
	    })
	        .on("mouseover", function(){
            	var strClass = d3.select(this).attr("class");
            	var index;
            	if (strClass.length == 14){
            		index = strClass.charAt(13);
            	}
            	if (strClass.length == 15){
            		index = strClass.charAt(13)+strClass.charAt(14);
            	}
            	zhnx.getTooltip().style({
	        		"opacity": "0.9",
	        		"width": "130px",
	        		"height": "50px",
	        		"line-height": "23px",
	        		"z-index": "99999",
	        		"left": (d3.event.pageX - 75) + "px",
	        		"top": (d3.event.pageY - 67) + "px"
	        	})
	        	.html(that.types[1] + "<br>" + that.grades[index] + ":" + that.dataSet[1][index] + that.unit);
            })
            .on("mouseout", function(d, i){
            	zhnx.getTooltip().style({
	        		"opacity": 0,
	        		"z-index": "-1"
	        	});
            })
	        .transition().delay(2400).duration(500).attr("opacity", 1);
	},
	
	drawLine : function(){
		var that = this;
		if(!that.chartArea.selectAll("line").empty()){
			that.chartArea.selectAll("line").remove();
		}
		for(var i=0; i<that.types.length; ++i){
			if(!that.chartArea.select(".g_lines"+i).empty()){
				that.chartArea.select(".g_lines"+i).remove();
			}
		}
		for (var index=0; index<that.types.length; ++index){
			var lines = that.chartArea.append("g").attr("class", "g_lines"+index);
	        for(var j=0; j<=that.grades.length; ++j){
	            var x1, y1, x2, y2;
	            if(0==j){
	                x1 = that.padding.left;
	                y1 = that.yScale(that.dataSet[index][j]);
	                x2 = that.xScale(j);
	                y2 = y1;
	            }else{
	                if(that.grades.length == j){
	                    x1 = that.xScale(j-1);
	                    y1 = that.yScale(that.dataSet[index][j-1]);
	                    x2 = that.width - that.padding.right;
	                    y2 = y1;
	                }else{
	                    x1 = that.xScale(j-1);
	                    y1 = that.yScale(that.dataSet[index][j-1]);
	                    x2 = that.xScale(j);
	                    y2 = that.yScale(that.dataSet[index][j]);
	                }
	            }
	            lines.append("line").attr({
	                "x1":x1,
	                "y1":y1,
	                "x2":x1,
	                "y2":y1,
	                "stroke-width":"2px",
	                "stroke":that.colors[index]
	            }).transition().delay(100+200*j).duration(200).ease("linear").attr("x2", x2).attr("y2", y2);
	        }
		}
		that.svg.select(".g_lines2").selectAll("line").attr("stroke-dasharray", (5, 5));
	},
	
	addAxis : function(){
		// 坐标轴
		var that = this;
	    var axisArea = that.svg.append("g").attr("class", "axisArea");
	    // 纵坐标轴
	    var yAxis = d3.svg.axis().scale(that.yScale).orient("left").ticks(that.lineCount-1).tickValues([0, 30000, 60000, 90000, 120000, 150000]).tickSize(0).tickFormat(d3.format("0"));
	    var yBar = axisArea.append("g").attr("transform", "translate(" + that.padding.left + ",0)").call(yAxis);
	    yBar.selectAll("text").attr({
	        "font-family": "sans-serif",
	        "font-size": "12px",
	        "fill": "#fff"
	    });
	    yBar.selectAll("path").attr({
	        "fill": "none",
	        "stroke": "none"
	    });
	    yBar.selectAll("line").attr({"fill": "none", "stroke": "#fff"});
	    // 网格线
	    for (var i = 0; i < that.lineCount; ++i) {
	        axisArea.append("line").attr({
	            "x1": that.padding.left,
	            "y1": that.yScale(i*that.yGap),
	            "x2": that.width - that.padding.right,
	            "y2": that.yScale(i*that.yGap),
	            "stroke-width": "1px",
	            "stroke": "#fff",
	            "opacity": 0.5
	        });
	    }
	    var xAxis = d3.svg.axis().scale(that.xScale).orient("bottom").tickSize(5);
	    var xBar = axisArea.append("g").attr("transform", "translate(0,"+(that.height-that.padding.bottom)+")").call(xAxis);
	    xBar.selectAll("text").attr({
	            "font-family": "sans-serif",
	            "font-size": "12px",
	            "fill": "#fff"
	        })
	        .text(function(d, i){ return that.grades[i]; });
	    xBar.selectAll("path").attr({
	        "fill": "none",
	        "stroke": "#fff",
	        "stroke-width": "1px",
	        "shape-rendering": "crispEdges"
	    });
	    xBar.selectAll("line").attr({"fill": "none", "stroke": "#fff", "stroke-width": "1px"});
	},
	
	addTitle : function(){
		var that = this;
		var titleArea = that.svg.append("g").attr("class", "titleArea");
	    // 添加标题
	    titleArea.append("text").text(that.title).attr({
	        "x": 10,
	        "y": that.padding.top,
	        "dy": ".35em",
	        "fill": that.colors[0],
	        "font-family": "黑体",
	        "font-size": "28px",
	        "font-weight": "bold",
	        "text-anchor": "left"
	    });
	    // 添加副标题
	    titleArea.append("text").text(that.subTitle).attr({
	        "x": 10,
	        "y": 2.3*that.padding.top,
	        "dy": ".35em",
	        "fill": that.colors[1],
	        "font-family": "黑体",
	        "font-size": "22px",
	        "font-weight": "bold",
	        "text-anchor": "left"
	    });
	    // 添加单位
	    titleArea.append("text").text(that.unit).attr({
	        "x": 0.7*that.padding.left,
	        "y": 3.8 * that.padding.top,
	        "dy": ".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "14px",
	        "text-anchor": "middle"
	    });
	    titleArea.append("line").attr({
	        "x1":that.padding.left,
	        "y1":3.8 * that.padding.top,
	        "x2":that.padding.left+30,
	        "y2":3.8 * that.padding.top,
	        "stroke-width":"1px",
	        "stroke":that.colors[0]
	    });
	    titleArea.append("circle").attr({
	        "cx": that.padding.left+15,
	        "cy": 3.8 * that.padding.top,
	        "r": "5px",
	        "fill":that.colors[0]
	    });
	    titleArea.append("text").text(that.types[0]).attr({
	        "x": that.padding.left+35,
	        "y": 3.8 * that.padding.top,
	        "dy": ".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "14px",
	        "text-anchor": "left"
	    });
	    titleArea.append("line").attr({
	        "x1":that.padding.left+150,
	        "y1":3.8 * that.padding.top,
	        "x2":that.padding.left+180,
	        "y2":3.8 * that.padding.top,
	        "stroke-width":"1px",
	        "stroke":that.colors[1]
	    });
	    titleArea.append("circle").attr({
	        "cx": that.padding.left+165,
	        "cy": 3.8 * that.padding.top,
	        "r": "5px",
	        "fill":that.colors[1]
	    });
	    titleArea.append("text").text(that.types[1]).attr({
	        "x": that.padding.left+185,
	        "y": 3.8 * that.padding.top,
	        "dy": ".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "14px",
	        "text-anchor": "left"
	    });
	    titleArea.append("line").attr({
	        "x1": that.padding.left+320,
	        "y1": 3.8 * that.padding.top,
	        "x2": that.padding.left+350,
	        "y2": 3.8 * that.padding.top,
	        "stroke-width":"2px",
	        "stroke":that.colors[2],
	        "stroke-dasharray":(5, 3)
	    });
	    titleArea.append("text").text(that.types[2]).attr({
	        "x": that.padding.left+355,
	        "y": 3.8 * that.padding.top,
	        "dy": ".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "14px",
	        "text-anchor": "left"
	    });
	},	
});

/**
 * 各区县年级学生数量
 * 
 * @class zhnx.chart.eduStudentAmount
 * 
 */
zhnx.chart.eduStudentAmount = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduStudentAmount.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.eduStudentAmount,
	_defaults : {},
	
	padding : {left: 50, top: 30, right: 80, bottom: 60},
    lineColor : "#f6a704",
    lineCount : 7,
    yGap : 1000,
	
	title : undefined,
	unit : undefined,
	types : undefined,
	citys : undefined,
    dataSet : undefined,
    dataMax : undefined,
    yMax : undefined,
    xScale : undefined,
    yScale : undefined,
    chartArea : undefined,
    iCount : 0,
    
	init : function(args){
		this.baseInit(args.selector);
		this.title = args.title;
		this.unit = args.unit;
		this.citys = d3.map(args.series, function(d){return d.city;}).keys();
		this.types = args.types;		
		this.dataSet = [];
	    for (var i = 0; i < this.citys.length; ++i) {
	        this.dataSet.push(args.series[i].data);
	    }
	    this.dataMax = d3.max(d3.merge(this.dataSet));
	    this.yMax = this.yGap * (Math.floor(this.dataMax / this.yGap) + 1);
	    this.xScale = d3.scale.linear().domain([0, this.types.length-1]).range([this.padding.left+20, this.width-this.padding.right-20]);
		this.yScale = d3.scale.linear().domain([0, this.yMax]).range([this.height - this.padding.bottom, 2.5 * this.padding.top]);
		this.chartArea = this.svg.append("g").attr("class", "g_chartArea");
		
		this.drawBasicArea();
		this.selectCity(this.iCount);// 初始化选择银川
	    this.taketurns();
		
	},
	
	repaint : function(){
		this.iCount = (++this.iCount)%this.citys.length;
		this.selectCity(this.iCount);
    },
	
	drawBasicArea : function(){
		this.addTitle();
		this.addAxis();
		this.addLegend();
	},
	
	addLegend : function(){
		var that = this;
		var legend = that.svg.append("g").attr("class", "g_legend");	    
	    legend.selectAll("rect").data(that.citys).enter().append("rect").attr({
	        "class":function(d, i){ return "rect"+i; },
	        "x": that.width-0.9*that.padding.right,
	        "y": function(d, i){ return 3*that.padding.top+i*0.5*that.padding.right; },
	        "width": 0.7*that.padding.right,
	        "height": 0.3*that.padding.right,
	        "fill": "none",
	        "stroke": that.lineColor,
	        "stroke-width": "1px"
	    })
	    .on("click", function(d, i){
	    		that.taketurns();
	        	that.selectCity(i);
	        });
	    legend.selectAll("text").data(that.citys).enter().append("text").attr({
	        "x": that.width-0.55*that.padding.right,
	        "y": function(d, i){ return 3*that.padding.top+i*0.5*that.padding.right+0.15*that.padding.right; },
	        "font-family": "黑体",
	        "font-size": "16px",
	        "fill": "#fff",
	        "text-anchor":"middle",
	        "dy":"0.35em"
	    }).text(function(d, i){ return that.citys[i]; })
	        .on("click", function(d, i){
	        	that.taketurns();
	        	that.selectCity(i);
	        });
	},
	
	selectCity : function(iIndex){
		if(this.svg.select(".rect"+iIndex).attr("fill")==this.lineColor){
			this.svg.select(".rect"+iIndex).transition().delay(100).duration(400).attr("fill", "none");
            this.chartArea.select(".g_lines"+iIndex).remove();
            this.chartArea.select(".g_circle"+iIndex).remove();
        }else{
        	this.freshSelection();
        	this.svg.select(".rect"+iIndex).transition().delay(100).duration(400).attr("fill", this.lineColor);
            this.drawLines(iIndex);
            this.drawCircle(iIndex);
        }
	},
	
	// 针对当前数据刷新模式特定的清空状态
	freshSelection : function(){
		// 只显示一组数据
		for (var i=0; i<this.citys.length; ++i){
			this.svg.select(".rect"+i).attr("fill", "none");
			if(!this.chartArea.select(".g_lines"+i).empty()){
				this.chartArea.select(".g_lines"+i).remove();
			}
			if(!this.chartArea.select(".g_circle"+i).empty()){
				this.chartArea.select(".g_circle"+i).remove();
			}
		}
	},
	
	drawLines : function(iIndex){
		var that = this;
		if(!that.chartArea.select(".g_lines"+iIndex).empty()){
			that.chartArea.select(".g_lines"+iIndex).remove();
		}
		var lines = that.chartArea.append("g").attr("class", "g_lines"+iIndex);
        for(var j=0; j<=that.types.length; ++j){
            var x1, y1, x2, y2;
            if(0==j){
                x1 = that.padding.left;
                y1 = that.yScale(that.dataSet[iIndex][j]);
                x2 = that.xScale(j);
                y2 = y1;
            }else{
                if(that.types.length == j){
                    x1 = that.xScale(j-1);
                    y1 = that.yScale(that.dataSet[iIndex][j-1]);
                    x2 = that.width - that.padding.right;
                    y2 = y1;
                }else{
                    x1 = that.xScale(j-1);
                    y1 = that.yScale(that.dataSet[iIndex][j-1]);
                    x2 = that.xScale(j);
                    y2 = that.yScale(that.dataSet[iIndex][j]);
                }
            }
            lines.append("line").attr({
                "x1":x1,
                "y1":y1,
                "x2":x1,
                "y2":y1,
                "stroke-width":"3px",
                "stroke":that.lineColor
            }).transition().delay(100+200*j).duration(200).ease("linear").attr("x2", x2).attr("y2", y2);
        }
	},
	
	drawCircle : function(iIndex){
		var that = this;
		if(!that.chartArea.select(".g_circle"+iIndex).empty()){
			that.chartArea.select(".g_circle"+iIndex).remove();
		}
		var circles = that.chartArea.append("g").attr("class", "g_circle"+iIndex);
        circles.selectAll("circle").data(that.dataSet[iIndex]).enter().append("circle").attr({
            "class":function(d, i){ return "circle"+i; },
            "cx": function(d, i){ return that.xScale(i); },
            "cy": function(d, i){ return that.yScale(that.dataSet[iIndex][i]); },
            "r": "6px",
            "fill":that.lineColor,
            "opacity":0
        })
            .on("mouseover", function(){
            	var strClass = d3.select(this).attr("class");
            	var index;
            	if (strClass.length == 7){
            		index = strClass.charAt(6);
            	}
            	if (strClass.length == 8){
            		index = strClass.charAt(6)+strClass.charAt(7);
            	}
            	zhnx.getTooltip().style({
	        		"opacity": "0.9",
	        		"width": "130px",
	        		"height": "50px",
	        		"line-height": "23px",
	        		"z-index": "99999",
	        		"left": (d3.event.pageX - 75) + "px",
	        		"top": (d3.event.pageY - 67) + "px"
	        	})
	        	.html(that.citys[iIndex] + "市" + that.types[index] + "<br>" + "学生数：" + that.dataSet[iIndex][index] + that.unit);
            })
            .on("mouseout", function(d, i){
            	zhnx.getTooltip().style({
	        		"opacity": 0,
	        		"z-index": "-1"
	        	});
            })
            .transition().delay(2400).duration(500).attr("opacity", 1);
	},
	
	addTitle : function(){
		var that = this;
		// 添加标题
		that.svg.append("text").text(that.title).attr({
	        "x": 10,
	        "y": that.padding.top,
	        "dy": ".35em",
	        "fill": "#e57509",
	        "font-family": "黑体",
	        "font-size": "22px",
	        "font-weight": "bold",
	        "text-anchor": "left"
	    });
	    // 添加单位
	    that.svg.append("text").text(that.unit).attr({
	        "x": 0.7*that.padding.left,
	        "y": 2.2 * that.padding.top,
	        "dy": ".35em",
	        "fill": "#fff",
	        "font-family": "黑体",
	        "font-size": "12px",
	        "text-anchor": "middle"
	    });
	},
	addAxis : function(){
		var that = this;
		// 横坐标轴和网格线
	    var yAxis = d3.svg.axis().scale(that.yScale).orient("left").ticks(that.lineCount-1).tickSize(5).tickFormat(d3.format("0"));
	    var yBar = that.svg.append("g").attr("transform", "translate(" + that.padding.left + ",0)").call(yAxis);
	    yBar.selectAll("text").attr({
	        "font-family": "sans-serif",
	        "font-size": "12px",
	        "fill": "#fff"
	    });
	    yBar.selectAll("path").attr({
	        "fill": "none",
	        "stroke": "none"
	    });
	    yBar.selectAll("line").attr({"fill": "none", "stroke": "none"});
	    // 网格线
	    for (var i = 0; i < that.lineCount+1; ++i) {
	        that.svg.append("line").attr({
	            "x1": that.padding.left,
	            "y1": that.yScale(i*(that.yGap*Math.floor(that.yMax/that.lineCount/that.yGap))),
	            "x2": that.width - that.padding.right,
	            "y2": that.yScale(i*(that.yGap*Math.floor(that.yMax/that.lineCount/that.yGap))),
	            "stroke-width": "1px",
	            "stroke": "#fff",
	            "opacity": 0.5
	        });
	    }
	    var xAxis = d3.svg.axis().scale(that.xScale).orient("bottom").ticks(that.types.length).tickSize(5);
	    var xBar = that.svg.append("g").attr("transform", "translate(0,"+(that.height-that.padding.bottom)+")").call(xAxis);
	    xBar.selectAll("text").attr({
	        "font-family": "sans-serif",
	        "font-size": "12px",
	        "fill": "#fff"
	    })
	        .text(function(d, i){ return that.types[i]; });
	    xBar.selectAll("path").attr({
	        "fill": "none",
	        "stroke": "#fff",
	        "stroke-width": "1px",
	        "shape-rendering": "crispEdges"
	    });
	    xBar.selectAll("line").attr({"fill": "none", "stroke": "#fff", "stroke-width": "1px"});
	}
});

/**
 * 教育云网络教学活动
 * 
 * @class zhnx.chart.eduWebTeaching
 * 
 */
zhnx.chart.eduWebTeaching = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduWebTeaching.prototype = $.extend({}, zhnx.chart.base, {
	constructor:zhnx.chart.eduWebTeaching,
	_defaults : {},
	
	yMax : 4000,
    yTicks : 5,
    padding : {left: 40, top: 30, right: 80, bottom: 40},
    countColor : "#05bcfe",
    colors : ["#ffe91d", "#f6a704", "#e57509", "#674424"],
	
	chartArea : undefined,
	title : undefined,
	unit : undefined,
    years : undefined,
    counts : undefined,
    grades : undefined,
    studentCounts : undefined,
    xScale : undefined,
    yScale : undefined,
    
    init : function(args){
    	this.baseInit(args.selector);
		this.chartArea = this.svg.append("g").attr("class", "chartArea");
		this.title = args.title;
		this.unit = args.unit;
		this.years = args.years;
		this.counts = args.counts;
		this.grades = d3.map(args.students, function(d){ return d.grade; }).keys();
		this.studentCounts = [];
	    for (var i=0; i<this.grades.length; ++i){
	        this.studentCounts.push(args.students[i].data);
	    }
	    this.xScale = d3.scale.ordinal().domain(this.years).rangePoints([this.padding.left, this.width-this.padding.right]);
	    this.yScale = d3.scale.linear().domain([0, this.yMax]).range([this.height-this.padding.bottom, 3*this.padding.top]);
	    
	    this.drawBasicArea();
	    this.drawChartArea();
	    this.taketurns();		
    },
    
    repaint : function(){
		this.drawChartArea();
    },
    
    drawChartArea : function(){
    	var that = this;
    	if(!that.chartArea.selectAll("g").empty()){
    		that.chartArea.selectAll("g").remove();
    	}
    	// 绘制频率图
        var countChart = that.chartArea.append("g").attr("class", "countChart");
        for(var i=1; i<that.counts.length; ++i){
            var x1 = that.xScale(that.years[i-1]);
            var y1 = that.yScale(that.counts[i-1]);
            var x2 = that.xScale(that.years[i]);
            var y2 = that.yScale(that.counts[i]);
            countChart.append("line").attr({
                "x1":x1,
                "y1":y1,
                "x2":x1,
                "y2":y1,
                "stroke-width":"2px",
                "stroke":that.countColor,
                "opacity":0.8
            }).transition().delay(i*300).duration(300).attr({
                "x2": x2,
                "y2": y2
            })
        }
        // 绘制学生数量图
        var studengCountChart = that.chartArea.append("g").attr("class", "studengCountChart");
        for(var i=0; i<that.grades.length; ++i){
            var studentLine = studengCountChart.append("g").attr("class", "studentLine"+i);
            for(var j=1; j<that.years.length; ++j){
                var x1 = that.xScale(that.years[j-1]);
                var y1 = that.yScale(that.studentCounts[i][j-1]);
                var x2 = that.xScale(that.years[j]);
                var y2 = that.yScale(that.studentCounts[i][j]);
                studentLine.append("line").attr({
                    "x1":x1,
                    "y1":y1,
                    "x2":x1,
                    "y2":y1,
                    "stroke-width":"2px",
                    "stroke":that.colors[i],
                    "opacity":0.8
                }).transition().delay(j*400+200*i).duration(400).attr({
                    "x2": x2,
                    "y2": y2
                })
            }
            studengCountChart.append("g").attr("class", "circle"+i).selectAll("circle").data(that.studentCounts[i]).enter().append("circle").attr({
                "class": function(d, j){ return "circle"+i+j; },
            	"cx": function(d, i){ return that.xScale(that.years[i]); },
                "cy": function(d){ return that.yScale(d); },
                "r": "5px",
                "fill":that.colors[i],
                "stroke": "none",
                "opacity": 0
            })
             	.on("mouseover", function(){
	            	var strClass = d3.select(this).attr("class");
	            	var iIndex = strClass.charAt(6);
	            	var jIndex = strClass.charAt(7);
	            	zhnx.getTooltip().style({
		        		"opacity": "0.9",
		        		"width": "130px",
		        		"height": "50px",
		        		"line-height": "23px",
		        		"z-index": "99999",
		        		"left": (d3.event.pageX - 75) + "px",
		        		"top": (d3.event.pageY - 67) + "px"
		        	})
		        	.html(that.years[jIndex] + that.grades[iIndex] + "<br>" + "参加人数：" + that.studentCounts[iIndex][jIndex] + "人");
	            })
            	.on("mouseout", function(d, i){
	            	zhnx.getTooltip().style({
		        		"opacity": 0,
		        		"z-index": "-1"
	            	});
            	})
            	.transition().delay(function(d, i){ return 400+400*i; }).duration(400).attr("opacity", 1);
        }
    },
    
    addTitle : function(){
    	var that = this;
    	var titleArea = that.svg.append("g").attr("class", "titleArea");
    	titleArea.append("text").text(that.title).attr({
            "x": 10,
            "y": that.padding.top,
            "dy": ".35em",
            "fill": "#fff",
            "font-family": "黑体",
            "font-size": "20px",
            "text-anchor": "left"
        });
        titleArea.append("text").text(that.unit).attr({
            "x": that.padding.left,
            "y": 2*that.padding.top,
            "dy": ".35em",
            "fill": "#fff",
            "font-family": "黑体",
            "font-size": "14px",
            "text-anchor": "middle"
        });
        titleArea.append("rect").attr({
            "x": 3*that.padding.left,
            "y": 1.85*that.padding.top,
            "width": 20,
            "height": 8,
            "fill": that.countColor,
            "stroke": "none"
        });
        titleArea.append("line").attr({
            "x1":2.9*that.padding.left,
            "y1":1.85*that.padding.top+4,
            "x2":3.1*that.padding.left+20,
            "y2":1.85*that.padding.top+4,
            "stroke-width":"1px",
            "stroke":"#fff",
            "opacity":0.5
        });
        titleArea.append("text").text("频率").attr({
            "x": 3.1*that.padding.left+25,
            "y": 2*that.padding.top,
            "dy": ".35em",
            "fill": "#fff",
            "font-family": "黑体",
            "font-size": "14px",
            "text-anchor": "left"
        });
        titleArea.append("circle").attr({
            "cx": 6*that.padding.left,
            "cy": 1.85*that.padding.top+4,
            "r": "5px",
            "fill":that.colors[1],
            "stroke": "none"
        });
        titleArea.append("line").attr({
            "x1":6*that.padding.left-10,
            "y1":1.85*that.padding.top+4,
            "x2":6*that.padding.left+10,
            "y2":1.85*that.padding.top+4,
            "stroke-width":"1px",
            "stroke":"#fff",
            "opacity":0.5
        });
        titleArea.append("text").text("人数").attr({
            "x": 6*that.padding.left+15,
            "y": 2*that.padding.top,
            "dy": ".35em",
            "fill": "#fff",
            "font-family": "黑体",
            "font-size": "14px",
            "text-anchor": "left"
        });
    },
    
    // 坐标轴
    addAxis : function(){
    	var that = this;    	
    	
        var axisArea = that.svg.append("g").attr("class", "axisArea");
        var yAxis = d3.svg.axis().scale(that.yScale).orient("left").ticks(that.yTicks).tickSize(0,0).tickFormat(d3.format("0"));
        var yBar = axisArea.append("g").attr("transform", "translate("+that.padding.left+",0)").call(yAxis);
        axisArea.selectAll("text").attr({
            "font-family": "黑体",
            "font-size": "12px",
            "fill": "#fff"
        }).text(function(d){ return (Math.floor(d) == d)? d : ""; });
        axisArea.selectAll("path").attr({
            "fill": "none",
            "stroke": "#fff",
            "stroke-width": "1px",
            "shape-rendering": "crispEdges",
            "opacity":0.3
        });
        axisArea.selectAll("line").attr({"fill": "none", "stroke": "#fff", "stroke-width": "1px", "opacity":0.3});
        axisArea.append("g").selectAll("text").data(that.years).enter().append("text").attr({
            "x": function (d, i) { return that.xScale(that.years[i]); },
            "y": that.height-0.5*that.padding.bottom,
            "dy": ".35em",
            "fill": "#fff",
            "font-family": "黑体",
            "font-size": "12px",
            "text-anchor": "middle"
        }).text(function(d){ return d; });

        // 画网格线
        for(var i=1; i<that.years.length; ++i){
            axisArea.append("line").attr({
                "x1":that.xScale(that.years[i]),
                "y1":that.height-that.padding.bottom,
                "x2":that.xScale(that.years[i]),
                "y2":that.yScale(that.yMax),
                "stroke-width":"1px",
                "stroke":"#fff",
                "opacity":0.3
            });
        }
        for(var i=0; i<that.yTicks; ++i){
            axisArea.append("line").attr({
                "x1":that.padding.left,
                "y1":that.yScale(i*(that.yMax/(that.yTicks-1))),
                "x2":that.width-that.padding.right,
                "y2":that.yScale(i*(that.yMax/(that.yTicks-1))),
                "stroke-width":"1px",
                "stroke":"#fff",
                "opacity":0.3
            });
        }
    },
    
    // 添加图例
    addLegend : function(){
    	var that = this;
    	
        var legendArea = that.svg.append("g").attr("class", "legendArea");
        legendArea.selectAll("rect").data(that.grades).enter().append("rect").attr({
            "class":function(d, i){ return "legendRect"+i; },
            "x": that.width-0.8*that.padding.right,
            "y": function(d, i){ return 2*that.padding.top+0.5*i*that.padding.top; },
            "width": 0.4*that.padding.top,
            "height": 0.3*that.padding.top,
            "fill": function(d, i){ return that.colors[i]; },
            "stroke": "none"
        })
            .on("click", function(d, i){
            	that.taketurns();
                if(d3.select(this).attr("fill") != "gray"){
                    d3.select(this).attr("fill", "gray");
                    that.svg.select(".studentLine"+i).transition().delay(100).duration(400).attr("opacity", 0);
                    that.svg.select(".circle"+i).transition().delay(100).duration(400).attr("opacity", 0);
                }else{
                    d3.select(this).attr("fill", that.colors[i]);
                    that.svg.select(".studentLine"+i).transition().delay(100).duration(400).attr("opacity", 1);
                    that.svg.select(".circle"+i).transition().delay(100).duration(400).attr("opacity", 1);
                }
            });
        legendArea.selectAll("text").data(that.grades).enter().append("text").attr({
            "x": that.width-0.6*that.padding.right,
            "y": function(d, i){ return 2*that.padding.top+0.5*i*that.padding.top; },
            "dy": ".6em",
            "fill": "#fff",
            "font-family": "黑体",
            "font-size": "12px",
            "text-anchor": "left"
        }).text(function(d){ return d; });
    },
    
    drawBasicArea : function(){
    	this.addTitle();
    	this.addAxis();
    	this.addLegend();
    },
	
});


//
// ---------------------------------------扶贫组件---------------------------------------
//
// 扶贫 面积图
zhnx.chart.fpAreaChart = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
}
zhnx.chart.fpAreaChart.prototype = $.extend({}, zhnx.chart.base, {
    constructor: zhnx.chart.fpAreaChart,
    _defaults: {},

    padding: {top: 30, right: 50, bottom: 60, left: 50},
    colors : ["#D67821"/* 标题颜色 */, "#00beff"/* 主图颜色 */, "#04C9F4"/* 主图颜色 */, "#1A457C"/* 导航选中颜色 */, "#153067"/* 渐变消失颜色 */],
    chartColors : ["#04B1D9", "#00beff", "#D1D125", "#CEA124", "#153067"/* 渐变消失颜色 */],
    chartHeight : 0,
    yTicks : 5,
    navWidth : 80,
    navHeight : 20,
    navGap : 8,
    navRectSize : 10,

    svg : undefined,
    chartArea : undefined,
    title : undefined,
    unit : undefined,
    mode : undefined,
    type : undefined,
    xLabels : undefined,
    dataset : undefined,// 外部传进来的数据集
    dat : [],// 当前绘图数据
    nav : [],// 导航用
    xScale : undefined,
    yScale : undefined,
    selectedIndex : undefined,
    init : function(args){
    	var that = this;
    	
    	this.baseInit(args.selector);
    	this.svg.attr("font-family", "Microsoft YaHei");
        this.chartArea = this.svg.append("g").attr("class", "chartArea").attr("transform","translate("+(this.padding.left)+","+0+")");
        this.title = args.title;
        this.unit = args.series.unit;
        this.xLabels = args.series.year;
        this.dataset = args.series.dataset;
        this.mode = args.series.mode;
        this.type = args.series.type;
        this.chartHeight = 3*this.padding.top;
        this.xScale = d3.scale.ordinal().domain(that.xLabels).rangePoints([that.padding.left+30, that.width-that.padding.right-30]);

        this.selectedIndex = (this.mode == "single") ? -1 : 0;
       
        this.addDefs();
        
        this.addTitle();

        this.drawChart();
        this.taketurns();
    },
    
    repaint: function(){
		this.drawChart();
	},
    drawChart : function(){
        this.initData();
        if(this.mode == "single"){
            this.addAxis();
            this.drawData();
        }else{
            this.initNavData();
            this.drawNav();
            this.setNavSelectItem();
            this.addAxis();
            if(this.mode == "mm"){
                this.addLegend();
            }
            this.drawMultiData();
        }
    } ,
    addLegend : function(){
        var that = this;
        if(!that.chartArea.select(".gLegend").empty()){
            that.chartArea.select(".gLegend").remove();
        }
        var legend = that.chartArea.append("g").attr("class", "gLegend").attr("transform","translate("+(-that.padding.left)+","+0+")");
        legend.selectAll("line").data(that.type).enter().append("line").attr({
            "x1" : that.width-that.padding.right-80,
            "y1" : function(d, i){return that.chartHeight-(i+1)*20;},
            "x2" : that.width-that.padding.right-20,
            "y2" : function(d, i){return that.chartHeight-(i+1)*20;},
            "stroke" : function(d, i){return that.chartColors[i];},
            "stroke-width" : "2px"
        });
        legend.selectAll("circle").data(that.type).enter().append("circle").attr({
            "cx" : that.width-that.padding.right-50,
            "cy" : function(d, i){return that.chartHeight-(i+1)*20;},
            "r" : "5px",
            "fill" : function(d, i){return that.chartColors[i];}
        });
        legend.selectAll("text").data(that.type).enter().append("text").attr({
            "x" : that.width-that.padding.right-15,
            "y" : function(d, i){return that.chartHeight-(i+1)*20;},
            "text-anchor" : "left",
            "font-size" : "12px",
            "fill" : function(d, i){return that.chartColors[i];},
            "dy" : ".35em"
        }).text(function(d){return d;});
    },
    drawMultiData : function(){
        var that = this;
        if(!that.chartArea.select(".gMultiChart").empty()){
            that.chartArea.select(".gMultiChart").remove();
        }
        this.chartArea.selectAll(".gMultiChart").remove();
        var chart = that.chartArea.append("g").attr("class", "gMultiChart");

        for(var j=0; j<that.dat.length; ++j){
            var dat = [];
            var temp = [];
            if(this.mode == "mm"){
                dat = that.dataset[that.selectedIndex].data[j];
                temp = that.dat[j];
            }else{
                dat = that.dataset[that.selectedIndex].data;
                temp = that.dat;
            }

            var areaPath = d3.svg.area()
                .x(function(d, i){
                    if(i==0){
                        return that.padding.left;
                    }
                    return that.xScale(that.xLabels[i-1]);
                })
                .y0(that.height-that.padding.bottom)
                .y1(function(d, i){return that.yScale(temp[i]);})
                .interpolate("cardinal");
            chart.append("path").attr({
                "d" : areaPath(temp),
                "fill" : "url(#myUse" + j + ")",
                "opacity" : 0
            }).transition().delay(100).duration(500).attr("opacity", 0.5);

            chart.append("g").selectAll("circle").data(dat).enter().append("circle").attr({
                "cx" : function(d, i){ return that.xScale(that.xLabels[i]); },
                "cy" : function(d){ return that.yScale(d); },
                "r" : "5px",
                "fill" : that.chartColors[j],
                "opacity" : 0
            }).transition().delay(100).duration(500).attr("opacity", 1);

            chart.selectAll(".text").data(dat).enter().append("text").attr({
                "x" : function(d, i){return that.xScale(that.xLabels[i]);},
                "y" : function(d){return that.yScale(d)-5;},
                "text-anchor" : "middle",
                "font-size" : "12px",
                "fill" : "#fff",
                "opacity" : 0
            }).text(function(d){return d;}).transition().delay(100).duration(500).attr("opacity", 1);

            if(this.mode == "sm"){
                break;
            }
        }
    },
    setNavSelectItem : function(){
        var that = this;
        this.chartArea.select(".gNav").selectAll("rect").each(function(d, i){
            if (that.selectedIndex == i){
                d3.select(this).attr("fill", that.colors[0]);
            }else{
                d3.select(this).attr("fill", "none");
            }
        });
        this.chartArea.select(".gNav").selectAll("text").each(function(d, i){
            if (that.selectedIndex == i){
                d3.select(this).attr("fill", that.colors[0]);
            }else{
                d3.select(this).attr("fill", "#fff");
            }
        });
    },
    drawNav : function(){
        var that = this;
        if(!this.chartArea.select(".gNav").empty()){
            this.chartArea.select(".gNav").remove();
        }
        var gNav = this.chartArea.append("g").attr("class", "gNav").attr("transform","translate("+(-this.padding.left)+","+0+")");
        gNav.selectAll("rect").data(that.nav).enter().append("rect").attr({
            "class" : function(d, i){ return "navRect"+i; },
            "x" : function(d, i){ return that.padding.left+i*(that.navWidth+that.navGap); },
            "y" : that.height-that.padding.bottom+40,
            "width" : that.navRectSize,
            "height" : that.navRectSize,
            "fill" : "none",
            "stroke" : that.colors[0],
            "stroke-width" : "2px"
        })
        .on("click", function(d, i){
        	that.navClick(i);
        	that.commandNavClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.navClick(" + i + ")",
    			execMode: "evalfunc"
        	});
        });

        gNav.selectAll("text").data(that.nav).enter().append("text").attr({
            "x" : function(d, i){ return that.padding.left+1.2*that.navRectSize+i*(that.navWidth+that.navGap); },
            "y" : that.height-that.padding.bottom+40,
            "font-size" : "14px",
            "fill" : "#fff",
            "text-anchor" : "left",
            "dy" : ".75em"
        })
        .on("click", function(d, i){
        	that.navClick(i);
        	that.commandNavClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.navClick(" + i + ")",
    			execMode: "evalfunc"
        	});
        })
        .text(function(d){return d;});
    },
    navClick: function(i){
    	this.taketurns();
    	this.selectedIndex = i;
    	this.setNavSelectItem();
    	this.drawChart();
    },
    commandNavClick: function(commandArgs){
    	
    },

    // 初始化nav
    initNavData : function(){
        this.nav = [];
        for (var i=0; i<this.dataset.length; ++i){
            this.nav.push(this.dataset[i].place);
        }
    },



    // 初始化dat, yScale
    initData : function(){
        var that = this;
        this.dat = [];
        if(this.mode == "single"){
            this.dat.push(0);
            for(var i=0; i<this.dataset.length; ++i){
                this.dat.push(this.dataset[i]);
            }
            this.yScale = d3.scale.linear().domain([0, d3.max(that.dat)]).range([that.height-that.padding.bottom, that.chartHeight]);
        }else{
            // 初始化dat
            this.padding.bottom = 80;
            if(this.mode == "mm"){
                for (var i=0; i<this.dataset[this.selectedIndex].data.length; ++i){
                    var temp = [];
                    temp.push(0);
                    for(var j=0; j<this.xLabels.length; ++j){
                        temp.push(this.dataset[this.selectedIndex].data[i][j])
                    }
                    this.dat.push(temp);
                }
                var yMax = d3.max(d3.max(this.dat));
                this.yScale = d3.scale.linear().domain([0, yMax]).range([that.height-that.padding.bottom, that.chartHeight]);
            }else{
                this.dat.push(0);
                for(var i=0; i<this.dataset[this.selectedIndex].data.length; ++i){
                    this.dat.push(this.dataset[this.selectedIndex].data[i]);
                }
                this.yScale = d3.scale.linear().domain([0, d3.max(that.dat)]).range([that.height-that.padding.bottom, that.chartHeight]);
            }
        }
    },


    drawData : function(){
        var that = this;
        if(!that.chartArea.select(".gChart").empty()){
            that.chartArea.select(".gChart").remove();
        }
        var chart = that.chartArea.append("g").attr("class", "gChart");

        var areaPath = d3.svg.area()
            .x(function(d, i){
                if(i==0){
                    return that.padding.left;
                }
                return that.xScale(that.xLabels[i-1]);
            })
            .y0(function(d, i){return that.height-that.padding.bottom;})
            .y1(function(d, i){return that.yScale(that.dat[i]);})
            .interpolate("cardinal");
        chart.append("path").attr({
            "d" : areaPath(that.dat),
            "fill" : "url(#myUse1)",
            "opacity" : 0
        }).transition().delay(100).duration(500).attr("opacity", 0.7);

        chart.selectAll("circle").data(that.dataset).enter().append("circle").attr({
            "cx" : function(d, i){ return that.xScale(that.xLabels[i]); },
            "cy" : function(d){ return that.yScale(d); },
            "r" : "5px",
            "fill" : that.chartColors[1],
            "opacity" : 0
        }).transition().delay(100).duration(500).attr("opacity", 1);

        chart.selectAll(".text").data(that.dataset).enter().append("text").attr({
            "x" : function(d, i){return that.xScale(that.xLabels[i]);},
            "y" : function(d){return that.yScale(d)-5;},
            "text-anchor" : "middle",
            "font-size" : "12px",
            "fill" : "#fff",
            "opacity" : 0
        }).text(function(d){return d;}).transition().delay(100).duration(500).attr("opacity", 1);
    },


    addAxis : function(){
        var that = this;
        if(!that.chartArea.select(".gAxis").empty()){
            that.chartArea.select(".gAxis").remove();
        }
        var gAxis = that.chartArea.append("g").attr({"class": "gAxis"});
        gAxis.append("text").attr({
            "x" : 0.6*that.padding.left,
            "y" : that.chartHeight-0.5*that.padding.top,
            "text-anchor" : "left",
            "fill" : "#fff",
            "font-size" : "12px"
        }).text(that.unit);
        gAxis.append("line").attr({
            "x1": that.padding.left,
            "y1": that.height-that.padding.bottom,
            "x2": that.padding.left,
            "y2": that.chartHeight,
            "stroke-width":"1px",
            "stroke":"#fff"
        });
        gAxis.append("line").attr({
            "x1": that.padding.left,
            "y1": that.height-that.padding.bottom,
            "x2": that.width-that.padding.right,
            "y2": that.height-that.padding.bottom,
            "stroke-width":"1px",
            "stroke":"#fff"
        });
        for(var i=1; i<that.yTicks; ++i){
            var yPos = that.height-that.padding.bottom-i*(that.height-that.padding.bottom-that.chartHeight)/that.yTicks;
            gAxis.append("line").attr({
                "x1": that.padding.left,
                "y1": yPos,
                "x2": that.width-that.padding.right,
                "y2": yPos,
                "stroke-width":"0.5px",
                "stroke":"#fff",
                "opacity" : 0.3
            });
        }

        var yAxis = d3.svg.axis().scale(that.yScale).orient("left").ticks(that.yTicks).tickSize(7).tickFormat(d3.format("1000"));
        var yBar = gAxis.append("g").attr("class", "g_yAxis").attr("transform", "translate("+that.padding.left+",0)").call(yAxis);
        var xAxis = d3.svg.axis().scale(that.xScale).orient("bottom").ticks(that.xLabels.length).tickSize(7).tickPadding(10);
        var xBar = gAxis.append("g").attr("class", "g_xAxis")
            .attr("transform", "translate(0,"+(that.height-that.padding.bottom)+")").call(xAxis);

        gAxis.selectAll("text").attr({"font-size": "12px", "fill": "#fff"});
        gAxis.selectAll("path").attr({
            "fill": "none",
            "stroke": "#fff",
            "stroke-width": "0.5px",
            "shape-rendering": "crispEdges"
        });
        gAxis.selectAll("line").attr({"fill": "none", "stroke": "#fff", "stroke-width": "1px"});
    },


    addDefs : function(){
        var that = this;
        var defs = this.svg.append("defs");
        for(var k=0; k<that.chartColors.length-1; ++k){
            var ds = defs.append("linearGradient").attr({
                "id" : "myUse"+k,
                "x1" : "0%",
                "y1" : "0%",
                "x2" : "0%",
                "y2" : "100%"
            });
            ds.append("stop").attr({
                "offset" : "0%",
                "stop-color" : that.chartColors[k],
                "opacity" : 1
            });
            ds.append("stop").attr({
                "offset" : "100%",
                "stop-color" : that.chartColors[that.chartColors.length-1],
                "opacity" : 0
            });
        }
    },


    addTitle : function(){
        var that = this;
        var titleArea = this.svg.append("g").attr("class", "titleArea");
        titleArea.append("text").attr({
            "x" : that.padding.left,
            "y" : that.padding.top,
            "text-anchor" : "left",
            "fill" : that.colors[0],
            "dy" : ".35em",
            "font-size" : "20px",
            "font-weight" : "bold"
        }).text(that.title);
    }


});



// 扶贫 组合面积图（两个Y坐标轴）
zhnx.chart.fpMixtureArea = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
}
zhnx.chart.fpMixtureArea.prototype = $.extend({}, zhnx.chart.base, {
    constructor: zhnx.chart.fpMixtureArea,
    _defaults: {},

    width : 800,
    height : 700,
    padding: {top: 30, right: 70, bottom: 20, left: 60},
    colors : ["#D67821"/* 标题颜色 */, "#00C2FE"/* 主图颜色 */, "#04C9F4"/* 主图颜色 */, "#1A457C"/* 导航选中颜色 */, "#153067"/* 渐变消失颜色 */],
    chartColors : ["#04B1D9", "#026ADB", "#D1D125", "#CEA124", "#153067"/* 渐变消失颜色 */],
    titleHeight : 0,
    chartHeight : 0,
    sumHeight : 0,
    yTicks : 5,


    svg : undefined,
    chartArea : undefined,
    title : undefined,
    unit : undefined,
    xLabels : undefined,
    dataset : undefined,// 外部传进来的数据集
    xScale : undefined,
    yScale1 : undefined,
    yScale2 : undefined,
    tickValues1 : undefined,
    tickValues2 : undefined,
    dat : undefined,
    xMarks : undefined,


    init : function(args){
    	var that = this;
    	this.baseInit(args.selector);
        this.chartArea = this.svg.append("g").attr("class", "chartArea");
        this.title = args.title;
        this.unit = args.series.unit;
        this.xLabels = args.series.type;
        this.dataset = args.series.dataset;
        this.titleHeight = 0.15*this.height;
        this.chartHeight = 0.6*this.height;
        this.sumHeight = 0.25*this.height;

        this.addDefs();
        this.addTitle();
        this.drawChart();
        this.taketurns();
    },

    drawChart : function(){
        this.initData();
        this.addAxis();
        this.drawData();
        this.drawSum();
    },

    repaint : function(){
        this.drawChart();
    },

    drawSum : function(){
        var that = this;
        if(!that.chartArea.select(".gSum").empty()){
            that.chartArea.select(".gSum").remove();
        }
        var gSum = that.chartArea.append("g").attr("class", "gSum");

        var sum = d3.sum(this.dataset[1]);
        var mean = Math.floor(d3.mean(this.dataset[0]));
        gSum.append("rect").attr({
            "x" : 0.5*that.width,
            "y" : that.height-0.6*that.sumHeight,
            "width" : sum.toString().length*10,
            "height" : 30,
            "fill" : that.colors[1],
            "opacity" : 0.2
        });
// gSum.append("rect").attr({
// "x" : 0.5*that.width,
// "y" : that.height-0.6*that.sumHeight+40,
// "width" : mean.toString().length*10,
// "height" : 30,
// "fill" : that.colors[1],
// "opacity" : 0.2
// });
        gSum.append("text").attr({
            "x" : 0.5*that.width,
            "y" : that.height-0.6*that.sumHeight+15,
            "text-anchor" : "end",
            "font-size" : "16px",
            "fill" : that.colors[0],
            "dy" : ".35em"
        }).text("务工人员总数：");
// gSum.append("text").attr({
// "x" : 0.5*that.width,
// "y" : that.height-0.6*that.sumHeight+55,
// "text-anchor" : "end",
// "font-size" : "16px",
// "fill" : that.colors[0],
// "dy" : ".35em"
// }).text("平均可支配收入：");
        gSum.append("text").attr({
            "x" : 0.5*that.width,
            "y" : that.height-0.6*that.sumHeight+15,
            "text-anchor" : "start",
            "font-size" : "16px",
            "fill" : that.colors[0],
            "dy" : ".35em"
        }).text(sum+" 人");
// gSum.append("text").attr({
// "x" : 0.5*that.width,
// "y" : that.height-0.6*that.sumHeight+55,
// "text-anchor" : "start",
// "font-size" : "16px",
// "fill" : that.colors[0],
// "dy" : ".35em"
// }).text(mean+" 元");

    },

    drawData : function(){
        var that = this;
        if(!that.chartArea.select(".gChart").empty()){
            that.chartArea.select(".gChart").remove();
        }
        var chart = that.chartArea.append("g").attr("class", "gChart");
        var areaPath = d3.svg.area()
            .x(function(d, i){
                return that.xScale(that.xMarks[i]);
            })
            .y0(that.height-that.sumHeight)
            .y1(function(d, i){return that.yScale1(that.dat[0][i]);})
            .interpolate("cardinal");
        var areaPath1 = d3.svg.area()
            .x(function(d, i){
                return that.xScale(that.xMarks[i]);
            })
            .y0(that.height-that.sumHeight)
            .y1(that.height-that.sumHeight)
            .interpolate("cardinal");
        var areaPath2 = d3.svg.area()
            .x(function(d, i){
                return that.xScale(that.xMarks[i]);
            })
            .y0(that.height-that.sumHeight)
            .y1(function(d, i){return that.yScale2(that.dat[1][i]);})
            .interpolate("cardinal");

        chart.append("path").attr({
            "d" : areaPath1(that.dat[0]),
            "fill" : "url(#myUse0)",
            "opacity" : 0
        }).transition().delay(100).duration(900).attr("opacity", 0.7).attr("d", areaPath(that.dat[0]));
        chart.append("g").selectAll("circle").data(that.dataset[0]).enter().append("circle").attr({
            "cx" : function(d, i){ return that.xScale(that.xMarks[i+1]); },
            "cy" : function(d){ return that.yScale1(d); },
            "r" : "5px",
            "fill" : that.chartColors[0],
            "opacity" : 0
        }).transition().delay(1000).duration(300).attr("opacity", 1);
        chart.append("g").selectAll(".text").data(that.dataset[0]).enter().append("text").attr({
            "x" : function(d, i){return that.xScale(that.xMarks[i+1]);},
            "y" : function(d){return that.yScale1(d)-5;},
            "text-anchor" : "middle",
            "font-size" : "12px",
            "fill" : "#fff",
            "opacity" : 0
        }).text(function(d){return d+that.unit[0];}).transition().delay(1000).duration(300).attr("opacity", 1);

        chart.append("path").attr({
            "d" : areaPath1(that.dat[1]),
            "fill" : "url(#myUse1)",
            "opacity" : 0
        }).transition().delay(100).duration(900).attr("opacity", 0.7).attr("d", areaPath2(that.dat[1]));
        chart.append("g").selectAll("circle").data(that.dataset[1]).enter().append("circle").attr({
            "cx" : function(d, i){ return that.xScale(that.xMarks[i+1]); },
            "cy" : function(d){ return that.yScale2(d); },
            "r" : "5px",
            "fill" : that.chartColors[1],
            "opacity" : 0
        }).transition().delay(1000).duration(300).attr("opacity", 1);
        chart.append("g").selectAll(".text").data(that.dataset[1]).enter().append("text").attr({
            "x" : function(d, i){return that.xScale(that.xMarks[i+1]);},
            "y" : function(d){return that.yScale2(d)-5;},
            "text-anchor" : "middle",
            "font-size" : "12px",
            "fill" : "#fff",
            "opacity" : 0
        }).text(function(d){return d+that.unit[1];}).transition().delay(1000).duration(300).attr("opacity", 1);
    },

    // 初始化yScale1, yScale2, tickValues1,tickValues2, xScale, dat, xMarks
    initData : function(){
        var that =this;
        this.tickValues1 = [];
        this.tickValues2 = [];
        var max1 = that.getMaxVaule(that.yTicks, that.dataset[0]);
        var max2 = that.getMaxVaule(that.yTicks, that.dataset[1]);
        for(var i=0; i<=that.yTicks; ++i){
            this.tickValues1.push(i*max1/that.yTicks);
            this.tickValues2.push(i*max2/that.yTicks);
        }
        this.yScale1 = d3.scale.linear().domain([0, max1]).range([that.height-that.sumHeight, that.titleHeight]);
        this.yScale2 = d3.scale.linear().domain([0, max2]).range([that.height-that.sumHeight, that.titleHeight]);

        this.dat = [];
        for(var i=0; i<this.dataset.length; ++i){
            var temp = [];
            temp.push(0);
            for(var j=0; j<this.dataset[i].length; ++j){
                temp.push(this.dataset[i][j]);
            }
            temp.push(0);
            this.dat.push(temp);
        }
        this.xMarks = [];
        this.xMarks.push("  ");
        for(var i=0; i<this.xLabels.length; ++i){
            this.xMarks.push(this.xLabels[i]);
        }
        this.xMarks.push(" 0 ");
        this.xScale = d3.scale.ordinal().domain(that.xMarks).rangePoints([that.padding.left, that.width-that.padding.right]);

    },

    addAxis : function(){
        var that = this;
        if(!that.chartArea.select(".gAxis").empty()){
            that.chartArea.select(".gAxis").remove();
        }
        var gAxis = that.chartArea.append("g").attr({"class": "gAxis"});

        var yAxis1 = d3.svg.axis().scale(that.yScale1).orient("left").tickValues(that.tickValues1).tickSize(7).tickFormat(d3.format("1000"));
        var yBar1 = gAxis.append("g").attr("class", "g_yAxis1").attr("transform", "translate("+that.padding.left+",0)").call(yAxis1);
        var yAxis2 = d3.svg.axis().scale(that.yScale2).orient("right").tickValues(that.tickValues2).tickSize(7).tickFormat(d3.format("1000"));
        var yBar2 = gAxis.append("g").attr("class", "g_yAxis2").attr("transform", "translate("+(that.width-that.padding.right)+",0)").call(yAxis2);
        var xAxis = d3.svg.axis().scale(that.xScale).orient("bottom").ticks(that.xLabels.length).tickSize(7).tickPadding(10);
        var xBar = gAxis.append("g").attr("class", "g_xAxis")
            .attr("transform", "translate(0,"+(that.height-that.sumHeight)+")").call(xAxis);

        gAxis.selectAll("text").attr({"font-size": "12px", "fill": "#fff"});
        gAxis.selectAll("path").attr({
            "fill": "none",
            "stroke": "#fff",
            "stroke-width": "1px",
            "shape-rendering": "crispEdges"
        });
        gAxis.selectAll("line").attr({"fill": "none", "stroke": "#fff", "stroke-width": "1px"});
        gAxis.append("text").attr({
            "x" : 0.6*that.padding.left,
            "y" : that.titleHeight-that.padding.top,
            "text-anchor" : "start",
            "fill" : "#fff",
            "font-size" : "12px"
        }).text(that.unit[0]);
        gAxis.append("text").attr({
            "x" : that.width-that.padding.right,
            "y" : that.titleHeight-that.padding.top,
            "text-anchor" : "start",
            "fill" : "#fff",
            "font-size" : "12px"
        }).text(that.unit[1]);
        for(var i=1; i<=that.yTicks; ++i){
            var yPos = that.height-that.sumHeight-i*that.chartHeight/that.yTicks;
            gAxis.append("line").attr({
                "x1": that.padding.left,
                "y1": yPos,
                "x2": that.width-that.padding.right,
                "y2": yPos,
                "stroke-width":"0.5px",
                "stroke":"#fff",
                "opacity" : 0.3
            });
        }
        for(var i=1; i<that.xMarks.length; ++i){
            var xPos = that.xScale(that.xMarks[i]);
            gAxis.append("line").attr({
                "x1": xPos,
                "y1": that.titleHeight,
                "x2": xPos,
                "y2": that.height-that.sumHeight,
                "stroke-width":"0.5px",
                "stroke":"#fff",
                "opacity" : 0.3
            });
        }
    },


    addDefs : function(){
        var that = this;
        var defs = this.svg.append("defs");
        for(var k=0; k<that.chartColors.length-1; ++k){
            var ds = defs.append("linearGradient").attr({
                "id" : "myUse"+k,
                "x1" : "0%",
                "y1" : "0%",
                "x2" : "0%",
                "y2" : "100%"
            });
            ds.append("stop").attr({
                "offset" : "0%",
                "stop-color" : that.chartColors[k],
                "opacity" : 1
            });
            ds.append("stop").attr({
                "offset" : "100%",
                "stop-color" : that.chartColors[that.chartColors.length-1],
                "opacity" : 0
            });
        }
    },


    addTitle : function(){
        var that = this;
        var titleArea = this.svg.append("g").attr("class", "titleArea");
        titleArea.append("text").attr({
            "x" : that.padding.left,
            "y" : that.padding.top,
            "text-anchor" : "start",
            "fill" : that.colors[0],
            "dy" : ".35em",
            "font-size" : "20px",
            "font-weight" : "bold"
        }).text(that.title);
    },
    
});




// 扶贫 水平百分比图
zhnx.chart.fphorizonColumn = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
}
zhnx.chart.fphorizonColumn.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.fphorizonColumn,
    _defaults: {},
    
    padding : {top:30, right:30, bottom:40, left:30},
    titleHeight : 60,
    colors : ["#D67821"/* 标题颜色 */, "#0F568E"/* 主图底色 */, "#05BCFE"/* 主图色 */, "#1A457C"/* 导航选中颜色 */],
    navSize : 100,
    navRectWidth : 80,
    navRectHeight : 30,
    navRectGap : 10,
    leftWidth : 80,
    rightWidth : 80,
    yGap : 15,
    columnHeight : -1,

    svg : undefined,
    chartArea : undefined,
    title : undefined,
    mode : undefined,
    unit : undefined,
    dataset : undefined,
    dat : [],
    nav : [],
    navAreaCode : [],
    type : [],
    yMax : -1,
    selectedIndex : 0,
    xScale : undefined,


    init : function(args){
        var that = this;
        this.baseInit(args.selector);
        this.svg.attr("font-family", "Microsoft YaHei");
        this.chartArea = this.svg.append("g").attr("class", "chartArea");
        this.title = args.title;
        this.mode = args.mode;
        this.unit = args.series.unit;
        this.dataset = args.series.dataset;
        this.addTitle();

        this.drawChart();
        this.taketurns();
    },

    repaint: function(){
		this.drawChart();
	},

    drawChart : function(){
        // 初始化 padding, dat, type, yMax, nav, columnHeight, xScale
        this.initBaseData();

        this.drawNav();
        this.setSelectedItem();
        this.drawLeft();
        this.drawMiddle();
        this.drawRight();
        this.drawData();

    },
    setSelectedItem : function(){
        var that = this;
        this.chartArea.select(".gNav").selectAll("rect").each(function(d, i){
            if (that.selectedIndex == i){
                d3.select(this).attr("fill", that.colors[3]);
            }else{
                d3.select(this).attr("fill", "none");
            }
        });
    },
    drawData : function(){
    	var that = this;
        if(!this.chartArea.select(".gChart").empty()){
            this.chartArea.select(".gChart").remove();
        }
        var gChart = this.chartArea.append("g").attr("class", "gChart");
        gChart.selectAll("rect").data(that.dat).enter().append("rect").attr({
            "x" : that.padding.left+that.leftWidth,
            "y" : function(d,i){return that.padding.top+that.titleHeight+that.yGap+i*(that.columnHeight+that.yGap);},
            "width" : 0,
            "height" : that.columnHeight,
            "fill" : that.colors[2]
        }).transition().duration(1000).ease("circle-out")
            .attr("width", function(d){return that.xScale(d)-that.padding.left-that.leftWidth;});
    },
    drawRight : function(){
    	var that = this;
        if(!this.chartArea.select(".gRight").empty()){
            this.chartArea.select(".gRight").remove();
        }
        var gRight = this.chartArea.append("g").attr("class", "gRight");
        gRight.selectAll("text").data(that.dat).enter().append("text").attr({
            "x" : that.width-that.padding.right-that.rightWidth+5,
            "y" : function(d,i){return that.padding.top+that.titleHeight+0.5*that.yGap+(0.5+i)*(that.columnHeight+that.yGap);},
            "text-anchor" : "left",
            "font-size" : "14px",
            "fill" : that.colors[0],
            "dy" : ".3em"
        }).text(function(d){return d+that.unit;});
    },
    drawMiddle : function(){
    	var that = this;
        if(!this.chartArea.select(".gMiddle").empty()){
            this.chartArea.select(".gMiddle").remove();
        }
        var gMiddle = this.chartArea.append("g").attr("class", "gMiddle");
        var temp = 0, temp1 = 0;
        if(this.mode == "left"){
            temp = that.padding.left+that.leftWidth;
            temp1 = that.xScale(that.yMax)-that.padding.left-that.leftWidth;
        }else{
            temp = that.padding.left+that.leftWidth;
            temp1 = that.xScale(that.yMax)-that.padding.left-that.leftWidth;
        }
        gMiddle.selectAll("rect").data(that.type).enter().append("rect").attr({
            "x" : temp,
            "y" : function(d,i){return that.padding.top+that.titleHeight+that.yGap+i*(that.columnHeight+that.yGap);},
            "width" : temp1,
            "height" : that.columnHeight,
            "fill" : that.colors[1]
        });
    },

    drawLeft : function(){
    	var that = this;
        if(!this.chartArea.select(".gLeft").empty()){
            this.chartArea.select(".gLeft").remove();
        }
        var gLeft = this.chartArea.append("g").attr("class", "gLeft");
        gLeft.selectAll("text").data(that.type).enter().append("text").attr({
            "x" : that.padding.left+that.leftWidth-5,
            "y" : function(d,i){return that.padding.top+that.titleHeight+0.5*that.yGap+(0.5+i)*(that.columnHeight+that.yGap);},
            "text-anchor" : "end",
            "font-size" : "14px",
            "fill" : "#fff",
            "dy" : ".3em"
        }).text(function(d){return d;});
    },


    drawNav : function(){
        var that = this;
        if(!this.chartArea.select(".gNav").empty()){
            this.chartArea.select(".gNav").remove();
        }
        var gNav = this.chartArea.append("g").attr("class", "gNav");
        if(this.mode == "bottom"){
            gNav.selectAll("rect").data(that.nav).enter().append("rect").attr({
                    "x" : function(d, i){ return that.padding.left+i*(that.navRectWidth+that.navRectGap); },
                    "y" : that.height-0.6*that.padding.bottom,
                    "width" : that.navRectWidth,
                    "height" : that.navRectHeight,
                    "fill" : "none",
                    "stroke" : that.colors[1],
                    "stroke-width" : "2px",
                    "cursor" : "pointer"
                })
                .on("click", function(d, i){
                	that.navClick(i);
                	that.commandNavClick({
            			type: 'click',
            			context: that.id,
            			contextType: 'chaObj',
            			execString: "that.navClick(" + i + ")",
            			execMode: "evalfunc"
                	});
                });
            gNav.selectAll("text").data(that.nav).enter().append("text").attr({
                    "x" : function(d, i){ return that.padding.left+0.5*that.navRectWidth+i*(that.navRectWidth+that.navRectGap); },
                    "y" : that.height-0.6*that.padding.bottom+0.5*that.navRectHeight,
                    "font-size" : "16px",
                    "fill" : that.colors[0],
                    "text-anchor" : "middle",
                    "dy" : ".35em",
                    "cursor" : "pointer"
                })
                .on("click", function(d, i){
                	that.navClick(i);
                	that.commandNavClick({
            			type: 'click',
            			context: that.id,
            			contextType: 'chaObj',
            			execString: "that.navClick(" + i + ")",
            			execMode: "evalfunc"
                	});
                })
                .text(function(d){return d;});
        }else if(this.mode == "left"){
            var yPos = (that.height-(that.nav.length*(that.navRectHeight+that.navRectGap)))/2;
            gNav.selectAll("rect").data(that.nav).enter().append("rect").attr({
                    "x" : 10,
                    "y" : function(d, i){return yPos+i*(that.navRectHeight+that.navRectGap);},
                    "width" : that.navRectWidth,
                    "height" : that.navRectHeight,
                    "fill" : "none",
                    "stroke" : that.colors[1],
                    "stroke-width" : "1px",
                    "cursor" : "pointer"
                })
                .on("click", function(d, i){
                	that.navClick(i);
                	that.commandNavClick({
            			type: 'click',
            			context: that.id,
            			contextType: 'chaObj',
            			execString: "that.navClick(" + i + ")",
            			execMode: "evalfunc"
                	});
                });
            gNav.selectAll("text").data(that.nav).enter().append("text").attr({
                    "x" : 0.5*that.navRectWidth+10,
                    "y" : function(d, i){return yPos+i*(that.navRectHeight+that.navRectGap)+0.5*that.navRectHeight;},
                    "font-size" : "16px",
                    "fill" : that.colors[0],
                    "text-anchor" : "middle",
                    "dy" : ".35em",
                    "cursor" : "pointer"
                })
                .on("click", function(d, i){
                	that.navClick(i);
                	that.commandNavClick({
            			type: 'click',
            			context: that.id,
            			contextType: 'chaObj',
            			execString: "that.navClick(" + i + ")",
            			execMode: "evalfunc"
                	});
                })
                .text(function(d){return d;});
            var x0=that.navRectWidth+40, y0=0.5*that.height-15, x1=x0+60, y1=y0, x2=x1, y2=y1-15,
                x3=x2+20, y3=y2+30, x4=x2, y4=y3+30, x5=x4, y5=y4-15, x6=x0, y6=y5;
            gNav.append("path").attr({
                "d" : "M"+x0+" "+y0+"L"+x1+" "+y1+"L"+x2+" "+y2+"L"+x3+" "+y3+"L"+x4+" "+y4+"L"+x5+" "+y5+"L"+x6+" "+y6+"L"+x0+" "+y0,
                "fill" : that.colors[1],
                "stroke" : that.colors[2],
                "stroke-width" : "1px",
                "opacity" : 0.5
            });
            gNav.append("text").attr({
                "x" : x0+40,
                "y" : y0+15,
                "font-size" : "16px",
                "fill" : "#fff",
                "text-anchor" : "middle",
                "dy" : ".35em"
            }).text("迁出到");
        }else{
            var yPos = (that.height-(that.nav.length*(that.navRectHeight+that.navRectGap)))/2;
            gNav.selectAll("rect").data(that.nav).enter().append("rect").attr({
                    "x" : that.width-that.navRectWidth-10,
                    "y" : function(d, i){return yPos+i*(that.navRectHeight+that.navRectGap);},
                    "width" : that.navRectWidth,
                    "height" : that.navRectHeight,
                    "fill" : "none",
                    "stroke" : that.colors[1],
                    "stroke-width" : "1px",
                    "cursor" : "pointer"
                })
                .on("click", function(d, i){
                	that.navClick(i);
                	that.commandNavClick({
            			type: 'click',
            			context: that.id,
            			contextType: 'chaObj',
            			execString: "that.navClick(" + i + ")",
            			execMode: "evalfunc"
                	});
                });
            gNav.selectAll("text").data(that.nav).enter().append("text").attr({
                    "x" : that.width-10-0.5*that.navRectWidth,
                    "y" : function(d, i){return yPos+i*(that.navRectHeight+that.navRectGap)+0.5*that.navRectHeight;},
                    "font-size" : "16px",
                    "fill" : that.colors[0],
                    "text-anchor" : "middle",
                    "dy" : ".35em",
                    "cursor" : "pointer"
                })
                .on("click", function(d, i){
                	that.navClick(i);
                	that.commandNavClick({
            			type: 'click',
            			context: that.id,
            			contextType: 'chaObj',
            			execString: "that.navClick(" + i + ")",
            			execMode: "evalfunc"
                	});
                })
                .text(function(d){return d;});
            var x0=that.width-2*that.navRectWidth-40, y0=0.5*that.height-15, x1=x0+60, y1=y0, x2=x1, y2=y1-15,
                x3=x2+20, y3=y2+30, x4=x2, y4=y3+30, x5=x4, y5=y4-15, x6=x0, y6=y5;
            gNav.append("path").attr({
                "d" : "M"+x0+" "+y0+"L"+x1+" "+y1+"L"+x2+" "+y2+"L"+x3+" "+y3+"L"+x4+" "+y4+"L"+x5+" "+y5+"L"+x6+" "+y6+"L"+x0+" "+y0,
                "fill" : that.colors[1],
                "stroke" : that.colors[2],
                "stroke-width" : "1px",
                "opacity" : 0.5
            });
            gNav.append("text").attr({
                "x" : x0+40,
                "y" : y0+15,
                "font-size" : "16px",
                "fill" : "#fff",
                "text-anchor" : "middle",
                "dy" : ".35em"
            }).text("迁入到");
        }
    },
    navClick: function(i){
    	this.taketurns();
    	this.selectedIndex = i;
    	this.drawChart();
    	this.navOuterClick(i, this.navAreaCode[i]);
    },
    navOuterClick: function(i, areaCode){
    	
    },
    commandNavClick: function(commandArgs){
    	
    },

    // 初始化 padding, dat, type, yMax, nav, columnHeight, xScale
    initBaseData : function(){
        this.dat = [];
        this.type = [];
        this.nav = [];
        this.navAreaCode = [],
        this.dat = this.dataset[this.selectedIndex].data;
        this.type = this.dataset[this.selectedIndex].type;
        for(var i=0; i<this.dataset.length; ++i){
            this.nav.push(this.dataset[i].nav);
            this.navAreaCode.push(this.dataset[i].areaCode);
        }
        this.yMax = d3.max(this.dat);
        if(this.mode == "bottom"){
            this.padding.right = 30;
            this.padding.left = 50;
            this.padding.bottom = 0.5*this.navSize;
            this.titleHeight = 30;
        }else{
        	this.titleHeight = 60;
            if(this.mode == "left"){
                // this.padding.right = 30;
                this.padding.bottom = 40;
                // this.padding.left = this.navSize+30;
                this.padding.right = 10;
                this.padding.left = 2*this.navSize+20;
            }else{
                // this.padding.left = 30;
                this.padding.bottom = 40;
                // this.padding.right = this.navSize+30;
                this.padding.left = 10;
                this.padding.right = 2*this.navSize+20;
            }
        }
        this.xScale = d3.scale.linear().domain([0, this.yMax]).range([this.padding.left+this.leftWidth, this.width-this.padding.right-this.rightWidth]);
        this.columnHeight = Math.floor((this.height-this.padding.bottom-this.padding.top-this.titleHeight-this.yGap*(this.type.length+1))/this.type.length);
        this.columnHeight = this.columnHeight > 30 ? 30 : this.columnHeight;
        this.columnHeight = this.columnHeight < 15 ? 15 : this.columnHeight;
    },

    addTitle : function(){
        var that = this;
        var titleArea = this.svg.append("g").attr("class", "titleArea");
        if(this.mode == "bottom"){
            titleArea.append("text").attr({
                "x" : that.padding.left,
                "y" : that.padding.top,
                "text-anchor" : "left",
                "fill" : that.colors[0],
                "dy" : ".35em",
                "font-size" : "20px",
                "font-weight" : "bold"
            }).text(that.title);
        }else{
            titleArea.append("rect").attr({
                "x" : 0.5*that.width-50,
                "y" : that.padding.top,
                "width" : 100,
                "height" : 40,
                "fill" : "none",
                "stroke" : that.colors[1],
                "stroke-width" : "1px"
            });
            titleArea.append("rect").attr({
                "x" : 0.5*that.width-46,
                "y" : that.padding.top+4,
                "width" : 92,
                "height" : 32,
                "fill" : that.colors[3]
            });
            titleArea.append("text").attr({
                "x" : 0.5*that.width,
                "y" : that.padding.top+20,
                "text-anchor" : "middle",
                "fill" : that.colors[0],
                "dy" : ".35em",
                "font-size" : "20px",
                "font-weight" : "bold"
            }).text(that.title);
            titleArea.append("circle").attr({
                "cx" : 0.5*that.width-50,
                "cy" : that.padding.top,
                "r" : "3px",
                "fill" : that.colors[2]
            });
            titleArea.append("circle").attr({
                "cx" : 0.5*that.width+50,
                "cy" : that.padding.top,
                "r" : "3px",
                "fill" : that.colors[2]
            });
            titleArea.append("circle").attr({
                "cx" : 0.5*that.width-50,
                "cy" : that.padding.top+40,
                "r" : "3px",
                "fill" : that.colors[2]
            });
            titleArea.append("circle").attr({
                "cx" : 0.5*that.width+50,
                "cy" : that.padding.top+40,
                "r" : "3px",
                "fill" : that.colors[2]
            });
        }
    }
	
});



// 扶贫 户主信息
zhnx.chart.fpHuZhuInfo = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
}
zhnx.chart.fpHuZhuInfo.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.fpHuZhuInfo,
    _defaults: {},

    
    padding: {top: 30, right: 30, bottom: 30, left: 30},
    colors : ["#D67821"/* 标题颜色 */, "#00C2FE"/* 主图颜色 */, "#04C9F4"/* 主图颜色 */, "#1A457C"/* 导航选中颜色 */, "#153067"/* 渐变消失颜色 */],

    hzWidth : 300,
    hzHeight : 100,
    hzejWidth : 300,
    hzejHeight : 70,
    hzsjWidth : 650,
    navHeight : 35,
    navWidth : 100,
    navSize : 200,// 导航占高

    svg : undefined,
    chartArea : undefined,
    selectedIndex : undefined,

    series : undefined,
    dat : undefined,
    nav : undefined,
    type : undefined,
    huzhu : undefined,
    
    
    init : function(args){
    	this.baseInit(args.selector);
        this.svg.attr("font-family", "Microsoft YaHei");
        this.chartArea = this.svg.append("g").attr("class", "chartArea").attr("transform","translate("+this.width/6+","+0+")")
        this.selectedIndex = 0;

        this.huzhu = args.huzhu;
        this.series = args.series;        

        this.nav = [];
        for(var i=0; i<this.series.length; ++i){
            this.nav.push(this.series[i].nav);
        }
        this.drawNav();
        this.setNavSelectItem();
        this.drawChart();
    },

    repaint : function(){
    	this.drawChart();
    },

    drawChart : function(){
        this.initData();
        this.drawChart1();      
    },

    
    drawChart1 : function(){
        var that = this;
        if(!this.chartArea.selectAll("g").empty()){
        	this.chartArea.selectAll("g").remove();
        }
        var chart1 = this.chartArea.append("g").attr("class", "chart1");
        zhnx.utils.loadSvg("svg/rect/huzhu.svg", function(importedNode){
            var plane = chart1.node().appendChild(importedNode.cloneNode(true));
            d3.select(plane).attr({
                "id" : "huzhu",
                "width": that.hzWidth,
                "height": that.hzHeight,
                "x" : 0.35*(that.width-that.hzWidth),
                "y" : 0.3*(that.height-that.hzHeight)
            });
            d3.select(plane).append("text").attr({
                "x" : 0.4*that.hzWidth,
                "y" : 0.3*that.hzHeight,
                "fill" : "#fff",
                "text-anchor" : "middle",
                "font-size" : "28px",
                "dy" : ".35em"
            }).text("户主");
            d3.select(plane).append("text").attr({
                "x" : 0.4*that.hzWidth,
                "y" : 0.8*that.hzHeight,
                "fill" : "#fff",
                "text-anchor" : "middle",
                "font-size" : "38px",
                "font-weight" : "bold",
                "dy" : ".35em"
            }).text(that.huzhu);
        });   
       
        var xGap3 = [20, -30, -80, -30, 20, 1085, 1135, 1185, 1135, 1085];
        var xGap2 = [310, 260, 210, 260, 310, 800, 850, 900, 850, 800];
        var yGap = [50, 150, 250, 350, 450, 50, 150, 250, 350, 450];
    	zhnx.utils.loadSvg("svg/rect/huzhuerji.svg", function(importedNode){
    		for(var i=0; i<that.type.length; ++i){
    			var plane = chart1.append("g").attr("class","erji").node().appendChild(importedNode.cloneNode(true));
    			d3.select(plane).attr({
                  "width": that.hzsjWidth,
                  "height": that.hzejHeight,
                  "x" : xGap2[i],
                  "y" : yGap[i],
    			});
                d3.select(plane).append("text").attr({
                    "x" : 0.35*that.hzejWidth,
                    "y" : 0.5*that.hzejHeight,
                    "fill" : "#fff",
                    "text-anchor" : "middle",
                    "font-size" : "18px",
                    "dy" : ".35em"
                }).text(that.type[i]);            	
    		}
    	});
        	 
    	zhnx.utils.loadSvg("svg/rect/huzhusanji.svg", function(importedNode){
    		for(var i=0; i<that.dat.length; ++i){
	            var plane = chart1.append("g").attr("class","sanji").node().appendChild(importedNode.cloneNode(true));
	            d3.select(plane).attr({
	                "width": that.hzsjWidth,
	                "height": that.hzejHeight,
	                "x" : xGap3[i],
	                "y" : yGap[i],
	            });
	            var xPos = (i>=5) ? (0.05*that.hzsjWidth) : (0.7*that.hzsjWidth);
	            var anchor = (i>=5) ? "start" : "end";
	            d3.select(plane).append("text").attr({
	                "x" : xPos,
	                "y" : 0.6*that.hzejHeight,
	                "fill" : that.colors[0],
	                "text-anchor" : anchor,
	                "font-size" : "18px",
	                "dy" : ".35em"
	            }).text(that.dat[i]);
    		}
        });
    },
    drawNav : function(){
        var that = this;
        if(!this.svg.select(".gNav").empty()){
            this.svg.select(".gNav").remove();
        }
        var gNav = this.svg.append("g").attr("class", "gNav").attr("transform","translate("+this.width/6+","+0+")");
        var xPos = 0.36*(this.width-this.nav.length*(this.navWidth+20));
        gNav.selectAll("rect").data(that.nav).enter().append("rect").attr({
                "x" : function(d, i){ return xPos+i*(that.navWidth+20); },
                "y" : that.height-1*that.navSize,
                "width" : that.navWidth,
                "height" : that.navHeight,
                "fill" : "none",
                "stroke" : that.colors[1],
                "stroke-width" : "1px"
            })
            .on("click", function(d, i){
            	that.navClick(i);
            	that.commandNavClick({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.navClick(" + i + ")",
        			execMode: "evalfunc"
            	});
            });

        gNav.selectAll("text").data(that.nav).enter().append("text").attr({
                "x" : function(d, i){ return xPos+i*(that.navWidth+20)+0.5*that.navWidth; },
                "y" : that.height-1*that.navSize+0.5*that.navHeight,
                "font-size" : "14px",
                "fill" : "#fff",
                "text-anchor" : "middle",
                "dy" : ".35em"
            })
            .on("click", function(d, i){
            	that.navClick(i);
            	that.commandNavClick({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.navClick(" + i + ")",
        			execMode: "evalfunc"
            	});
            })
            .text(function(d){return d;});
    },
    navClick: function(i){
        this.selectedIndex = i;
        this.setNavSelectItem();
        this.drawChart();
    },
    commandNavClick: function(commandArgs){
    	
    },

    setNavSelectItem : function(){
        var that = this;
        this.svg.select(".gNav").selectAll("rect").each(function(d, i){
            if (that.selectedIndex == i){
                d3.select(this).attr("fill", that.colors[3]);
            }else{
                d3.select(this).attr("fill", "none");
            }
        });
    },

    // 初始化type, dat, nav
    initData : function(){
        this.type = this.series[this.selectedIndex].type;
        this.dat = this.series[this.selectedIndex].dataset;
    },

    
    
});



// 扶贫 折线图
zhnx.chart.fpLineChart = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
}
zhnx.chart.fpLineChart.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.fpLineChart,
    _defaults: {},

    padding : {top:30, right:80, bottom:60, left:50},
    colors : ["#D67821"/* 标题颜色 */, "#00beff"/* 主图颜色 */, "#1A457C"/* 导航选中颜色 */],
    legendCircleR : 7,
    legendGap : 20,
    chartHeight : 0,
    yTicks : 5,

    svg : undefined,
    chartArea : undefined,
    title : undefined,
    unit : undefined,
    xLabels : undefined,
    dataset : undefined,// 外部传进来的数据集
    type : undefined,
    dat : [],// 当前绘图数据
    selectedIndex : undefined,
    xScale : undefined,
    yScale : undefined,
    
    defs : undefined,

    mode : undefined,


    init : function(args){
        var that = this;
        this.baseInit(args.selector);
    	this.svg.attr("font-family", "Microsoft YaHei");
        this.chartArea = this.svg.append("g").attr("class", "chartArea");
        this.title = args.title;
        this.unit = args.series.unit;
        this.xLabels = args.series.year;
        this.dataset = args.series.dataset;
        this.mode = args.series.mode;
        this.selectedIndex = 0;
        this.chartHeight = 2.5*this.padding.top;
        this.xScale = d3.scale.ordinal().domain(that.xLabels).rangePoints([that.padding.left+30, that.width-that.padding.right-30]);
        this.addDefs();

        // 初始化type , dat, yScale
        this.initChartData();


        this.addTitle();


        this.drawChart();
        this.taketurns();
    },

    repaint: function(){
		this.drawChart();
	},

    addDefs : function(){
          var defs = this.svg.append("defs").append("linearGradient").attr({
              "id" : "myGradient",
              "x1" : "0%",
              "y1" : "0%",
              "x2" : "0%",
              "y2" : "100%"
          });
        defs.append("stop").attr({
            "offset" : "0%",
            "stop-color" : this.colors[1],
            "opacity" : 1
        });
        defs.append("stop").attr({
            "offset" : "100%",
            "stop-color" : "#153067",
            "opacity" : 0
        });
    },


    drawChart : function(){
        this.initChartData();
        if(this.mode == "single"){
            this.addAxis();
            this.drawData();
        }else{
            this.addLegend();
            this.setSelectedIndex();
            this.addAxis();
            this.drawData();
        }
    },

    drawData : function(){
        var that = this;
        if(!that.chartArea.select(".gChart").empty()){
            that.chartArea.select(".gChart").remove();
        }
        var chart = that.chartArea.append("g").attr({"class": "gChart","transform":"translate("+this.padding.left/4+","+0+")"});

        var areaPath = d3.svg.area()
            .x(function(d, i){return that.xScale(that.xLabels[i]);})
            .y0(function(d, i){return that.height-that.padding.bottom;})
            .y1(function(d, i){return that.yScale(that.dat[i]);});
        chart.append("path").attr({
            "d" : areaPath(that.dat),
            "fill" : "url(#myGradient)",
            "opacity" : 0
        }).transition().delay(1000).duration(500).attr("opacity", 0.7);

        for(var i=1; i<that.dat.length; ++i){
            chart.append("line").attr({
                "x1" : that.xScale(that.xLabels[i-1]),
                "y1" : that.yScale(that.dat[i-1]),
                "x2" : that.xScale(that.xLabels[i-1]),
                "y2" : that.yScale(that.dat[i-1]),
                "stroke" : that.colors[1],
                "stroke-width" : "2px"
            }).transition().delay(250*i).duration(250).attr({
                "x2" : that.xScale(that.xLabels[i]),
                "y2" : that.yScale(that.dat[i])
            });
        }

        chart.selectAll("circle").data(that.dat).enter().append("circle").attr({
            "cx" : function(d, i){ return that.xScale(that.xLabels[i]); },
            "cy" : function(d){ return that.yScale(d); },
            "r" : "5px",
            "fill" : that.colors[1],
            "opacity" : 0
        }).transition().delay(1000).duration(300).attr("opacity", 1);


    },

    addAxis : function(){
        var that = this;
        if(!that.chartArea.select(".gAxis").empty()){
            that.chartArea.select(".gAxis").remove();
        }
        var gAxis = that.chartArea.append("g").attr({"class": "gAxis","transform":"translate("+this.padding.left/4+","+0+")"});
        gAxis.append("text").attr({
            "x" : 0.6*that.padding.left,
            "y" : that.chartHeight-0.5*that.padding.top,
            "text-anchor" : "left",
            "fill" : "#fff",
            "font-size" : "12px"
        }).text(that.unit);
        gAxis.append("line").attr({
            "x1": that.padding.left,
            "y1": that.height-that.padding.bottom,
            "x2": that.padding.left,
            "y2": that.chartHeight,
            "stroke-width":"1px",
            "stroke":"#fff"
        });
        gAxis.append("line").attr({
            "x1": that.padding.left,
            "y1": that.height-that.padding.bottom,
            "x2": that.width-that.padding.right,
            "y2": that.height-that.padding.bottom,
            "stroke-width":"1px",
            "stroke":"#fff"
        });
        for(var i=1; i<that.yTicks; ++i){
            var yPos = that.height-that.padding.bottom-i*(that.height-that.padding.bottom-that.chartHeight)/that.yTicks;
            gAxis.append("line").attr({
                "x1": that.padding.left,
                "y1": yPos,
                "x2": that.width-that.padding.right,
                "y2": yPos,
                "stroke-width":"0.5px",
                "stroke":"#fff",
                "opacity" : 0.3
            });
        }

        var yAxis = d3.svg.axis().scale(that.yScale).orient("left").ticks(that.yTicks).tickSize(7).tickFormat(d3.format("1000"));
        var yBar = gAxis.append("g").attr("class", "g_yAxis").attr("transform", "translate("+that.padding.left+",0)").call(yAxis);
        var xAxis = d3.svg.axis().scale(that.xScale).orient("bottom").ticks(that.xLabels.length).tickSize(7).tickPadding(10);
        var xBar = gAxis.append("g").attr("class", "g_xAxis")
            .attr("transform", "translate(0,"+(that.height-that.padding.bottom)+")").call(xAxis);

        gAxis.selectAll("text").attr({"font-size": "12px", "fill": "#fff"});
        gAxis.selectAll("path").attr({
            "fill": "none",
            "stroke": "#fff",
            "stroke-width": "0.5px",
            "shape-rendering": "crispEdges"
        });
        gAxis.selectAll("line").attr({"fill": "none", "stroke": "#fff", "stroke-width": "1px"});
    },

    // 初始化type , dat, yScale
    initChartData : function(){
        this.type = [];
        if(this.mode == "single"){
            this.dat = this.dataset;
        }else{
            for(var i=0; i<this.dataset.length; ++i){
                this.type.push(this.dataset[i].type);
            }
            this.dat = this.dataset[this.selectedIndex].data;
        }
        this.yScale = d3.scale.linear().domain([0, d3.max(this.dat)]).range([this.height-this.padding.bottom, this.chartHeight+20]);
    },


    setSelectedIndex : function(){
        var that = this;
        for(var i=0; i<that.type.length; ++i){
            if(i == this.selectedIndex){
                this.chartArea.select(".gLegend").select(".legendCircle"+i).attr("fill", that.colors[0]);
                this.chartArea.select(".gLegend").select(".legendText"+i).attr("fill", that.colors[0]);
            }else{
                this.chartArea.select(".gLegend").select(".legendCircle"+i).attr("fill", "none");
                this.chartArea.select(".gLegend").select(".legendText"+i).attr("fill", "#fff");
            }
        }
    },


    addLegend : function(){
        var that = this;
        if(!this.chartArea.select(".gLegend").empty()){
            this.chartArea.select(".gLegend").remove();
        }
        var gLegend = this.chartArea.append("g").attr("class", "gLegend");
        gLegend.selectAll("circle").data(that.type).enter().append("circle").attr({
            "class" : function(d, i){return "legendCircle"+i;},
            "cx" : that.width-that.padding.right+that.legendCircleR,
            "cy" : function(d, i){return that.chartHeight+i*(2*that.legendCircleR+that.legendGap);},
            "r" : that.legendCircleR,
            "fill" : "none",
            "stroke" : that.colors[0],
            "stroke-width" : "1px",
            "cursor" : "pointer"
        })
            .on("click", function(d, i){
            	that.legendClick(i);
            	that.commandLegendClick({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.legendClick(" + i + ")",
        			execMode: "evalfunc"
            	});
            });

        gLegend.selectAll("text").data(that.type).enter().append("text").attr({
            "class" : function(d, i){return "legendText"+i;},
            "x": that.width-that.padding.right+3*that.legendCircleR,
            "y": function(d, i){return that.chartHeight+i*(2*that.legendCircleR+that.legendGap);},
            "font-size": "12px",
            "fill":"#fff",
            "text-anchor":"left",
            "dy":"0.5em",
            "cursor" : "pointer"
        })
            .on("click", function(d, i){
            	that.legendClick(i);
            	that.commandLegendClick({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.legendClick(" + i + ")",
        			execMode: "evalfunc"
            	});
            })
            .text(function(d){return d;});

    },
    legendClick: function(i){
    	this.taketurns();
    	this.selectedIndex = i;
    	this.setSelectedIndex();
    	this.drawChart();
    },
    commandLegendClick: function(commandArgs){
    	
    },
    addTitle : function(){
        var that = this;
        var titleArea = this.svg.append("g").attr("class", "titleArea");
        titleArea.append("text").attr({
            "x" : that.padding.left,
            "y" : that.padding.top,
            "text-anchor" : "left",
            "fill" : that.colors[0],
            "dy" : ".35em",
            "font-size" : "20px",
            "font-weight" : "bold"
        }).text(that.title);
    }
    
});

// 扶贫 多维三角柱图
zhnx.chart.fpmultiTriangleColumn = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
}
zhnx.chart.fpmultiTriangleColumn.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.fpmultiTriangleColumn,
    _defaults: {},

    padding : {top:30, right:50, bottom:50, left:120},
    colors : ["#D67821", "#00C2FE",  "#F59E03", "#1A457C"],
    chartHeight : 0,
    legendRectWidth : 20,
    legendRectHeight : 12,
    yTicks : 5,
    yMax : undefined,
    columnWidth : 20,
// navWidth : 70,
// navHeight : 30,
    navGap : 10,
    navFontSize : 14,
    navTextWidth : undefined,

    svg : undefined,
    title : undefined,
    unit : undefined,
    nav : [],
    xLabels : undefined,
    dataset : undefined,// 外部传进来的数据集
    chartArea : undefined,
    type : [],
    selectedIndex : undefined,
    dat : [],// 当前用来绘图的数据
    xScale : undefined,
    yScale : undefined,
    tickValues : undefined,
    init : function(args){
        var that = this;
        this.baseInit(args.selector);
    	this.svg.attr("font-family", "Microsoft YaHei");
        this.chartArea = this.svg.append("g").attr("class", "chartArea").attr("transform","translate("+(-that.padding.left/4)+","+0+")");
        this.title = args.title;
        this.unit = args.series.unit;
        this.nav = args.series.nav;
        this.xLabels = args.series.year;
        if(this.xLabels.length < 5){
        	this.columnWidth = 40;
        }
        this.dataset = args.series.dataset;
        this.xScale = d3.scale.ordinal().domain(that.xLabels).rangePoints([that.padding.left+50, that.width-that.padding.right-50]);
        this.selectedIndex = (this.nav == "none") ? -1 : 0;
        this.initData();// 初始化dat,type,selectedIndex,yScale,chartHeight

        this.addTitle();
        if(args.series.dataset.length>0){
        	 this.drawChart();
        }
       
        this.taketurns();
    },
    repaint: function(){
		this.drawChart();
	},
    drawChart : function(){
        this.initData();
        if(this.nav != "none"){
            this.drawNav();
            this.setNavSelectItem();
        }        
        this.addLegend();
        this.addAxis();
        if(this.dat.length == 1){
            this.drawSingleData();
        }else{
            this.drawData();
        }
    },
    setNavSelectItem : function(){
        var that = this;
        this.chartArea.select(".gNav").selectAll("rect").each(function(d, i){
            if (that.selectedIndex == i){
                d3.select(this).attr("fill", that.colors[3]);
            }else{
                d3.select(this).attr("fill", "none");
            }
        });
    },
    drawNav : function(){
        var that = this;
        this.navTextWidth = [];
        for(var k = 0; k<this.nav.length; ++k){
            var temp = this.navFontSize*this.nav[k].length;
            this.navTextWidth.push(temp);
        }
        if(!this.chartArea.select(".gNav").empty()){
            this.chartArea.select(".gNav").remove();
        }
        var gNav = this.chartArea.append("g").attr("class", "gNav");
        gNav.selectAll("rect").data(that.nav).enter().append("rect").attr({
	        	"x" : function(d, i){return that.padding.left+that.getSum(i);},
	            "y" : 2.5*that.padding.top,
	            "width" : function(d, i){return 2*that.navGap+that.navTextWidth[i];},
	            "height" : 2*that.navGap+that.navFontSize,
	            "fill" : "none",
	            "stroke" : that.colors[1],
	            "stroke-width" : "1px",
	            "cursor" : "pointer"
            })
            .on("click", function(d, i){
            	that.navClick(i);
            	that.commandNavClick({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.navClick(" + i + ")",
        			execMode: "evalfunc"
        		});
            });
        gNav.selectAll("text").data(that.nav).enter().append("text").attr({
	        	"x" : function(d, i){return that.padding.left+that.getSum(i)+that.navGap+0.5*that.navTextWidth[i];},
	            "y" : 2.5*that.padding.top+that.navGap+0.5*that.navFontSize,
	            "text-anchor" : "middle",
	            "font-size" : that.navFontSize,
	            "fill" : that.colors[0],
	            "dy" : ".35em",
	            "cursor" : "pointer"
            })
            .on("click", function(d, i){
            	that.navClick(i);
            	that.commandNavClick({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.navClick(" + i + ")",
        			execMode: "evalfunc"
        		});
            })
            .text(function(d){return d;});
    },
    navClick: function(i){
    	this.taketurns();
    	this.selectedIndex = i;
    	this.drawChart();
    	this.navOuterClick(i);
    },
    navOuterClick: function(){
    	
    },
    commandNavClick: function(){
    	
    },
    drawData : function(){
        var that = this;
        if(!that.chartArea.select(".gChart").empty()){
            that.chartArea.select(".gChart").remove();
        }
        var chart = that.chartArea.append("g").attr({"class": "gChart"});
        var kinds = that.dat.length;

        for(var k=0; k<kinds; ++k){
            var chartGroup = chart.append("g").attr("class", "group"+k);
            chartGroup.selectAll("path").data(that.dat[k]).enter().append("path").attr({
                "d" : function(d, i){
                    var x1 = that.xScale(that.xLabels[i])+(k-0.5*kinds)*that.columnWidth;
                    var y1 = that.height-that.padding.bottom;
                    var x2 = that.xScale(that.xLabels[i])+(k-0.5*kinds+0.5)*that.columnWidth;
                    var y2 = y1;
                    var x3 = that.xScale(that.xLabels[i])+(k-0.5*kinds+1)*that.columnWidth;
                    var y3 = y1;
                    var startPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y3+" L "+x1+" "+y1;
                    return startPath;
                },
                "fill" : that.colors[k+1],
                "opacity" : 1,
                "cursor" : "pointer"
            }).transition().delay(200).duration(800).ease("circle-out").attr(
                "d" , function (d, i) {
                    var x1 = that.xScale(that.xLabels[i])+(k-0.5*kinds)*that.columnWidth;
                    var y1 = that.height-that.padding.bottom;
                    var x2 = that.xScale(that.xLabels[i])+(k-0.5*kinds+0.5)*that.columnWidth;
                    var y2 = that.yScale(d);
                    var x3 = that.xScale(that.xLabels[i])+(k-0.5*kinds+1)*that.columnWidth;
                    var y3 = y1;
                    var endPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y3+" L "+x1+" "+y1;
                    return endPath;
                });
// chartGroup.selectAll("line").data(that.dat[k]).enter().append("line").attr({
// "x1" : function(d, i){return
// that.xScale(that.xLabels[i])+(k-0.5*kinds)*that.columnWidth;},
// "y1" : function(d){return that.yScale(d);},
// "x2" : function(d, i){return
// that.xScale(that.xLabels[i])+(k-0.5*kinds+1)*that.columnWidth;},
// "y2" : function(d){return that.yScale(d);},
// "stroke" : "#fff",
// "stroke-width" : "1px",
// "opacity" : 0
// }).transition().delay(1000).duration(300).attr("opacity", 1);
            var xPos = (0.5+k-0.5*kinds)*that.columnWidth;
            chartGroup.selectAll("text").data(that.dat[k]).enter().append("text").attr({
                "x" : function(d, i){return that.xScale(that.xLabels[i])+xPos;},
                "y" : function(d){return that.yScale(d)-3;},
                "text-anchor" : "middle",
                "font-size" : "12px",
                "fill" : "#fff",
                "opacity" : 0
            }).text(function(d){return d;}).transition().delay(1000).duration(300).attr("opacity", 1);
        }
        // that.changeFontPos(chart, 14);
    },
    drawSingleData : function(){
        var that = this;
        if(!that.chartArea.select(".gChart").empty()){
            that.chartArea.select(".gChart").remove();
        }
        var chart = that.chartArea.append("g").attr("class", "gChart");

        chart.selectAll("path").data(that.dat[0]).enter().append("path").attr({
                "d": function (d, i) {
                    var x1 = that.xScale(that.xLabels[i]);
                    var y1 = that.height-that.padding.bottom;
                    var x2 = x1 - 0.5 * that.columnWidth;
                    var y2 = y1;
                    var x3 = x1 + 0.5 * that.columnWidth;
                    var y3 = y2;
                    var startPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y3+" L "+x1+" "+y1;
                    return startPath;
                },
                "fill" : that.colors[1],
                "opacity" : 1
            }).transition().delay(200).duration(800).ease("circle-out").attr({
            "d" : function (d, i) {
                var x1 = that.xScale(that.xLabels[i]);
                var y1 = that.yScale(d);
                var x2 = x1 - 0.5 * that.columnWidth;
                var y2 = that.height-that.padding.bottom;
                var x3 = x1 + 0.5 * that.columnWidth;
                var y3 = y2;
                var endPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y3+" L "+x1+" "+y1;
                return endPath;
            }
        });
        chart.selectAll("line").data(that.dat[0]).enter().append("line").attr({
            "x1" : function(d, i){return that.xScale(that.xLabels[i])-0.5*that.columnWidth;},
            "y1" : function(d){return that.yScale(d);},
            "x2" : function(d, i){return that.xScale(that.xLabels[i])+0.5*that.columnWidth;},
            "y2" : function(d){return that.yScale(d);},
            "stroke" : "#fff",
            "stroke-width" : "1px",
            "opacity" : 0
        }).transition().delay(1000).duration(300).attr("opacity", 1);
        chart.selectAll("text").data(that.dat[0]).enter().append("text").attr({
            "x" : function(d, i){return that.xScale(that.xLabels[i]);},
            "y" : function(d){return that.yScale(d)-3;},
            "text-anchor" : "middle",
            "font-size" : "12px",
            "fill" : "#fff",
            "opacity" : 0
        }).text(function(d){return d;}).transition().delay(1000).duration(300).attr("opacity", 1);
    },
    addAxis : function(){
        var that = this;
        if(!that.chartArea.select(".gAxis").empty()){
            that.chartArea.select(".gAxis").remove();
        }
        var gAxis = that.chartArea.append("g").attr("class", "gAxis");
        gAxis.append("text").attr({
            "x" : 0.6*that.padding.left,
            "y" : that.chartHeight-0.5*that.padding.top,
            "text-anchor" : "left",
            "fill" : "#fff",
            "font-size" : "14px"
        }).text(function(){
        	if(Object.prototype.toString.call(that.unit) === '[object Array]'){
        		return that.unit[that.selectedIndex];
        	}else{
        		return that.unit;
        	}
        });
        gAxis.append("line").attr({
            "x1": that.padding.left,
            "y1": that.height-that.padding.bottom,
            "x2": that.padding.left,
            "y2": that.chartHeight,
            "stroke-width":"1px",
            "stroke":"#fff"
        });
        gAxis.append("line").attr({
            "x1": that.padding.left,
            "y1": that.height-that.padding.bottom,
            "x2": that.width-that.padding.right,
            "y2": that.height-that.padding.bottom,
            "stroke-width":"1px",
            "stroke":"#fff"
        });
        for(var i=1; i<=that.yTicks; ++i){
            var yPos = that.height-that.padding.bottom-i*(that.height-that.padding.bottom-that.chartHeight)/that.yTicks;
            gAxis.append("line").attr({
                "x1": that.padding.left,
                "y1": yPos,
                "x2": that.width-that.padding.right,
                "y2": yPos,
                "stroke-width":"0.5px",
                "stroke":"#fff",
                "opacity" : 0.3
            });
        }

        var yAxis = d3.svg.axis().scale(that.yScale).orient("left").tickValues(that.tickValues).tickSize(7).tickFormat(d3.format("1000"));
        var yBar = gAxis.append("g").attr("class", "g_yAxis").attr("transform", "translate("+that.padding.left+",0)").call(yAxis);
        var xAxis = d3.svg.axis().scale(that.xScale).orient("bottom").ticks(that.xLabels.length).tickSize(0).tickPadding(25);
        var xBar = gAxis.append("g").attr("class", "g_xAxis")
            .attr("transform", "translate(-25,"+(that.height-that.padding.bottom)+")").call(xAxis);

        gAxis.selectAll("text").attr({"font-size": "14px", "fill": "#fff"});
        gAxis.selectAll("path").attr({
            "fill": "none",
            "stroke": "#fff",
            "stroke-width": "0.5px",
            "shape-rendering": "crispEdges"
        });
        gAxis.selectAll("line").attr({"fill": "none", "stroke": "#fff", "stroke-width": "1px"});
        // gAxis.select(".g_xAxis").selectAll("text").attr("transform",
		// "rotate(-45)");
        if(this.xLabels.length>5){gAxis.select(".g_xAxis").selectAll("text").attr("transform", "rotate(-45)");}
        else{gAxis.select(".g_xAxis").selectAll("text").attr("transform", "translate(25, 0)");}
    },
    addLegend : function(){
        var that = this;
        if(!this.chartArea.select(".gLegend").empty()){
            this.chartArea.select(".gLegend").remove();
        }
        if(this.type.length > 1){
            var gLegend = this.chartArea.append("g").attr("class", "gLegend").attr("transform","translate("+(this.padding.left/3)+","+(this.padding.top/3)+")");
            gLegend.selectAll("rect").data(that.type).enter().append("rect").attr({
                "x" : that.width-that.padding.right-30,
                "y" : function(d, i){return that.chartHeight+i*(that.legendRectHeight+5);},
                "width" : that.legendRectWidth,
                "height" : that.legendRectHeight,
                "fill" : function(d, i){return that.colors[i+1];}
            });
                // .on("click", function(d, i){
                // if (d3.select(this).attr("fill") != "gray"){
                // this.chartArea.select(".group"+i).attr("opacity", 0);
                // d3.select(this).attr("fill", "gray");
                // }else{
                // this.chartArea.select(".group"+i).attr("opacity", 1);
                // d3.select(this).attr("fill", that.colors[i+1]);
                // }
                //
                // });
            gLegend.selectAll("text").data(that.type).enter().append("text").attr({
                "x": that.width-that.padding.right-25+that.legendRectWidth,
                "y": function(d, i){return that.chartHeight+i*(that.legendRectHeight+5);},
                "font-size": "12px",
                "fill":"#fff",
                "text-anchor":"left",
                "dy":"0.8em"
            }).text(function(d){return d;});
        }
    },
    addTitle : function(){
        var that = this;
        this.svg.append("g").attr("class", "titleArea").attr("transform","translate("+(-this.padding.left/4)+","+0+")").append("text").attr({
            "x" : that.padding.left,
            "y" : that.padding.top,
            "text-anchor" : "left",
            "fill" : that.colors[0],
            "dy" : ".35em",
            "font-size" : "20px",
            "font-weight" : "bold"
        }).text(that.title);
    },
    getSum : function(index){
        var sum = 0;
        for(var i=0; i<index; ++i){
            sum += this.navTextWidth[i]+3*this.navGap;
        }
        return sum;
    },
    // 初始化dat,type,selectedIndex
    initData : function(){
        this.type = [];
        this.dat = [];
        if(this.nav == "none"){
        	var temp = [];
            for (var i=0; i<this.dataset.length; ++i){
                this.type.push(this.dataset[i].type);
                this.dat.push(this.dataset[i].data);
                temp.push(d3.max(this.dataset[i].data));
            }
            this.chartHeight = 2.5*this.padding.top;
            this.yMax = this.getMaxVaule(this.yTicks, temp);
        }else{
        	var temp = [];
            for (var i=0; i<this.dataset[this.selectedIndex].length; ++i){
                this.type.push(this.dataset[this.selectedIndex][i].type);
                this.dat.push(this.dataset[this.selectedIndex][i].data);
                temp.push(d3.max(this.dataset[this.selectedIndex][i].data));
            }
            this.chartHeight = 5*this.padding.top;
            this.yMax = this.getMaxVaule(this.yTicks, temp);
        }
        
        this.tickValues = [];
        for(var i=1; i<=this.yTicks; ++i){
        	this.tickValues.push(i*this.yMax/this.yTicks);
        }
        this.yScale = d3.scale.linear().domain([0, this.yMax]).range([this.height-this.padding.bottom, this.chartHeight]);
    }
    
});


// 扶贫 三角柱图
zhnx.chart.fptriangleColumn = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
}
zhnx.chart.fptriangleColumn.prototype = $.extend({}, zhnx.chart.base, {
	constructor: zhnx.chart.fptriangleColumn,
    _defaults: {},
    
    padding : {top:30, right:40, bottom:60, left:90},
    colors : ["#D67821", "#00beff", "#1A457C"],
    yTicks : 5,
    columnWidth : 20,
 
    navGap : 10,
    selectIndex : -1,
    navFontSize : 14,
    navTextWidth : undefined,


    svg : undefined,
    title : "",
    unit : undefined,
    type : "",
    xLabels : undefined,
    dataset : undefined,
    xScale : undefined,
    yScale : undefined,
    chartArea : undefined,
    chartHeight : undefined,
    yMax : undefined,
    tickValues : undefined,
    year : undefined,


    init : function(args){
        var that = this;
        this.baseInit(args.selector);
       
    	this.svg.attr("font-family", "Microsoft YaHei");
        this.title = args.title;
        this.unit = args.series.unit;
        this.type = args.series.type;
        if (this.type != ""){
            this.selectIndex = 0;
            
        }
        if (this.title != ""){
            this.addTitle();
        }
        this.xLabels = args.series.country; 
        this.dataset = args.series.dataset;
        this.chartHeight = (this.type == "") ? (2.5*this.padding.top) : (7*this.padding.top);
        this.chartArea = this.svg.append("g").attr("class", "chartArea");
        if (args.mode == "mm") { 
        	this.padding.right = 100;
        	this.xScale = d3.scale.ordinal().domain(that.xLabels).rangePoints([that.padding.left+40, that.width-that.padding.right-40]);
        	this.initMMDate();
        	this.drawMMChart();
        }else{
        	if(args.series.dataset.length>0){
        		this.xScale = d3.scale.ordinal().domain(that.xLabels).rangePoints([that.padding.left+40, that.width-that.padding.right-40]);
            	this.countrycode = args.series.countrycode;
            	this.drawChart(this.selectIndex);
        	}
        	
        }
        this.taketurns();
    },
    
    yearClick : function(index){
    	this.taketurns();
    	this.yearSelectedIndex = index;
		this.setMMNavSelect();
		this.drawMMChart();
    },
    
    navClick: function(i){
    	this.taketurns();
    	this.selectIndex = i;
    	this.setNavSelectItem();
    	this.drawChart(this.selectIndex);
    },
    
    drawMMChart : function(){
    	// this.selectIndex = 0;
    	this.dataset = this.data[this.yearSelectedIndex].data;	
    	this.setNavSelectItem();
    	this.setMMNavSelect();
    	this.drawChart(this.selectIndex);
    },

    initMMDate : function(){
    	this.data = this.dataset;
    	this.year = [];
    	for (var i=0; i<this.dataset.length; ++i){
    		this.year.push(this.dataset[i].year);
    	}
    	this.yearSelectedIndex = 0;
    	this.dataset = this.data[this.yearSelectedIndex].data;
    	this.addMMNav();
    },
    
    setMMNavSelect : function(){
    	var that = this;
        this.chartArea.select(".mmNav").selectAll("circle").each(function(d, i){
            if (that.yearSelectedIndex == i){
                d3.select(this).attr("fill", that.colors[1]);
            }else{
                d3.select(this).attr("fill", "none");
            }
        });
    },
    
    addMMNav : function(){
    	var that = this;
    	var mmNav = this.chartArea.append("g").attr("class", "mmNav");
    	mmNav.selectAll("circle").data(that.year).enter().append("circle").attr({
    		"cx" : that.width-that.padding.right+10,
    		"cy" : function(d, i){return that.chartHeight+20*i;},
    		"r" : 5,
    		"fill" : "none",
    		"stroke" : that.colors[0],
    		"stroke-width" : "1px"
    	});
    	mmNav.selectAll("text").data(that.year).enter().append("text").attr({
    		"x" : that.width-that.padding.right+20,
    		"y" : function(d, i){return that.chartHeight+20*i;},
    		"fill" : "#fff",
    		"text-anchor" : "left",
    		"font-size" : "14px",
    		"dy" : ".35em",
    		"cursor" : "pointer"
    	})
    	.on("click", function(d, i){
    		that.yearClick(i);
    		that.commandMMNavClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.yearClick('" + i + "')",
    			execMode: "evalfunc"
    		});
    	})
    	.text(function(d){return d;});
    },
    
    // 初始化yMax, tickValues, yScale
    initData : function(){
    	var that = this;
    	if(this.type == ""){
        	this.yMax = this.getMaxVaule(this.yTicks, this.dataset);
        }else{
        	this.yMax = this.getMaxVaule(this.yTicks, this.dataset[this.selectIndex]);
        }
        this.tickValues = [];
        for(var i=1; i<=this.yTicks; ++i){
        	this.tickValues.push(i*this.yMax/this.yTicks);
        }
        this.yScale = d3.scale.linear().domain([0, that.yMax]).range([that.height-that.padding.bottom, that.chartHeight]);
    },
    
    
    repaint: function(){
    	if(this.selectIndex == -1){
    		this.drawDate(this.dataset);
    	}else{
    		this.navClick(0);
    	}
	},

    drawChart : function(index){
    	
        var dat = (this.selectIndex == -1) ? this.dataset : this.dataset[index];
        this.initData();
        if (this.type == ""){
// if(this.dataset.length>0){
        		this.addAxis();
                this.drawDate(dat);
// }
        }
        else{
        	if(this.selectIndex==-1){
        		if(this.dataset.length>0){
        			this.drawNav();
                    this.setNavSelectItem();
                    this.addAxis();
                    this.drawDate(dat);
        		}
        	}else{
        		if(this.dataset[index].length>0){
        			this.drawNav();
                    this.setNavSelectItem();
                    this.addAxis();
                    this.drawDate(dat);
        		}
        	}
// this.drawNav();
// this.setNavSelectItem();
// this.addAxis();
// this.drawDate(dat);
        }
    },


    getSum : function(index){
        var sum = this.padding.left;
        for(var i=0; i<index; ++i){
            sum += this.navTextWidth[i]+3*this.navGap;
        }
        return sum;
    },



    addAxis : function(){
        var that = this;
        if(!that.chartArea.select(".gAxis").empty()){
            that.chartArea.select(".gAxis").remove();
        }
        var gAxis = that.chartArea.append("g").attr("class", "gAxis");
        gAxis.append("text").attr({
            "x" : 0.6*that.padding.left,
            "y" : that.chartHeight-0.5*that.padding.top,
            "text-anchor" : "left",
            "fill" : "#fff",
            "font-size" : "14px"
        }).text(function(){
        	if(Object.prototype.toString.call(that.unit) === '[object Array]'){
        		return that.unit[that.selectIndex];
        	}else{
        		return that.unit;
        	}
        });
        gAxis.append("line").attr({
            "x1": that.padding.left,
            "y1": that.height-that.padding.bottom,
            "x2": that.padding.left,
            "y2": that.chartHeight,
            "stroke-width":"1px",
            "stroke":"#fff"
        });
        gAxis.append("line").attr({
            "x1": that.padding.left,
            "y1": that.height-that.padding.bottom,
            "x2": that.width-that.padding.right,
            "y2": that.height-that.padding.bottom,
            "stroke-width":"1px",
            "stroke":"#fff"
        });
        for(var i=1; i<that.yTicks+1; ++i){
            var yPos = that.height-that.padding.bottom-i*(that.height-that.padding.bottom-that.chartHeight)/that.yTicks;
            gAxis.append("line").attr({
                "x1": that.padding.left,
                "y1": yPos,
                "x2": that.width-that.padding.right,
                "y2": yPos,
                "stroke-width":"0.5px",
                "stroke":"#fff",
                "opacity" : 0.3
            });
        }

        var yAxis = d3.svg.axis().scale(that.yScale).orient("left").tickValues(that.tickValues).tickSize(7).tickFormat(d3.format("1000"));
        var yBar = gAxis.append("g").attr("class", "g_yAxis").attr("transform", "translate("+that.padding.left+",0)").call(yAxis);
        var xAxis = d3.svg.axis().scale(that.xScale).orient("bottom").ticks(that.xLabels.length).tickSize(0).tickPadding(30);
        var xBar = gAxis.append("g").attr("class", "g_xAxis")
            .attr("transform", "translate(-50,"+(that.height-that.padding.bottom)+")").call(xAxis);

        gAxis.selectAll("text").attr({"font-size": "14px", "fill": "#fff"});
        gAxis.selectAll("path").attr({
            "fill": "none",
            "stroke": "#fff",
            "stroke-width": "0.5px",
            "shape-rendering": "crispEdges"
        });
        gAxis.selectAll("line").attr({"fill": "none", "stroke": "#fff", "stroke-width": "1px"});
        if(this.xLabels.length>5){
        	gAxis.select(".g_xAxis").selectAll("text").attr("transform", "rotate(-45)");
        }else{
        	gAxis.select(".g_xAxis").selectAll("text").attr("transform", "translate(25, 0)");
        	this.columnWidth = 40;
        }
    },
    drawDate : function(dat){
        var that = this;
        if(!that.chartArea.select(".gChart").empty()){
            that.chartArea.select(".gChart").remove();
        }
        var chart = that.chartArea.append("g").attr("class", "gChart");

        chart.selectAll("path").data(dat).enter().append("path").attr({
            "class" : function(d, i){return "path"+i;},
            "d": function (d, i) {
                var x1 = that.xScale(that.xLabels[i]);
                var y1 = that.height-that.padding.bottom;
                var x2 = x1 - 0.5 * that.columnWidth;
                var y2 = y1;
                var x3 = x1 + 0.5 * that.columnWidth;
                var y3 = y2;
                var startPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y3+" L "+x1+" "+y1;
                return startPath;
            },
            "fill" : that.colors[1],
            "opacity" : 0.5
        })
        .on("click", function(d, i){
        	if(that.year == undefined){
        		if(that.countrycode != undefined && that.countrycode != null){
	        			that.dataClick(that.countrycode[i]);
	        		that.commandDataClick({
	        			type: 'click',
	        			context: that.id,
	        			contextType: 'chaObj',
	        			execString: "that.dataClick('" + that.countrycode[i] + "')",
	        			execMode: "evalfunc"
	        		});
        		}
        	}
        })
        .on("mouseover", function(d, i){
            d3.select(this).transition().delay(200).duration(300).attr("opacity", 1);

        })
        .on("mouseout", function (d, i) {
            d3.select(this).transition().delay(200).duration(300).attr("opacity", 0.5);

        }).transition().delay(200).duration(800).ease("circle-out").attr({
            "d" : function (d, i) {
                var x1 = that.xScale(that.xLabels[i]);
                var y1 = that.yScale(d);
                var x2 = x1 - 0.5 * that.columnWidth;
                var y2 = that.height-that.padding.bottom;
                var x3 = x1 + 0.5 * that.columnWidth;
                var y3 = y2;
                var endPath = "M "+x1+" "+y1+" L "+x2+" "+y2+" L "+x3+" "+y3+" L "+x1+" "+y1;
                return endPath;
            },
            "cursor" : "pointer"
        });
        chart.selectAll("line").data(dat).enter().append("line").attr({
            "x1" : function(d, i){return that.xScale(that.xLabels[i])-0.5*that.columnWidth;},
            "y1" : function(d){return that.yScale(d);},
            "x2" : function(d, i){return that.xScale(that.xLabels[i])+0.5*that.columnWidth;},
            "y2" : function(d){return that.yScale(d);},
            "stroke" : "#fff",
            "stroke-width" : "1px",
            "opacity" : 0
        }).transition().delay(1000).duration(300).attr("opacity", 1);
        chart.selectAll("text").data(dat).enter().append("text").attr({
            "x" : function(d, i){return that.xScale(that.xLabels[i]);},
            "y" : function(d){return that.yScale(d)-3;},
            "text-anchor" : "middle",
            "font-size" : "12px",
            "fill" : "#fff",
            "opacity" : 0
        }).text(function(d){return d;}).transition().delay(1000).duration(300).attr("opacity", 1);
    },
    dataClick: function(countrycode){
    	
    },
    commandDataClick: function(commandArgs){
    	
    },
    commandMMNavClick: function(commandArgs){
    	
    },
    setNavSelectItem : function(){
        var that = this;
        this.chartArea.select(".gNav").selectAll("rect").each(function(d, i){
            if (that.selectIndex == i){
                d3.select(this).attr("fill", that.colors[2]);
            }else{
                d3.select(this).attr("fill", "none");
            }
        });
    },
    addTitle : function(){
        var that = this;
        var titleArea = this.svg.append("g").attr("class", "titleArea");
        titleArea.append("text").attr({
            "x" : that.padding.left,
            "y" : that.padding.top,
            "text-anchor" : "start",
            "fill" : that.colors[0],
            "dy" : ".35em",
            "font-size" : "20px",
            "font-weight" : "bold"
        }).text(that.title);
    },
    drawNav : function(){
        var that = this;
        this.navTextWidth = [];
        for(var k = 0; k<this.type.length; ++k){
            var temp = this.navFontSize*this.type[k].length;
            this.navTextWidth.push(temp);
        }
        
        this.chartArea.selectAll(".gNav").remove();
        
        var ww = that.width-that.padding.left-that.padding.right;
        var gNav = this.chartArea.append("g").attr("class", "gNav").attr("transform","translate("+(-this.padding.left+5)+","+0+")");
        gNav.selectAll("rect").data(that.type).enter().append("rect").attr({
        	"x" : function(d, i){
        		if(that.getSum(i) > ww){
        			return that.padding.left+that.getSum(i)-ww+that.padding.left;
        		}else{
        			return that.padding.left+that.getSum(i);
        		}        		
        	},
            "y" : function(d, i){
            	if(that.getSum(i) > ww){
        			return 4*that.padding.top;
        		}else{
        			return 2.5*that.padding.top;
        		}             	
            },
            "width" : function(d, i){return that.navGap+that.navTextWidth[i];},
            "height" : 2*that.navGap+that.navFontSize,
            "fill" : "none",
            "stroke" : that.colors[1],
            "stroke-width" : "1px",
            "cursor" : "pointer"
        })
        .on("click", function(d, i){
        	that.navClick(i);
        	that.commandNavClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.navClick(" + i + ")",
    			execMode: "evalfunc"
    		});
        });
        gNav.selectAll("text").data(that.type).enter().append("text").attr({
        	"x" : function(d, i){
        		if(that.getSum(i) > ww){
        			return 2*that.padding.left+that.getSum(i)-ww+0.5*that.navGap+0.5*that.navTextWidth[i];
        		}else{
        			return that.padding.left+that.getSum(i)+0.5*that.navGap+0.5*that.navTextWidth[i];
        		} 
        	},
            "y" : function(d, i){
            	if(that.getSum(i) > ww){
        			return 4*that.padding.top+that.navGap+0.5*that.navFontSize;
        		}else{
        			return 2.5*that.padding.top+that.navGap+0.5*that.navFontSize;
        		} 
            },
            "text-anchor" : "middle",
            "font-size" : that.navFontSize,
            "fill" : that.colors[0],
            "dy" : ".35em",
            "cursor" : "pointer"
        })
        .on("click", function(d, i){
        	that.navClick(i);
        	that.commandNavClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.navClick(" + i + ")",
    			execMode: "evalfunc"
    		});
        })
        .text(function(d){return d;});
    },
    
    commandNavClick: function(commandArgs){
    	
    }
});


// Q--fuPin-start
// 扶贫 文字图片开始
zhnx.chart.povertySatus = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
};
zhnx.chart.povertySatus.prototype = $.extend({}, zhnx.chart.base, {
    constructor: zhnx.chart.povertySatus,
    _defaults: {},
    args : undefined,

    totalTitle : undefined,
    series : undefined,
    status_data_text : undefined,
    status_data : undefined,
    num_country : undefined,
    num_village : undefined,
    num_household : undefined,
    num_people : undefined,
    num_people_hui : undefined,
    textFontSize : 14,
    svgScale : 0.15,
    titleSize : "20px",
    svgAnimateTime : 800,
    svgDelayTime : 300,

    padding : {top: 20, right: 20, bottom: 20, left: 20},
    color : ["#D67821","rgba(34,115,168,.8)","rgba(26,88,126,.5)","rgb(250,250,250)"],

    init: function(args){

        this.baseInit(args.selector);

        this.totalTitle = args.totalTitle;
        this.series = args.series;
        this.status_data_text = this.series.status_data_text !=undefined ? this.series.status_data_text : this.status_data_text;
        this.status_data = this.series.status_data !=undefined ? this.series.status_data : this.status_data;
        this.num_country = this.status_data.num_country;
        this.num_village = this.status_data.num_village;
        this.num_household = this.status_data.num_household;
        this.num_people = this.status_data.num_people;
        this.num_people_hui = this.status_data.num_people_hui;


        this.svg.attr("font-family","Microsoft YaHei");

        this.drawImg = this.svg.append("g")
            .attr({
                "class":"title",
                "width":this.width-this.padding.left-this.padding.right,
                "height":this.height-this.padding.top-this.padding.bottom,
                "transform":"translate("+this.padding.left+","+this.padding.top*2+")"
            })

        this.drawTitle();				// 绘制标题
        this.drawDefs();					// 绘制defs
        this.taketurns();			// 重复调用
    },
    drawTitle: function(){
        var that = this;

        var totalTitleGroup=this.drawImg.append("g")
            .attr("class","totalTitleText")
            .append("text")
            .datum(this.totalTitle)
            .text(function(d){ return d;})
            .attr({
            	"fill":function(){ return that.color[0];},
            	"font-size":this.titleSize,
            	"font-weight":"bold"
            });
    },
    drawDefs: function(){
        var that = this;

        this.svg.selectAll("defs").remove();
        this.svg.selectAll(".drawdefs_img").remove();
        this.svg.selectAll(".drawEasyImg").remove();

        var myDefs_country=this.svg.append("defs")
            .append("path")
            .attr({
                "id":"img_country",
                "stroke":"none"
            })
            .attr("d","M370.7,314.2L19.4,314c0,0-37.8,1.7-7.8-26.8c7.9-4.3,17.1-8.3,27.4-12c-2.6-5.8-4.1-12.3-4.1-19.1"+
                "c0-24.5,18.4-44.4,41.1-44.4c22.7,0,41.1,19.9,41.1,44.4c0,0.5-0.1,1-0.1,1.5c2.6-0.3,5.3-0.7,8-1V27c0-15.1,11.2-27,26.3-27H309"+
                "c15.1,0,25.7,12,25.7,27v242.6c18.4,5.2,34.2,11.3,46.6,18.2C426.4,317.9,370.7,314.2,370.7,314.2L370.7,314.2z M213,60.9"+
                "c0-7.5-6-13.5-13.5-13.5h-27c-7.6,0-13.5,6-13.5,13.5v37.2c0,7.5,9.3,13.5,16.9,13.5h23.7c7.6,0,13.5-6,13.5-13.5V60.9L213,60.9z"+
                "M213,158.9c0-7.5-6-13.5-13.5-13.5h-27c-7.6,0-13.5,6-13.5,13.5v37.2c0,7.5,9.3,13.5,16.9,13.5h23.7c7.6,0,13.5-6,13.5-13.5"+
                "V158.9L213,158.9z M300.9,60.9c0-7.5-6-13.5-13.5-13.5h-27c-7.6,0-13.5,6-13.5,13.5v37.2c0,7.5,9.3,13.5,16.9,13.5h23.7"+
                "c7.6,0,13.5-6,13.5-13.5V60.9L300.9,60.9z M300.9,158.9c0-7.5-6-13.5-13.5-13.5h-27c-7.6,0-13.5,6-13.5,13.5v37.2"+
                "c0,7.5,9.3,13.5,16.9,13.5h23.7c7.6,0,13.5-6,13.5-13.5V158.9L300.9,158.9z")
            .attr("transform",'scale('+this.svgScale+','+this.svgScale+')') ;
// 人口村数defs
        var myDefs_village=this.svg.append("defs")
            .append("path")
            .attr({
                "id":"img_village",
                "stroke":"none"
            })
            .attr("d","M193.3,249.1h52.8v-61.4h-52.8V249.1L193.3,249.1z M348.5,249.1h52.8v-61.4h-52.8V249.1L348.5,249.1z"+
                "M444.9,70.7l11.6,83.6v15.3h-13.9v59.6c-6.4,0.4-12.4,2.1-17.8,5v-64.6H344l-47.2-59.3l-47.2,59.3h-80.8v116.9h102.6v-98.9h50.7"+
                "v98.9h65.3c0-0.3,0-0.7,0-1c0-16.4,13-29.7,29.2-30.3c7.8-11.3,20.8-18.8,35.6-18.8c16.4,0,30.7,9.2,38,22.7"+
                "c0.7,0,1.4-0.1,2.1-0.1c16.6,0,30.5,11.8,33.8,27.4h9.2v17.9H42v-17.9h29.8l10.6-6.7l7.9-18l2.9-15.5l-2.3-5.5"+
                "c-19.1,0.1-41.9,0.3-49.1-19.4c-2-5.6-5.9-8.4-14.3-15c-16-12.5-17-21.4-21.8-39.6c-1.7-6.2-2.3-11.9-1.7-15.8"+
                "c2.9-15.6-0.6-13.6-2.8-26.2C-4.1,99.4,9,65.9,24.9,49.2C32.3,41.5,36,40.2,41,35.5c1.5-1.4,2.8-3.9,7.9-11.8"+
                "C63.6,12.3,85.7,0.5,110.4,0c16.2-0.3,31.1,6.8,44.4,12.8c12.1,6.6,6.6,5,22.8,7.5c23.1,3.7,42.5,21.3,53.3,39.8h-82.3h-9.2"+
                "l-12.9,93.3v26.6h13.9v60.7c-4.5-0.8-9.4-2-13.7-2.9l-4.8,0.4l-0.4,3.5l0.2,10.9l4.4,21.7l9.7,12.1H151V169.6h-13.9v-15.3"+
                "l11.6-83.6C245.3,70.7,240.6,70.7,444.9,70.7z")
            .attr("transform",'scale('+this.svgScale+','+this.svgScale+')');
// 贫困户数defs
        var myDefs_household=this.svg.append("defs")
            .append("path")
            .attr({
                "id":"img_household",
                "stroke":"none"
            })
            .attr("d","M394.1,182.3L223.4,7.6c-10.1-10.1-26.5-10.3-36.8-0.3l-73.1,71.2v-8.7c0-9.6-7.8-17.5-17.5-17.5H61.2"+
                "c-9.6,0-17.5,7.8-17.5,17.5v76.8L7.9,181.5c-10.4,10.1-10.6,26.6-0.5,37c7.4,7.6,18.3,9.7,27.7,6.3v141.6"+
                "c0,19.3,15.6,34.9,34.9,34.9H131h8.7h17.5c9.6,0,17.5-7.8,17.5-17.5v-8.7v-8.7v-61.1c0-4.8,3.9-8.7,8.7-8.7h34.9"+
                "c4.8,0,8.7,3.9,8.7,8.7v61.1v8.7v8.7c0,9.6,7.8,17.5,17.5,17.5h17.5h8.7h61.1c19.3,0,34.9-15.6,34.9-34.9V225.4"+
                "c2.9,1,5.9,1.6,8.9,1.6c6.7,0,13.4-2.5,18.5-7.6C404.3,209.2,404.3,192.6,394.1,182.3z M61.2,78.6c0-4.8,3.9-8.7,8.7-8.7h17.5"+
                "c4.8,0,8.7,3.9,8.7,8.7v17l-34.9,34V78.6z M200.9,192c-19.3,0-34.9-15.6-34.9-34.9c0-19.3,15.6-34.9,34.9-34.9"+
                "c19.3,0,34.9,15.6,34.9,34.9S220.1,192,200.9,192z M381.7,207c-2.2,2.2-4.8,2.5-6.2,2.5c-1.4,0-4-0.3-6.2-2.6l-2.7-2.8v-3.5h-3.4"+
                "L204.8,38.4L38.2,200.7h-3.2v3.1l-2.8,2.7c-1.6,1.6-3.8,2.5-6.1,2.5c-1.4,0-4-0.3-6.3-2.6c-3.4-3.4-3.3-9,0.2-12.3L198.8,19.9"+
                "c1.6-1.6,3.8-2.5,6.1-2.5c1.4,0,4,0.3,6.2,2.6l170.6,174.7c2.2,2.2,2.5,4.8,2.5,6.2C384.3,202.2,383.9,204.8,381.7,207z"+
                "M183.4,157.1c0,9.6,7.8,17.5,17.5,17.5c9.6,0,17.5-7.8,17.5-17.5l0,0c0-9.6-7.8-17.5-17.5-17.5"+
                "C191.2,139.7,183.4,147.5,183.4,157.1z")
            .attr("transform",'scale('+this.svgScale+','+this.svgScale+')');
// 人口数量defs
        var myDefs_people=this.svg.append("defs")
            .append("path")
            .attr({
                "id":"img_people",
                "stroke":"none"
            })
            .attr("d","M310.3,263.6l-74.8-29.1c0,0-14.3-5.5-19.8-11c-3.6-3.5-3.3-11.8-0.2-22.3c3.1-10.5,41.5-53.4,41.5-92.3"+
                "C257.1,48.7,217.5,0,168.8,0C120,0,80.5,48.7,80.5,108.9c0,37.3,34.2,81.7,38.4,89.8c4.2,8.1,3.2,20.4-0.1,24.1"+
                "c-5,5.6-23.3,11.2-23.3,11.2l-67.4,30C12.3,269.7,0,284.6,0,301.3v7.9c0,18.3,14.9,29.5,33.1,29.5h113h38.7h120.4"+
                "c18.3,0,33.1-11.2,33.1-29.5v-7.9C338.4,284.6,326.1,269.3,310.3,263.6L310.3,263.6z")
            .attr("transform",'scale('+this.svgScale+','+this.svgScale+')');
        // 人口数量defs
        var myDefs_people_hui=this.svg.append("defs")
            .append("path")
            .attr({
                "id":"img_people_hui",
                "stroke":"none"
            })
            .attr("d","M113.1,145.9c-7.9-16.4-12-34.6-12-53.3c0-28.8,9.9-55.1,26.4-76.2c-3.1-0.4-6.2-0.7-9.3-0.8"+
                "c-0.2,0-0.4,0-0.6,0c-40.2,0-72.7,32.6-72.7,72.7c0,20,8.1,38.2,21.2,51.3C26.9,154,0,184.2,0,219c0,13.7,17.4,29.2,44.1,40.1"+
                "c0-0.1,0-0.1,0-0.2C44.1,214.3,70.2,172.7,113.1,145.9z M290.4,157.9c16.7-16.7,27-39.8,27-65.3c0-50.8-41-92.1-91.8-92.5"+
                "c-0.3,0-0.5,0-0.8,0l0,0h0c-51.1,0-92.6,41.4-92.6,92.6c0,25.5,10.3,48.6,27,65.3c-49.7,18.2-84,56.6-84,101"+
                "c0,30.6,68.6,68.6,149.5,68.6c82.8,0,149.5-37.2,149.5-68.7C374.4,214.5,340.1,176.2,290.4,157.9L290.4,157.9z")
            .attr("transform",'scale('+this.svgScale+','+this.svgScale+')');
        // 绘制简单图形(四边形1)
        var drawQuadrilateral_1 = this.svg.append("defs")
            .append("polygon")
            .attr("points","-10,0 230,0 240,30 0,30")
            .attr({
                "id":"drawQuadrilateral_1",
                "fill":this.color[2],
                "stroke":"none"
            });

        // 绘制简单图形(四边形2)
        var drawQuadrilateral_2 = this.svg.append("defs")
            .append("polygon")
            .attr("points","0,0 240,0 230,30 -10,30")
            .attr({
                "id":"drawQuadrilateral_2",
                "fill":this.color[2],
                "stroke":"none"
            });
        // 绘制多边形
        var drawPoly_1 = this.svg.append("defs")
            .append("polygon")
            .attr("points","0,0 80,0 90,20 80,40 0,40")
            .attr({
                "id":"drawPoly_1",
                "fill":this.color[1],
                "stroke":"none"
            });


        /*-------------------------绘制defs图形-------------------------------*/

        var drawdefs_img = this.svg.append("g")
            .attr({
                "class":"drawdefs_img",
                "fill":this.color[3]
            });

        var drawEasyImg = this.svg.append("g")
            .attr({
                "class":"drawEasyImg",
                "fill":this.color[3]
            });

        // 绘制人口县数（左侧第1个）
        if(this.num_country==""||this.num_country==undefined){

        }else{
            drawdefs_img.append("g")
                .attr({
                    "class":"img_left_1",
                    "text-anchor":"end",
                    "transform":"translate("+(this.width-this.padding.left-this.padding.right)/4+","+(this.height-this.padding.top-this.padding.bottom)/6+")",
                    "opacity":0
                })
                .transition()
                .duration(that.svgAnimateTime)
                .attr("opacity",1);

            d3.select(".img_left_1").append("use").attr("xlink:href","#img_country");// 引用图形

            d3.select(".img_left_1").append("text")
                .text(this.status_data_text[0])
                .attr({
                    "dy":this.padding.top*3.5,
                    "dx":this.padding.left*3
                });// 绘制文字
            // 添加四边形
            if(this.num_village==""||this.num_village==undefined){

            }else{
                drawEasyImg.append("g")
                    .attr("transform",function(){
                        var myTranslate='translate('+(that.width-that.padding.left-that.padding.right)/4*1.65+','+(that.height-that.padding.top-that.padding.bottom)/6*1.65+')';
                        var myRotate= 'rotate(' + (20)+ ')';
                        return myTranslate +''+ myRotate ;
                    })
                    .append("use").attr("xlink:href","#drawQuadrilateral_1");
            }

            // 添加多边形
            var img_left_1 = drawEasyImg.append("g")
                .attr("transform",'translate('+((this.width-this.padding.left-this.padding.right)/4*1.65-10)+','+((this.height-this.padding.top-this.padding.bottom)/6*1.6)+')')

            img_left_1.append("use").attr("xlink:href","#drawPoly_1");
            img_left_1.append("text")
                .text(this.num_country)
                .attr({
                    "dx":0,
                    "dy":25,
                    "font-weight":"bold",
                    "font-size":this.textFontSize,
                    "text-anchor":"start"
                });
        }
        // 绘制人口村数（右侧第1个）
        if(this.num_village==""||this.num_village==undefined){

        }else{
            drawdefs_img.append("g")
                .attr({
                    "class":"img_right_1",
                    "transform":"translate("+(this.width-this.padding.left-this.padding.right)/4*3+","+(this.height-this.padding.top-this.padding.bottom)/6*2+")",
                    "opacity":0
                })
                .transition()
                .delay(that.svgDelayTime)
                .duration(that.svgAnimateTime)
                .attr("opacity",1);

            d3.select(".img_right_1").append("use").attr("xlink:href","#img_village");


            d3.select(".img_right_1").append("text")
                .text(this.status_data_text[1])
                .attr("dy",this.padding.top*3.5);

// 添加四边形
            if(this.num_household==""||this.num_household==undefined){

            }else{
                drawEasyImg.append("g")
                    .attr("transform",function(){
                        var myTranslate='translate('+(that.width-that.padding.left-that.padding.right)/4*1.6+','+(that.height-that.padding.top-that.padding.bottom)/6*3.4+')';
                        var myRotate= 'rotate(' + (-20)+ ')';
                        return myTranslate +''+ myRotate ;
                    })
                    .append("use").attr("xlink:href","#drawQuadrilateral_2");
            }

            // 添加多边形
            var img_right_1 = drawEasyImg.append("g")
                .attr("transform",'translate('+((this.width-this.padding.left-this.padding.right)/1.35-3)+','+((this.height-this.padding.top-this.padding.bottom)/6*2.9)+')');

            img_right_1.append("use").attr("xlink:href","#drawPoly_1").attr("transform",'rotate(' + (-180)+ ')');
            img_right_1.append("text").text(this.num_village)
                .attr({
                    "dx":0,
                    "dy":-10,
                    "font-weight":"bold",
                    "font-size":this.textFontSize,
                    "text-anchor":"end"
                });
        }
        // 绘制贫困户数（左侧第2个）
        if(this.num_household==""||this.num_household==undefined){

        }else{
            drawdefs_img.append("g")
                .attr({
                    "class":"img_left_2",
                    "text-anchor":"end",
                    "transform":"translate("+(this.width-this.padding.left-this.padding.right)/4+","+(this.height-this.padding.top-this.padding.bottom)/6*3+")",
                    "opacity":0
                })
                .transition()
                 .delay(that.svgDelayTime*2)
                .duration(that.svgAnimateTime)
                .attr("opacity",1);

            d3.select(".img_left_2").append("use").attr("xlink:href","#img_household");
            d3.select(".img_left_2").append("text").text(this.status_data_text[2])
                .attr({
                    "dy":this.padding.top*3.5,
                    "dx":this.padding.left*3,
                    "font-size":this.textFontSize
                });// 绘制文字

            if(this.num_people==""||this.num_people==undefined){
            }else{
                drawEasyImg.append("g")
                    .attr("transform",function(){
                        var myTranslate='translate('+(that.width-that.padding.left-that.padding.right)/4*1.65+','+(that.height-that.padding.top-that.padding.bottom)/6*3.4+')';
                        var myRotate= 'rotate(' + (20)+ ')';
                        return myTranslate +''+ myRotate ;
                    })
                    .append("use").attr("xlink:href","#drawQuadrilateral_1");
            }

            // 添加多边形
            var img_left_2 = drawEasyImg.append("g")
                .attr("transform",'translate('+((this.width-this.padding.left-this.padding.right)/4*1.65-12)+','+((this.height-this.padding.top-this.padding.bottom)/6*2.1*1.6)+')')

            img_left_2.append("use").attr("xlink:href","#drawPoly_1");
            img_left_2.append("text").text(this.num_household)
                .attr({
                    "dx":0,
                    "dy":25,
                    "font-weight":"bold",
                    "font-size":this.textFontSize,
                    "text-anchor":"start"
                });
        }

// 绘制人口数量（右侧第2个）
        if(this.num_people==""||this.num_people==undefined){

        }else{
            drawdefs_img.append("g")
                .attr({
                    "class":"img_right_2",
                    "transform":"translate("+(this.width-this.padding.left-this.padding.right)/4*3+","+(this.height-this.padding.top-this.padding.bottom)/6*4+")",
                    "opacity":0
                })
                .transition()
                .delay(that.svgDelayTime*3)
                .duration(that.svgAnimateTime)
                .attr("opacity",1);

            d3.select(".img_right_2").append("use").attr("xlink:href","#img_people");
            d3.select(".img_right_2").append("text")
                .text(this.status_data_text[3]).attr("dy",this.padding.top*3.5);

            if(this.num_people_hui==""||this.num_people_hui==undefined){
            }else{
                drawEasyImg.append("g")
                    .attr("transform",function(){
                        var myTranslate='translate('+(that.width-that.padding.left-that.padding.right)/4*1.6+','+(that.height-that.padding.top-that.padding.bottom)/6*5.1+')';
                        var myRotate= 'rotate(' + (-20)+ ')';
                        return myTranslate +''+ myRotate ;
                    })
                    .append("use").attr("xlink:href","#drawQuadrilateral_2");
            }


            // 添加多边形
            var img_right_2 = drawEasyImg.append("g")
                .attr("transform",'translate('+((this.width-this.padding.left-this.padding.right)/1.35-3)+','+((this.height-this.padding.top-this.padding.bottom)/6*2.9*1.6)+')');

            img_right_2.append("use").attr("xlink:href","#drawPoly_1").attr("transform",'rotate(' + (-180)+ ')');
            img_right_2.append("text").text(this.series.status_data.num_people)
                .attr({
                    "dx":0,
                    "dy":-15,
                    "font-weight":"bold",
                    "font-size":this.textFontSize,
                    "text-anchor":"end"
                });
        }

        // 绘制回族人口数量（左侧第3个）
        if(this.num_people_hui==""||this.num_people_hui==undefined){
        }else{
            drawEasyImg.append("g")
                .attr({
                    "class":"img_left_3",
                    "text-anchor":"end",
                    "transform":"translate("+(this.width-this.padding.left-this.padding.right)/4+","+(this.height-this.padding.top-this.padding.bottom)/6*5+")",
                    "opacity":0
                })
                .transition()
                 .delay(that.svgDelayTime*4)
                .duration(that.svgAnimateTime)
                .attr("opacity",1);

            d3.select(".img_left_3").append("use").attr("xlink:href","#img_people_hui");
            d3.select(".img_left_3").append("text")
                .text(this.status_data_text[4])
                .attr({
                    "dy":this.padding.top*3.5,
                    "dx":this.padding.left*3,
                    "font-size":this.textFontSize
                });// 绘制文字

            // 添加多边形
            var img_left_3 =  drawEasyImg.append("g")
                .attr("transform",'translate('+((this.width-this.padding.left-this.padding.right)/4*1.65-12)+','+((this.height-this.padding.top-this.padding.bottom)/6*3.2*1.6)+')')

            img_left_3.append("use").attr("xlink:href","#drawPoly_1");
            img_left_3.append("text")
                .text(this.num_people_hui)
                .attr({
                    "dx":0,
                    "dy":25,
                    "font-weight":"bold",
                    "font-size":this.textFontSize,
                    "text-anchor":"start"
                });
        }
        drawEasyImg.attr("opacity",0)
            .transition()
            .delay(that.svgDelayTime*4)
                .duration(that.svgAnimateTime)
            .attr("opacity",1);
    },
    repaint: function(){
        var that = this;

        that.drawDefs();
    }
});// 扶贫 文字图片结束

// 扶贫 半圆环+横柱图开始
zhnx.chart.povertyTeam = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
};
zhnx.chart.povertyTeam.prototype = $.extend({}, zhnx.chart.base, {
    constructor: zhnx.chart.povertyTeam,
    _defaults: {},

    totalTitle : undefined,
    unit : undefined,
    bottomText : undefined,
    series : undefined,

    padding : {top: 20, right: 20, bottom: 20, left: 20},
    color : ["#D67821","rgb(66,69,78)","rgb(112,98,53)","rgb(155,121,49)","rgb(207,146,19)","rgb(254,172,2)","rgb(236,153,0)","rgb(250,250,250)"],
    data_sum : 0,
    circleEndDeg : [],
    maxNum : 0,
    testNum : [],
    circle_nei : undefined,
    outerRadius : [],
    innerRadius : [],
    rectPeopleNum : [],
    titleSize : "20px",
    imgTime : 800,

    init: function(args){
        var that = this;

        this.baseInit(args.selector);

        this.totalTitle=args.totalTitle;
        this.unit=args.unit;
        this.bottomText=args.bottomText;
        this.series=args.series;

        for(var i = 0;i<this.series.povertyTeam_data.length;i++){
            this.data_sum +=this.series.povertyTeam_data[i].value;// 总数
            this.testNum.push(this.series.povertyTeam_data[i].value);
        }
        this.maxNum = d3.max(this.testNum);

        for(var a = 0;a<this.series.povertyTeam_data.length;a++){
            if(this.rectPeopleNum.length<this.series.povertyTeam_data.length){
                this.rectPeopleNum.push(this.series.povertyTeam_data[a].value)
            }
        }

        this.svg.attr("font-family","Microsoft YaHei");

        this.drawImg = this.svg.append("g")
            .attr({
                "class":"drawImg",
                "width":this.width-this.padding.left-this.padding.right,
                "height":this.height-this.padding.top-this.padding.bottom,
                "transform":"translate("+this.padding.left+","+this.padding.top*2+")"
            });
        this.arcAll = this.drawImg.append("g")    // 圆的组
            .attr({
                "class":"arcAll",
                "transform":"translate("+(this.width/1.6-this.padding.left)+","+(this.height/2.5-this.padding.top)+")"
            });
        this.textAll = this.drawImg.append("g")    // 文字和线的组
            .attr({
                "class":"textAll",
                "transform":"translate("+(this.width/2-this.padding.left)+","+(this.padding.top)+")"
            });
        this.circle_nei = (Math.min(this.width-this.padding.left-this.padding.right,this.height-this.padding.top-this.padding.bottom)/10);

        this.drawTitle();			// 绘制标题
        this.drawDataImg();			// 绘制图
        this.drawRectImg();			// 绘制矩形
        this.drawText();			// 绘制文字
        this.taketurns();			// 重复调用
    },
    drawTitle: function(){
        var that = this;

        var totalTitleGroup=this.drawImg.append("g")
            .attr("class","totalTitleText")
            .append("text")
            .datum(this.totalTitle)
            .text(function(d){
                return d;
            })
            .attr({
                "fill":function(){return that.color[0];},
                "font-size":this.titleSize,
                "font-weight":"bold"
            });
    },
    drawDataImg: function(){
        var that = this;

        this.arcAll.selectAll("path").remove();
        this.arcAll.selectAll("rect").remove();
        this.arcAll.selectAll("text").remove();

        this.innerRadius.push(this.circle_nei);
        for(var a=0;a<this.series.povertyTeam_data.length;a++){     // 获取到外圈的大小
            this.innerRadius.push(this.circle_nei*(1+(a*2+2)*0.2));
            this.outerRadius.push(this.circle_nei*(1+(a*2+1)*0.2)+4);
        }
        this.outerRadius.push(this.innerRadius[this.innerRadius.length-1]);

        /*----圆（没有数据变化）--*/
        var gaugeCircleX = d3.scale.linear().range([0,Math.PI]).domain([0,0.5]);

        var drawCircle = this.arcAll.selectAll("path")
            .data(this.series.povertyTeam_data)
            .enter()
            .append("path")
            .attr("fill",function(d,i){
                var ColorS = [that.color[1],that.color[2],that.color[3],that.color[4],that.color[5]];
                return ColorS[i]
            })
            .transition()
            .duration(that.imgTime)
            .ease("linear")
            .attrTween("d",function(d,i){
                var arc = d3.svg.arc()  // 弧生成器
                    .innerRadius(that.innerRadius[i])   // 设置内半径
                    .outerRadius(that.outerRadius[i]);  // 设置外半径

                var start = {
                    startAngle:0,
                    endAngle: 0
                };
                var finish = {
                    startAngle:0,
                    endAngle: gaugeCircleX(0.5)
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return arc(i(d));
                }
            });
    },
    drawRectImg: function(){
        var that = this;

        /*------------------------绘制横向矩形部分-------------*/

        // 设置横向比例尺
        var xScale=d3.scale.linear()            // x轴比例尺
            .domain([this.maxNum,0])
            .range([(this.width-this.padding.left-this.padding.right)/2,0]);

        var rects = this.arcAll
            .selectAll("rect")
            .data(this.rectPeopleNum)
            .enter()
            .append("rect")
            .attr({
                "height":function(d,i){
                    return (that.outerRadius[i]-that.innerRadius[i])},
                "x":function(d){return xScale(d);},
                "transform":function(d,i){
                var myTranslate = "translate("+(-xScale(d)+0.5)+","+(that.innerRadius[i])+")"
                return myTranslate;
    },
                "fill":function(d,i){
                    var ColorS = [that.color[1],that.color[2],that.color[3],that.color[4],that.color[5]];
                    return ColorS[i]
                },
                "width":0
            })
            .transition()
            .delay(that.imgTime)
            .duration(that.imgTime)
            .ease("linear")
            .attr({
                "x":0,
                "width":function(d,i){ return xScale(d);}
            });

        /*--------绘制矩形部分文字-------*/
        var rectText = this.arcAll.selectAll("text")
            .data(this.rectPeopleNum)
            .enter()
            .append("text")
            .attr({
                "fill":this.color[7],
                "text-anchor":"end",
                "transform":function(d,i){
                    var myTranslate = "translate("+(-xScale(d)+0.5)+","+(that.innerRadius[i])+")"
                    return myTranslate;
                },
                "font-size":"12px"
            })
            .text(function(d){ return d+that.unit;})
            .attr({
                "dx":-(that.outerRadius[0]-that.innerRadius[0]),
                "dy":that.outerRadius[0]-that.innerRadius[0],
                "opacity":0
            })
            .transition()
            .delay(that.imgTime*2)
            .duration(that.imgTime)
            .attr("opacity",1)
    },
    drawText: function(){
        var that = this;

        /*--------------------绘制圆名称------*/
        var drawCircleText = this.textAll.selectAll("text")
            .data(this.series.povertyTeam_data)
            .enter()
            .append("text")
            .text(function(d){ return d.name; })
            .attr({
                "text-anchor":"end",
                "font-size":Math.min(this.width,this.height)/40,
                "dy":function(d,i){return i*(that.outerRadius[0]-that.innerRadius[0])*1.4},
                "dx":this.padding.left*2,
                "fill":this.color[7],
                "transform":"translate("+(0)+","+this.innerRadius[0]+")"
            });
        /*-------------------------下部文字------*/
        var bottomAllText = this.textAll.append("g")
            .attr({
                "class":"bottomAllText",
                "text-anchor":"start",
                "fill":this.color[6],
                "font-weight":"bold",
                "transform":"translate("+(-this.padding.left)+","+(this.outerRadius[this.outerRadius.length-1])*2.5+")"
            });

        var bottom_text = bottomAllText       // 文字
            .append("text")
            .datum(this.bottomText)
            .text(function(d){return d;})
            .attr("font-size",Math.min(this.width,this.height)/27);

        var bottom_num = bottomAllText.append("text")
            .text(function(){ return that.data_sum+that.unit;})
            .attr({
                "font-size":Math.min(this.width,this.height)/20,
                "dy":function(){ return (d3.select(this).attr("font-size")*1.5);}
            });
    },
    repaint: function(){
        var that = this;

        that.drawDataImg();			// 绘制图
        that.drawRectImg();			// 绘制矩形
    }

});// 扶贫 半圆环+横柱图结束

// 扶贫 致贫原因开始
zhnx.chart.povertyReason = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
}
zhnx.chart.povertyReason.prototype = $.extend({}, zhnx.chart.base, {
    constructor: zhnx.chart.povertyReason,
    _defaults: {},

    totalTitle : undefined,
    centerText : undefined,
    unit : undefined,
    positionNumL : undefined,    // 调整左侧文字整体位置
    positionNumR : undefined,    // 调整右侧文字整体位置
    series : undefined,

    padding : {top: 20, right: 20, bottom: 20, left: 20},
    // 标题颜色,完整圆(文字)颜色,(小)颜色,(大)颜色,白色
    color : ["#D67821","rgb(250,166,8)","rgb(166,119,47)","rgb(250，168，1)","rgb(250,250,250)"],
    circle_nei : undefined,
    circle_wai : undefined,
    outerRadius : [],
    innerRadius : [],
    titleSize : "20px",
    circleCentroid : 1.1,	// 原点和引出线中点位置的倍数
    textMultiple : 0.2,		// 调整引出文字每个i值之间的距离倍数
    textInitial : 1,		// 调整引出初始倍数
    textXEnd : 2.4,			// 调整引出最终文字x位置
    drawAnimateTime : 800,

    init: function(args){
        this.baseInit(args.selector);


        this.totalTitle=args.totalTitle;
        this.centerText=args.centerText;
        this.unit=args.unit;
        this.positionNumL = args.positionNumL;
        this.positionNumR = args.positionNumR;
        this.series=args.series;

        this.svg.attr("font-family","Microsoft YaHei");

        this.testRect =  this.svg.append("g").attr({ //在图形上面添加rect的透明上层，点击之后path平移移除
            "class":"rectG"
        });
        this.drawImg = this.svg.append("g")
            .attr({
                "class":"drawImg",
                "width":this.width-this.padding.left-this.padding.right,
                "height":this.height-this.padding.top-this.padding.bottom,
                "transform":"translate("+this.padding.left+","+this.padding.top*2+")"
            });

        this.circle_nei = Math.min(this.width-this.padding.left-this.padding.right,this.height-this.padding.top-this.padding.bottom)/8;
        this.circle_wai = Math.min(this.width-this.padding.left-this.padding.right,this.height-this.padding.top-this.padding.bottom)/4;

        this.drawTitle();
        this.drawData();
        this.circleSecend();
        this.drawCenterText();
        this.taketurns();			// 重复调用
    },
    drawTitle: function(){
        var that = this;

        var totalTitleGroup=this.drawImg.append("g")
            .attr("class","totalTitleText")
            .append("text")
            .datum(this.totalTitle)
            .text(function(d){ return d;})
            .attr({
                "fill":function(){ return that.color[0];},
                "font-size":this.titleSize,
                "font-weight":"bold"
            });
    },
    drawData: function(){
        var that = this;

        this.innerRadius.push(this.circle_nei);

        for(var a=0;a<2;a++){     // 获取到外圈的大小
            this.innerRadius.push(this.circle_nei*(1+(a+1)*0.2));
            this.outerRadius.push(this.circle_nei*(1+(a*3.3+1)*0.2));
        }
        this.outerRadius.push(this.innerRadius[this.innerRadius.length-1]);// 最后一个放入和上一层相同的值，减后为0，绘制出来也为0

        d3.select(".arcAll").remove();// 绘制前清除图形及文字
        d3.select(".textAll").remove();// 绘制前清除

        this.arcAll = this.drawImg.append("g")    // 圆的组
            .attr({
                "class":"arcAll",
                "transform":"translate("+(this.width/2-this.padding.left)+","+(this.height/1.5)+")"
            });

        /*----最内层圆（不需数据）---*/
        var arc_nei = this.arcAll.append("circle")
            .attr({
                "r":(this.circle_nei)-5,
                "stroke":this.color[1],
                "stroke-width":3,
                "fill":"none"
            });

        /*------最外层圆（不需数据）----*/
        var arc_wai = this.arcAll.append("circle")
            .attr({
                "r":this.circle_wai,
                "stroke":this.color[1],
                "stroke-width":3,
                "fill":"none"
            });

        this.arcAll.selectAll("circle")
            .attr("opacity",0)
            .transition()
            .duration(that.drawAnimateTime)
            .attr("opacity",1);

        /*----半径较小的圆（数据变化）--*/
        var pie=d3.layout.pie()       // 定义饼状布局
            .value(function(d){ return d; }); // 值访问器
        /*---排序---*/
        function bubbleSort(arr,test) {
            var i = arr.length, j;
            var tempExchangVal;
            while (i > 0) {
                for (j = 0; j < i - 1; j++) {
                    if (arr[j] < arr[j + 1]) {
                        tempExchangVal = arr[j+1];
                        arr[j+1] = arr[j];
                        arr[j ] = tempExchangVal;
                        tempExchangVal = test[j+1];
                        test[j+1] = test[j];
                        test[j] = tempExchangVal;
                    }
                }
                i--;
            }
            return test;
        }
        var test=this.series.povertyReason_data.type;
        var arr = this.series.povertyReason_data.value;// 数据
        this.arrSorted = bubbleSort(arr,test);// 得到根据数据大小的排序
        this.changeArray = arr.sort(d3.descending);
        /*---排序结束---*/
        var piedata = pie(this.changeArray);
        this.opacityScale = d3.scale.linear()
            .domain([0, 10])
            .range([0.4, 1]);
        this.arcs = this.arcAll.append("g").attr("class","arcAll_g0").selectAll("g")
            .data(piedata)
            .enter()
            .append("g")
            .each(function(d){
                var margin = 0.005;
                d.startAngle += margin;
                d.endAngle -= margin;
            });
        /*-----一圈----*/
        this.arc_1 = d3.svg.arc()  // 弧生成器
            .innerRadius(this.innerRadius[0])   // 设置内半径
            .outerRadius(this.outerRadius[0]);  // 设置外半径
        this.arcs.append("path")
	        .on("click",function(d,i){
	                var x = that.arc_1.centroid(d)[0]*0.1;
	                var y = that.arc_1.centroid(d)[1]*0.1;
	                that.clickMove(x,y,i);
	                that.pathClickCommand({
	        			type: 'click',
	        			context: that.id,
	        			contextType: 'chaObj',
	        			execString: "that.clickMove(" + x+","+y+","+i + ");",
	        			execMode: "evalfunc"
	        		});
	            })
            .attr({
            	"cursor":"pointer",
                "fill":function(){ return that.color[2];},
                "opacity":function(d,i){ return that.opacityScale(i)}
            })
            .transition()
            .duration(that.drawAnimateTime)
            .attrTween("d",function(d,i){
                var start = {
                    startAngle:piedata[i].startAngle,
                    endAngle: piedata[i].startAngle
                };
                var finish = {
                    startAngle:piedata[i].startAngle,
                    endAngle: piedata[i].endAngle
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return that.arc_1(i(d));
                }
            });
///*------二圈-----*/
//	        this.arcs_2 = this.arcAll.append("g").attr("class","arcAll_g1").selectAll("g")
//	        .data(piedata)
//	        .enter()
//	        .append("g")
//	        .each(function(d){
//	            var margin = 0.005;
//	            d.startAngle += margin;
//	            d.endAngle -= margin;
//	        });
//		    this.arc_2 = d3.svg.arc()  //弧生成器
//		        .innerRadius(this.innerRadius[1])   //设置内半径
//		        .outerRadius(this.outerRadius[1]);  //设置外半径
//		    this.arcs_2.append("path")
//		    .on("click",function(d,i){
//		        //console.log(i)
//		        var x = that.arc_2.centroid(d)[0]*0.1;
//		        var y = that.arc_2.centroid(d)[1]*0.1;
//		        that.clickMove(x,y,i);
//		        that.pathClickCommand({
//        			type: 'click',
//        			context: that.id,
//        			contextType: 'chaObj',
//        			execString: "that.clickMove(" + x+","+y+","+i + ");",
//        			execMode: "evalfunc"
//        		});
//		    })
//            .attr({
//            	"cursor":"pointer",
//                "fill":function(d,i){ return that.color[1];},
//                "opacity":function(d,i){ return opacityScale(i);}
//            })
//            .transition()
//            .duration(that.drawAnimateTime)
//            .attrTween("d",function(d,i){
//                var arc = d3.svg.arc()  // 弧生成器
//                    .innerRadius(that.innerRadius[1])   // 设置内半径
//                    .outerRadius(that.outerRadius[1]);  // 设置外半径
//                var start = {
//                    startAngle:piedata[i].startAngle,
//                    endAngle: piedata[i].startAngle
//                };
//                var finish = {
//                    startAngle:piedata[i].startAngle,
//                    endAngle: piedata[i].endAngle
//                };
//                var i = d3.interpolate(start, finish);
//                return function (d) {
//                    return that.arc_2(i(d));
//                }
//            });
    },
    circleSecend: function(){
        var that = this;
        var pie_2=d3.layout.pie()       //定义饼状布局
            .value(function(d){ return d; }); //值访问器
        var piedata_2 = pie_2(this.changeArray);
        this.arcs_2 = this.arcAll.append("g").attr("class","arcAll_g1").selectAll("g")
            .data(piedata_2)
            .enter()
            .append("g")
            .each(function(d){
                var margin = 0.005;
                d.startAngle += margin;
                d.endAngle -= margin;
            });
        this.arc_2 = d3.svg.arc()  //弧生成器
            .innerRadius(this.innerRadius[1])   //设置内半径
            .outerRadius(this.outerRadius[1]);  //设置外半径
        this.arcs_2.append("path")
            .on("click",function(d,i){
                var x = that.arc_2.centroid(d)[0]*0.1;
                var y = that.arc_2.centroid(d)[1]*0.1;
                that.clickMove(x,y,i);
            })
            .attr({
            	"cursor":"pointer",
                "fill":function(d,i){ return that.color[1];},
                "opacity":function(d,i){ return that.opacityScale(i);}
            })
            .transition()
            .duration(1000)
            .attrTween("d",function(d,i){
                var arc = d3.svg.arc()  //弧生成器
                    .innerRadius(that.innerRadius[1])   //设置内半径
                    .outerRadius(that.outerRadius[1]);  //设置外半径
                var start = {
                    startAngle:piedata_2[i].startAngle,
                    endAngle: piedata_2[i].startAngle
                };
                var finish = {
                    startAngle:piedata_2[i].startAngle,
                    endAngle: piedata_2[i].endAngle
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return that.arc_2(i(d));
                }
            });
    },
    pathClickCommand: function(commandArgs){

    },
    commandText: function(commandArgs){

    },
    clickMove: function(pathX,pathY,pathNum){
        var that = this;

        var dataG1 = this.arcAll.select(".arcAll_g0")
        var dataG2 = this.arcAll.select(".arcAll_g1")
        d3.selectAll("path").transition().duration(100).ease('elastic').attr({"transform": "translate("+0+","+0+")"});
        this.arcAll.selectAll(".circleText").attr({"font-size": 14});
        d3.select(dataG1.selectAll("path")[0][pathNum]).transition().duration(100).ease('elastic').attr({
            "transform":function(){
                var x =pathX;
                var y=pathY;
                return "translate("+x+","+y+")"
            }
        });
        d3.select(this.arcs.selectAll("g")[pathNum][0]).attr({
            "font-size": 16
        });
        d3.select(dataG2.selectAll("path")[0][pathNum]).transition().duration(100).ease('elastic').attr({
            "transform":function(){
                var x =pathX;
                var y=pathY;
                return "translate("+x+","+y+")"
            }
        });
        this.testRect.selectAll("rect").remove();

        this.testRect.append("rect").attr({
            "width":this.width,
            "height":this.height,
            "fill":"rgba(255,255,255,0)"
        }).on("click",function(){
            that.svgClick();
            that.commandText({
     			type: 'click',
     			context: that.id,
     			contextType: 'chaObj',
     			execString: 'that.svgClick()',
     			execMode: "evalfunc"
 			});
        })
    },
    svgClick: function(){
        var that = this;
        that.svg.selectAll("path").transition().duration(100).ease('elastic').attr({"transform": "translate("+0+","+0+")"});
        this.arcs.selectAll("text").attr({"font-size":12});
        that.svg.selectAll(".rectG").selectAll("rect").remove();
    },
    drawCenterText: function(){
        var that = this;

        this.drawImg.selectAll(".textAll").remove();
        this.drawImg.selectAll(".drawInner").remove();
        this.svg.selectAll("defs").remove();

        this.textAll = this.drawImg.append("g")    // 文字和线的组
            .attr("class","textAll");
        // /*------------------------------------------绘制文字及线------------------*/
        var totalText = this.textAll.append("text")
            .text(this.centerText)
            .attr({
                "fill":this.color[1],
                "font-weight":"bold",
                "font-size":Math.min(this.width,this.height)/12,
                "transform":"translate("+(this.width/2-this.padding.left)+","+(this.height/1.5)+")",
                "dx":-this.padding.top*2,
                "dy":this.padding.top*0.7
            });

        this.textAll.selectAll("text")
            .attr("opacity",0)
            .transition()
            .duration(that.drawAnimateTime)
            .attr("opacity",1);

        /*------------绘制小圆点---------*/
        var circle = this.arcs.append("circle")
            .attr("transform",function(d){
                var x = that.arc_2.centroid(d)[0]*that.circleCentroid;
                var y = that.arc_2.centroid(d)[1]*that.circleCentroid;
                return "translate("+x+","+y+")";
            })
            .attr({
                "fill":this.color[4],
                "r":0
            })
            .transition()
            .duration(that.drawAnimateTime)
            .attr("r",3);
        /*--------------绘制引出线----------*/
        var line_1 = this.arcs.append("line")
            .attr({
                "x1":function(d){ return that.arc_2.centroid(d)[0]*that.circleCentroid;},
                "y1":function(d){ return that.arc_2.centroid(d)[1]*that.circleCentroid;},
                "x2":function(d){ return that.arc_2.centroid(d)[0]*that.circleCentroid;},
                "y2":function(d){ return that.arc_2.centroid(d)[1]*that.circleCentroid;},
                "stroke":this.color[4]
            })
            .transition()
            .delay(that.drawAnimateTime)
            .duration(that.drawAnimateTime)
            .ease("linear")
            .attr({
                "x2":function(d,i){ return that.arc_2.centroid(d)[0]*(that.textInitial + (i *that.textMultiple)); },
                "y2":function(d,i){ return that.arc_2.centroid(d)[1]*(that.textInitial + (i *that.textMultiple)); }
            });

        var line_2 = this.arcs.append("line")    // 横向线
            .attr({
                "x1":function(d,i){ return that.arc_2.centroid(d)[0]*(that.textInitial + (i *that.textMultiple)); },
                "y1":function(d,i){ return that.arc_2.centroid(d)[1]*(that.textInitial + (i *that.textMultiple)); },
                "x2":function(d,i){ return that.arc_2.centroid(d)[0]*(that.textInitial + (i *that.textMultiple)); },
                "y2":function(d,i){ return that.arc_2.centroid(d)[1]*(that.textInitial + (i *that.textMultiple)); },
                "stroke":this.color[4]
            })
            .transition()
            .delay(that.drawAnimateTime*2)
            .duration(that.drawAnimateTime)
            .ease("linear")
            .attr({
                "x2":function(d,i){ return that.arc_2.centroid(d)[0]*that.textXEnd; },
                "y2":function(d,i){  return that.arc_2.centroid(d)[1]*(that.textInitial + (i *that.textMultiple)); }
            });
        /*------------绘制文字-----------*/
        var circleText = this.arcs.append("g")
            .attr("class","circleText")
            .attr("font-size",12);

        circleText.attr("transform",function(d,i){
                 var x = that.arc_2.centroid(d)[0]*that.textXEnd;
                 var y = that.arc_2.centroid(d)[1]*(that.textInitial + (i *that.textMultiple));
                 return "translate("+x+","+y+")";
            })
            .attr({
                "opacity":0 ,
                "text-anchor":function(d){ if(d.endAngle<Math.PI){return "start"}else{return "end"} }
            })
            .transition()
            .delay(that.drawAnimateTime*2.5)
            .duration(that.drawAnimateTime)
            .attr("opacity",1);

        var circleText_1 = circleText.append("text")    // 数据
            .attr({
                "font-size":"1em",
                "fill":this.color[1]
            })
            .text(function(d){ return d.value+that.unit} );
        var circleText_2 = circleText
            .append("text")    // 文字
            .attr({
                "font-size":"0.8em",
                "fill":this.color[4],
                "dy":"1em"
            })
            .text(function(d,i){ return that.arrSorted[i]+that.unit});
    },
    repaint: function(){
        var that = this;

        that.drawData();
        that.circleSecend();
        that.drawCenterText();
    }
})// 扶贫 致贫原因结束

// 扶贫 环形
zhnx.chart.povertyAba_develop = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
};
zhnx.chart.povertyAba_develop.prototype = $.extend({}, zhnx.chart.base, {
    constructor: zhnx.chart.povertyAba_develop,
    _defaults: {},

    totalTitle : undefined,
    centerText : undefined,
    unit : undefined,
    textColorIf : undefined,     // 文字颜色本身是否有透明,true不含,false含有
    strokeIf : undefined,        // 是否有边线,true含有
    opacityIf : undefined,       // 控制是否使用透明度渐变,true使用
    opacity : 0,          // 透明度
    start_opacity:0,
    end_opacity:0,
    circleMargin : 0,      // 控制圆环之间的间距
    lineBold : undefined,        // 引出线是否加粗,true加粗
    end_start_margin : undefined,  // 数据圆环间隔是否绘制，true绘制，false不绘制，直接用线来表示间隔
    margin : 0,                 // 数据间隔
    colorIf : undefined,         // 颜色本身是否有透明,true不含油,false含有
    color : undefined,
    innerLayer_1 : undefined,   // 最内层的圆环，跟数据无关,true显示
    innerLayer_2 : undefined,   // 内层环线，跟数据无关,true显示
    textPosition : undefined,    // 中间文字位置，true为上下，false为左右显示
    outerLayer : undefined,      // 外层的svg，跟数据无关，true显示
    circle_R : undefined,        // 引出线的圆点，true空心，false实心
    textBold : undefined,        // 引出文字是否加粗,true加粗,false不加粗
    colorBase : undefined,		// 标题颜色
    centerImg : undefined,		// 中间部分是否显示,true显示图片
    positionNumL : undefined,    // 调整左侧文字整体位置
    positionNumR : undefined,    // 调整右侧文字整体位置
    series : undefined,
    
    centerSum : undefined,

    padding : {top: 20, right: 20, bottom: 20, left: 20},
    colorInner : ["rgb(42,75,128)"/* 深蓝色(最内圈、最外圈颜色) */,"rgba(250,250,250,.7)"/* 弧的颜色 */],
    circle_nei : undefined,
    innerRadius : undefined,
    outerRadius : undefined,
    fontSize : undefined,
    rotateScaleW : 1.3,
    rotateScaleN : 0.15,
    titleSize : "20px",
    circleCentroid : 1,	// 原点和引出线中点位置的倍数
    textOneMultiple : 0.25,		// 调整引出文字每个i值之间的距离倍数,第1圈
    textTwoMultiple : 0.19,		// 调整引出文字每个i值之间的距离倍数,第2圈
    textOneInitial : 1,		// 调整引出初始倍数,第1圈
    textTwoInitial : 0.9,		// 调整引出初始倍数,第2圈
    textOneXEnd : 2.4,			// 调整引出最终文字x位置,第1圈
    textTwoXEnd : 2,			// 调整引出最终文字x位置,第2圈
    drawAnimateTime : 800,
    circleR : 3,				// 引出圆点半径
    circelTextSize : 14,		// 引出文字大小

    init : function(args){
        this.baseInit(args.selector);


        this.totalTitle = args.totalTitle;
        this.centerText = args.centerText;
        this.unit = args.unit;
        this.textColorIf = args.textColorIf;
        this.strokeIf = args.strokeIf;
        this.opacityIf = args.opacityIf;
        this.opacity = args.opacity;
        this.start_opacity = args.start_opacity;
        this.end_opacity = args.end_opacity;
        this.circleMargin = args.circleMargin;
        this.lineBold = args.lineBold;
        this.end_start_margin = args.end_start_margin;
        this.margin = args.margin;
        this.colorIf = args.colorIf;
        this.color = args.color;
        this.innerLayer_1 = args.innerLayer_1;
        this.innerLayer_2 = args.innerLayer_2;
        this.textPosition = args.textPosition;
        this.outerLayer = args.outerLayer;
        this.circle_R = args.circle_R;
// this.colorBase = args.colorBase;
        this.colorBase = "#D67821";	// 标题颜色
        this.centerImg = args.centerImg;
        this.positionNumL = args.positionNumL;
        this.positionNumR = args.positionNumR;
        this.fontSize = args.fontSize;
        this.series=args.series;


        this.colorInner = ["rgb(42,75,128)"/* 深蓝色(最内圈、最外圈颜色) */,"rgba(250,250,250,.7)"/* 弧的颜色 */];
        this.centerSum = 0;
        this.svg.attr("font-family","Microsoft YaHei");

        this.testRect =  this.svg.append("g").attr({ //在图形上面添加rect的透明上层，点击之后path平移移除
            "class":"rectG"
        })
        this.drawImg = this.svg.append("g")
            .attr({
                "class":"drawImg",
                "width":this.width-this.padding.left-this.padding.right,
                "height":this.height-this.padding.top-this.padding.bottom,
                "transform":"translate("+(this.padding.left/2)+","+this.padding.top*2+")"
            });

        this.circle_nei = Math.min(this.width-this.padding.left-this.padding.right,this.height-this.padding.top-this.padding.bottom)/5;

        this.innerRadius = this.circle_nei;
        this.outerRadius = this.innerRadius*1.2;
        this.innerCircle_1 = this.innerRadius*0.7;  // 最内层圆环
        this.outerCircle_1 = this.innerCircle_1*1.25;
        this.innerCircle_2 = this.innerRadius-2;    // 内层环线
        this.outerCircle_2 = this.innerRadius-1;
        this.innerRadiusCircleW = this.innerRadius*1.55;//
        this.innerData = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];

        if(this.series.aba_data[0].value[0]>0){
        	this.drawTitle();
            this.drawInnerImg();		// 除圆环外部分
            this.drawCircleData();
            // this.drawInnerImg(); //除圆环外部分
            this.drawCenterText();		// 中间部分
            // this.repaint();
            this.taketurns();			// 重复调用
        }
        
    },
    drawTitle: function(){
        var that = this;

        var totalTitleGroup=this.drawImg.append("g")
            .attr("class","totalTitleText")
            .append("text")
            .datum(this.totalTitle)
            .text(function(d){ return d;})
            .attr({
                "fill":function(){ return that.colorBase;},
                "font-size":that.titleSize,
                "font-weight":"bold"
            });
    },
    // dataChange: function(){
    //
    // },
    drawData: function(num){
        var that = this;

        d3.selectAll(".arcAll"+num).remove();

        /*---排序---*/
        function bubbleSort(arr,test) {
            var i = arr.length, j;
            var tempExchangVal;
            while (i > 0) {
                for (j = 0; j < i - 1; j++) {
                    if (arr[j] < arr[j + 1]) {
                        tempExchangVal = arr[j+1];
                        arr[j+1] = arr[j];
                        arr[j ] = tempExchangVal;
                        tempExchangVal = test[j+1];
                        test[j+1] = test[j];
                        test[j] = tempExchangVal;
                    }
                }
                i--;
            }
            return test;
        }
        var test = this.series.aba_data[num].type;
        var arr = this.series.aba_data[num].value;
        var arrSorted = bubbleSort(arr,test);// 得到根据数据大小的排序
        var changeArray = arr.sort(d3.descending);
        /*-----排序结束----*/
        var opacityScale = d3.scale.linear()
            .domain([Math.max(changeArray.length),0])
            .range([this.start_opacity, this.end_opacity]);

        var arcAll = this.drawImg.append("g")    // 圆的组
            .attr({
                "class":"arcAll"+num,
                "transform":"translate("+(this.width/2+this.padding.left)+","+(this.height/2+2*this.padding.top)+")"
            });
        that.centerSum = 0;
        var pie=d3.layout.pie().value(function(d){ 
        	
        	that.centerSum += d;
        	return d;});
        var piedata=pie(changeArray);
        var arcs = arcAll.selectAll("g").data(piedata).enter().append("g")
            .attr("class","arcs_0")
            .each(function(d){
                if(that.end_start_margin) {   // 绘制数据之间间隔
                    var margin = that.margin;
                    d.startAngle += margin;
                    d.endAngle -= margin;
                }
            });
        var arc = d3.svg.arc()
            .innerRadius(this.innerRadius*(num/4+1)-this.circleMargin*num/4)
            .outerRadius(this.outerRadius*(num/4+1)-this.circleMargin*num/4);
        var testR = this.outerRadius*(num/4+1);
// var changeR = this.outerRadius*(num/4+1)-this.innerRadius*(num/4+1); //圆弧
        // var testRingWidth = (this.outerRadius-this.innerRadius)*(num/4+1)
        arcs.append("path")
        	.on("click",function(d,i){
        		var x = arc.centroid(d)[0]*0.1;
                var y = arc.centroid(d)[1]*0.1;
                that.clickMove(x,y,i,num);
                that.pathClickCommand({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.clickMove(" + x+","+y+","+i + ","+num+");",
        			execMode: "evalfunc"
        		});
        	})
            .attr("fill",function(){
                if(that.colorIf){ return that.color[num];
                }else{
                    var colors = ["rgba(0,191,255,.6)"/* 蓝色 */,"rgba(255,168,1,.6)" /* 黄色 */];
                    return colors[num]
                }
            })
            .attr("opacity",function(d,i){
                if(that.opacityIf){ return opacityScale(i); }else{ return that.opacity*(i+1)/2; }
            })
            .attr({
            	"cursor":"pointer",
                "stroke":function(){ if(that.strokeIf){ return that.color[num]}else{  return "";} },
                "stroke-width":function(){ if(that.strokeIf){ return 2; }else{ return 1;} }
            })
            .transition()
            .duration(that.drawAnimateTime+200)
            .attrTween("d",function(d,i){
                var start = {
                    startAngle:piedata[i].startAngle,
                    endAngle: piedata[i].startAngle
                };
                var finish = {
                    startAngle:piedata[i].startAngle,
                    endAngle: piedata[i].endAngle
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return arc(i(d));
                }
            });


        /*------------绘制小圆点---------*/
        var circle = arcs.append("circle")
            .attr("transform",function(d){
                var x = arc.centroid(d)[0]*that.circleCentroid;
                var y = arc.centroid(d)[1]*that.circleCentroid;
                return "translate("+x+","+y+")";
            })
            .attr("r",0)
            .transition()
            .duration(that.drawAnimateTime)
            .attr("r",this.circleR);

        if(this.circle_R){       // 颜色需要根据圆环颜色改变
            circle.attr({
                "fill":"none",
                "stroke":function(){ return that.color[num];},
                "stroke-width":2
            })
        }else{circle.attr("fill",function(){ return that.color[num];});}
        /*-------------绘制引出线圆点结束------*/

        /*------------绘制文字-----------*/
        var circleText = arcs.append("g").attr("class","circleText_1")
// .attr("transform",function(d){
// if(d.startAngle<Math.PI){ return "translate("+0+","+
// testR*that.positionNumR+")";
// }else{ return "translate("+0+","+(testR*that.positionNumL)+")";}
// });
      var topTextGroup =  circleText.append("text")
          .attr("transform",function(d,i){
              if(num%2 == 0){
                  var x = arc.centroid(d)[0]*that.textOneXEnd;
                  var y = arc.centroid(d)[1]*(that.textOneInitial + (i*that.textOneMultiple));
                  return "translate("+x+","+y+")";
              }
              else if(num%2 == 1){
                  var x = arc.centroid(d)[0]*that.textTwoXEnd;
                  var y = arc.centroid(d)[1]*(that.textTwoInitial + (i*0.19));
                  return "translate("+x+","+y+")";
              }
          })
            .attr({
                "font-weight":function(){ if(that.textBold){ return "bold"; }else{ return 0; }},
                "text-anchor":function(d){
                    if(num%5==0){ if(arc.centroid(d)[0] > 0){return "start"}else{return "start"} }
                    else if(num%5==1){ if(arc.centroid(d)[0] > 0){return "end"}else{return "end"} }
                },
                "opacity":0
            })
            .transition()
            .delay(that.drawAnimateTime*2.5)
            .duration(that.drawAnimateTime)
            .attr("opacity",1)        // 引出线上部数字
            .text(function(d){ return d.value+that.unit[1];})
            .attr({
            	"dx": function(d){
                    if(num%5==0){ if(arc.centroid(d)[0] > 0){return "-1em"}else{return "0em"} }
                    else if(num%5==1){ if(arc.centroid(d)[0] > 0){return "-3em"}else{return "0em"} }
                },
                "fill":function(){ return that.color[that.color.length-1]; },
                "opacity":function(){ if(this.textColorIf){ return 1; }else{ return 0.7; } },
                "font-size": this.circelTextSize	
            });
       var botTextGroup = circleText.append("text")        // 引出线下部文字
            .text(function(d,i){ return that.series.aba_data[num].type[i]; })
           .attr("transform",function(d,i){
               if(num%2 == 0){
                   var x = arc.centroid(d)[0]*that.textOneXEnd;
                   var y = arc.centroid(d)[1]*(that.textOneInitial + (i*that.textOneMultiple));
                   return "translate("+x+","+y+")";
               }
               else if(num%2 == 1){
                   var x = arc.centroid(d)[0]*that.textTwoXEnd;
                   var y = arc.centroid(d)[1]*(that.textTwoInitial + (i*that.textTwoMultiple));
                   return "translate("+x+","+y+")";
               }
           })
            .attr({
            	"dx": function(d){
                    if(num%5==0){ if(arc.centroid(d)[0] > 0){return "-3em"}else{return "0em"} }
                    else if(num%5==1){ if(arc.centroid(d)[0] > 0){return "-3em"}else{return "0em"} }
                },
                "dy": "1em",
                "font-size": this.circelTextSize,
                "fill":function(){ return that.color[num]; },
                "opacity":0,
                "text-anchor":function(d) {
                    if (num % 5 == 0) {
                        if (arc.centroid(d)[0] > 0) { return "start" } else { return "start" }
                    }
                    else if (num % 5 == 1) {
                        if (arc.centroid(d)[0] > 0) {  return "end" } else { return "end" }
                    }
                }
            })
            .transition()
            .delay(that.drawAnimateTime*2.5)
            .duration(that.drawAnimateTime)
            .attr("opacity",function(){ if(this.textColorIf){ return 1; }else{ return 0.7; } });

        /*--------------绘制引出线----------*/

        var line_1 = arcs.append("line")    // 数据外圈延伸线
            .attr({
                "x1":function(d){ return arc.centroid(d)[0]*that.circleCentroid; },
                "y1":function(d){ return arc.centroid(d)[1]*that.circleCentroid; },
                "x2":function(d){ return arc.centroid(d)[0]*that.circleCentroid; },
                "y2":function(d){ return arc.centroid(d)[1]*that.circleCentroid; },
                "stroke":function(){ return that.color[num]; },
                "stroke-width":function(){ if(that.lineBold){ return 2; }else{ return 1; }}
            })
            .transition()
            .delay(that.drawAnimateTime)
            .duration(that.drawAnimateTime)
            .ease("linear")
            .attr({
                "x2":function(d,i){
                    if (num % 5 == 0) {
                        return arc.centroid(d)[0]*(that.textOneInitial + (i *that.textOneMultiple))
                    }
                    else if(num % 5 == 1){
                        return arc.centroid(d)[0]*(that.textTwoInitial + (i *that.textTwoMultiple))
                       }
                    },
                "y2":function(d,i){
                    if (num % 5 == 0) {
                        return arc.centroid(d)[1]*(that.textOneInitial + (i *that.textOneMultiple))
                    }
                    else if(num % 5 == 1){
                        return arc.centroid(d)[1]*(that.textTwoInitial + (i *that.textTwoMultiple))
                    }
                }
            });
        var line_2 = arcs.append("line")
            .attr({
                "x1":function(d,i){
                    if (num % 5 == 0) {
                        return arc.centroid(d)[0]*(that.textOneInitial + (i *that.textOneMultiple))
                    }
                    else if(num % 5 == 1){
                        return arc.centroid(d)[0]*(that.textTwoInitial + (i *that.textTwoMultiple))
                    }
                },
                "y1":function(d,i){
                    if (num % 5 == 0) {
                        return arc.centroid(d)[1]*(that.textOneInitial + (i *that.textOneMultiple))
                    }
                    else if(num % 5 == 1){
                        return arc.centroid(d)[1]*(that.textTwoInitial + (i *that.textTwoMultiple))
                    }
                },
                "x2":function(d,i){
                    if (num % 5 == 0) {
                        return arc.centroid(d)[0]*(that.textOneInitial + (i *that.textOneMultiple))
                    }
                    else if(num % 5 == 1){
                        return arc.centroid(d)[0]*(that.textTwoInitial + (i *that.textTwoMultiple))
                    }
                },
                "y2":function(d,i){
                    if (num % 5 == 0) {
                        return arc.centroid(d)[1]*(that.textOneInitial + (i *that.textOneMultiple))
                    }
                    else if(num % 5 == 1){
                        return arc.centroid(d)[1]*(that.textTwoInitial + (i *that.textTwoMultiple))
                    }
                },
                "stroke":function(){ return that.color[num]; },
                "stroke-width":function(){if(this.lineBold){ return 2; }else{ return 1; }}
            })
            .transition()
            .delay(that.drawAnimateTime*2)
            .duration(that.drawAnimateTime)
            .ease("linear")
            .attr({
                "x2":function(d,i){
                    if (num % 5 == 0) {
                        return arc.centroid(d)[0]*that.textOneXEnd
                    }
                    else if(num % 5 == 1){
                        return arc.centroid(d)[0]*that.textTwoXEnd
                    }
                },
                "y2":function(d,i){
                    if (num % 5 == 0) {
                        return arc.centroid(d)[1]*(that.textOneInitial + (i *that.textOneMultiple))
                    }
                    else if(num % 5 == 1){
                        return arc.centroid(d)[1]*(that.textTwoInitial + (i *that.textTwoMultiple))
                    }
                }
            });

        /*-------绘制折线结束-------*/


    },
    clickMove: function(pathX,pathY,pathNum,num){
        var that = this;

        this.dataG = this.svg.select(".arcAll"+num);
        this.svg.select(".arcAll"+0).selectAll("path").transition().duration(100).ease('elastic').attr({"transform": "translate("+0+","+0+")"});
        this.svg.select(".arcAll"+1).selectAll("path").transition().duration(100).ease('elastic').attr({"transform": "translate("+0+","+0+")"});
        this.dataG.selectAll("text").attr({"font-size": 14});
        
        d3.select(this.dataG.selectAll("path")[0][pathNum]).transition().duration(100).ease('elastic').attr({
            "transform":function(){
                var x =pathX;
                var y=pathY;
                return "translate("+x+","+y+")"
            }
        });
        d3.select(this.dataG.selectAll(".arcs_0")[0][pathNum]).selectAll("text").attr({
            "font-size": 16
        });
        this.testRect.selectAll("rect").remove();

        this.testRect.append("rect").attr({
            "width":this.width,
            "height":this.height,
            "fill":"rgba(255,255,255,0)",
            "z-index":"-1"
        }).on("click",function(){
            that.svgClick();
            that.commandText({
     			type: 'click',
     			context: that.id,
     			contextType: 'chaObj',
     			execString: 'that.svgClick()',
     			execMode: "evalfunc"
 			});
        })
    },
    svgClick: function(){
        var that = this;
        that.dataG.selectAll("path").transition().duration(100).ease('elastic').attr({"transform": "translate("+0+","+0+")"});
        that.dataG.selectAll("text").attr({"font-size":12});
        that.svg.selectAll(".rectG").selectAll("rect").remove();
    },
    pathClickCommand: function(commandArgs){

    },
    commandText: function(commandArgs){

    },
    drawCenterText: function(){
        var that = this;

        this.drawImg.selectAll(".textAll").remove();
        this.svg.select(".myDefsImg").remove();

        this.textAll = this.drawImg.append("g")    // 文字和线的组
            .attr("class","textAll")
            .attr("transform","translate("+(this.width/2+this.padding.left)+","+(this.height/2+2*this.padding.top)+")");
        if(this.textPosition){
            var totalTextLR = this.textAll.append("g")
                .attr({
                    "text-anchor":"middle",
                    "fill":function(d,i){  return that.color[that.color.length-1]; }
                });
            if(this.centerText[1]!=""){
            	this.centerText[1]=that.centerSum+"人";	
            }
            var totalText_1 = totalTextLR.append("text")	// 数字
                .text(this.centerText[1])
                .attr({
                    "font-weight":"bold",
                    "font-size":Math.min(this.width,this.height)/15,
                    "dy":this.padding.top*1.7
                });

            var totalText_2 = totalTextLR.append("text")	// 文字
                .text(this.centerText[0])
                .attr({
                    "opacity":0.7,
                    "font-size":Math.min(this.width,this.height)/25,
                    "dy":-this.padding.top*1.5
                });
        }else{  // 文字左右排列
            var totalText = this.textAll.append("g")
                .selectAll("text")
                .data(this.centerText)
                .enter()
                .append("text")
                .text(function(d){ return d; })
                .attr({
                    "text-anchor":"middle",
                    "fill":function(d,i){ return that.color[i]; },
                    "font-size":Math.min(this.width,this.height)/35,
                    "dx":function(d,i){ return -that.padding.left*1.5+that.padding.left*3*i; },
                    "font-weight":"bold",
                    "dy":this.padding.top/2
                });
        }

        if(this.centerImg==true){      // 中间出现图片
            var myDefsImg=this.svg.append("defs")
                .attr("class","myDefsImg")
                .append("path")
                .attr({
                	"id":"myDefsImg",
                	"stroke":"#FFFFFF",
                	"stroke-miterlimit":10
                })
                .attr("d","M258.1,35.2l-13.6,13.6c45,50.2,45,126.7,0,177.3l13.9,13.9C310.6,186,310.5,89.1,258.1,35.2"+
                    "z M226.3,67l-14.1,14c27.5,32.5,27.5,80.3,0.1,113l14,13.9C261.3,167.4,261.4,107.1,226.3,67z M70.4,48.8L56.7,35.2"+
                    "C4.4,89.1,4.3,186,56.4,240l13.9-13.9C25.4,175.5,25.3,99,70.4,48.8z M88.6,67c-35.1,40.2-35,100.5,0,141l14-13.9"+
                    "c-27.3-32.7-27.3-80.5,0.1-113L88.6,67z M157.4,92.8c-25,0-45.2,20.2-45.2,45.1c0,24.9,20.2,45.1,45.2,45.1s45.2-20.2,45.2-45.1"+
                    "C202.5,112.9,182.3,92.8,157.4,92.8z"+
                    "M658.5,188.8c-14.1,0-25.6,11.5-25.6,25.6c0,14.1,11.5,25.6,25.6,25.6s25.6-11.5,25.6-25.6"+
                    "C684.1,200.3,672.6,188.8,658.5,188.8z M632.9,108.8V144c53,0,96,43,96,96h35.2C764.1,167.6,705.4,108.8,632.9,108.8z M632.9,35.2"+
                    "v35.2c93.7,0,169.6,75.9,169.6,169.6h35.2C837.7,126.9,746,35.2,632.9,35.2z"+
                    "M356.8,521c-13.4,11.7-21.9,28.9-21.9,48.1c0,19.1,8.4,36.2,21.7,47.9l0.1-0.1"+
                    "c2.3,1.6,7-0.6,10.5-5.1c3.4-4.2,4.6-8.9,2.9-11l0.3-0.3c-9.3-8-15.2-19.8-15.2-33c0-12.4,5.1-23.4,13.3-31.4"+
                    "c0.1-0.1,0.2-0.1,0.3-0.1c2-1.6,0.9-6.2-2.4-10.3c-3.3-4-7.5-6-9.5-4.6L356.8,521L356.8,521z M337.5,496.4"+
                    "c-0.2,0.2-0.4,0.4-0.6,0.6c0,0-0.1,0.1-0.1,0.1c-0.1,0.1-0.1,0.2-0.2,0.2c-20.1,17.5-32.8,43.2-32.8,71.9"+
                    "c0,28.6,12.7,54.3,32.6,71.7c0.1,0.1,0.2,0.3,0.4,0.4c2.2,1.8,7-0.4,10.7-5c3.6-4.5,4.7-9.5,2.6-11.3l0.1-0.1"+
                    "c-15.5-13.6-25.4-33.5-25.4-55.7c0-22.5,10-42.5,25.8-56.1l-0.1-0.1c1.5-2.2,0.3-6.8-3-10.9c-3.2-4-7.3-6.2-9.8-5.4L337.5,496.4"+
                    "L337.5,496.4z M455.5,617.3c13.4-11.7,21.9-28.9,21.9-48.1c0-19.1-8.4-36.2-21.7-47.9l-0.1,0.1c-2.3-1.6-7,0.6-10.5,5.1"+
                    "c-3.4,4.2-4.6,8.9-2.9,11l-0.3,0.3c9.3,8,15.2,19.8,15.2,33c0,12.4-5.1,23.4-13.3,31.4c-0.1,0.1-0.2,0.1-0.3,0.1"+
                    "c-2,1.6-0.9,6.2,2.4,10.3c3.3,4,7.5,6,9.5,4.6L455.5,617.3L455.5,617.3z M474.8,641.9c0.2-0.2,0.4-0.4,0.6-0.6"+
                    "c0,0,0.1-0.1,0.1-0.1c0.1-0.1,0.1-0.2,0.2-0.2c20.1-17.5,32.8-43.2,32.8-71.9c0-28.6-12.7-54.3-32.6-71.7"+
                    "c-0.1-0.1-0.2-0.3-0.4-0.4c-2.2-1.8-7,0.4-10.7,5c-3.6,4.5-4.7,9.5-2.6,11.3l-0.1,0.1c15.5,13.6,25.4,33.5,25.4,55.7"+
                    "c0,22.5-10,42.5-25.8,56.1l0.1,0.1c-1.5,2.2-0.3,6.8,3,10.9c3.2,4,7.3,6.2,9.8,5.4L474.8,641.9L474.8,641.9z M471.4,718.2"+
                    "L471.4,718.2l-52-125.5c4.8-4,8-10,8-16.7c0-12-9.7-21.8-21.8-21.8c-12,0-21.7,9.8-21.7,21.8c0,7.3,3.6,13.8,9.2,17.7l-51.9,125"+
                    "c-0.1,0.1-0.1,0.3-0.1,0.4l-0.2,0.5l0.1,0c-0.3,1-0.5,2-0.5,3.1c0,5.4,4.3,9.7,9.6,9.7c5.3,0,9.6-4.3,9.6-9.6l12.3-30.9h69.3"+
                    "l12.2,28.8c-0.2,0.7-0.2,1.3-0.2,2c0,5.3,4.3,9.6,9.6,9.6c5.3,0,9.7-4.3,9.7-9.6C472.5,721.1,472.1,719.6,471.4,718.2L471.4,718.2"+
                    "z M405.7,607.6l16.1,38.1h-31.3L405.7,607.6L405.7,607.6z M376.7,680.2l8.7-21.8h41.8l9.2,21.8H376.7L376.7,680.2z"+
                    "M258.1,35.2l-13.6,13.6c45,50.2,45,126.7,0,177.3l13.9,13.9C310.6,186,310.5,89.1,258.1,35.2z"+
                    "M226.3,67l-14.1,14c27.5,32.5,27.5,80.3,0.1,113l14,13.9C261.3,167.4,261.4,107.1,226.3,67z M70.4,48.8L56.7,35.2"+
                    "C4.4,89.1,4.3,186,56.4,240l13.9-13.9C25.4,175.5,25.3,99,70.4,48.8z M88.6,67c-35.1,40.2-35,100.5,0,141l14-13.9"+
                    "c-27.3-32.7-27.3-80.5,0.1-113L88.6,67z M157.4,92.8c-25,0-45.2,20.2-45.2,45.1c0,24.9,20.2,45.1,45.2,45.1s45.2-20.2,45.2-45.1"+
                    "C202.5,112.9,182.3,92.8,157.4,92.8z"+
                    "M658.5,188.8c-14.1,0-25.6,11.5-25.6,25.6c0,14.1,11.5,25.6,25.6,25.6s25.6-11.5,25.6-25.6"+
                    "C684.1,200.3,672.6,188.8,658.5,188.8z M632.9,108.8V144c53,0,96,43,96,96h35.2C764.1,167.6,705.4,108.8,632.9,108.8z M632.9,35.2"+
                    "v35.2c93.7,0,169.6,75.9,169.6,169.6h35.2C837.7,126.9,746,35.2,632.9,35.2z"+
                    "M356.8,521c-13.4,11.7-21.9,28.9-21.9,48.1c0,19.1,8.4,36.2,21.7,47.9l0.1-0.1"+
                    "c2.3,1.6,7-0.6,10.5-5.1c3.4-4.2,4.6-8.9,2.9-11l0.3-0.3c-9.3-8-15.2-19.8-15.2-33c0-12.4,5.1-23.4,13.3-31.4"+
                    "c0.1-0.1,0.2-0.1,0.3-0.1c2-1.6,0.9-6.2-2.4-10.3c-3.3-4-7.5-6-9.5-4.6L356.8,521L356.8,521z M337.5,496.4"+
                    "c-0.2,0.2-0.4,0.4-0.6,0.6c0,0-0.1,0.1-0.1,0.1c-0.1,0.1-0.1,0.2-0.2,0.2c-20.1,17.5-32.8,43.2-32.8,71.9"+
                    "c0,28.6,12.7,54.3,32.6,71.7c0.1,0.1,0.2,0.3,0.4,0.4c2.2,1.8,7-0.4,10.7-5c3.6-4.5,4.7-9.5,2.6-11.3l0.1-0.1"+
                    "c-15.5-13.6-25.4-33.5-25.4-55.7c0-22.5,10-42.5,25.8-56.1l-0.1-0.1c1.5-2.2,0.3-6.8-3-10.9c-3.2-4-7.3-6.2-9.8-5.4L337.5,496.4"+
                    "L337.5,496.4z M455.5,617.3c13.4-11.7,21.9-28.9,21.9-48.1c0-19.1-8.4-36.2-21.7-47.9l-0.1,0.1c-2.3-1.6-7,0.6-10.5,5.1"+
                    "c-3.4,4.2-4.6,8.9-2.9,11l-0.3,0.3c9.3,8,15.2,19.8,15.2,33c0,12.4-5.1,23.4-13.3,31.4c-0.1,0.1-0.2,0.1-0.3,0.1"+
                    "c-2,1.6-0.9,6.2,2.4,10.3c3.3,4,7.5,6,9.5,4.6L455.5,617.3L455.5,617.3z M474.8,641.9c0.2-0.2,0.4-0.4,0.6-0.6"+
                    "c0,0,0.1-0.1,0.1-0.1c0.1-0.1,0.1-0.2,0.2-0.2c20.1-17.5,32.8-43.2,32.8-71.9c0-28.6-12.7-54.3-32.6-71.7"+
                    "c-0.1-0.1-0.2-0.3-0.4-0.4c-2.2-1.8-7,0.4-10.7,5c-3.6,4.5-4.7,9.5-2.6,11.3l-0.1,0.1c15.5,13.6,25.4,33.5,25.4,55.7"+
                    "c0,22.5-10,42.5-25.8,56.1l0.1,0.1c-1.5,2.2-0.3,6.8,3,10.9c3.2,4,7.3,6.2,9.8,5.4L474.8,641.9L474.8,641.9z M471.4,718.2"+
                    "L471.4,718.2l-52-125.5c4.8-4,8-10,8-16.7c0-12-9.7-21.8-21.8-21.8c-12,0-21.7,9.8-21.7,21.8c0,7.3,3.6,13.8,9.2,17.7l-51.9,125"+
                    "c-0.1,0.1-0.1,0.3-0.1,0.4l-0.2,0.5l0.1,0c-0.3,1-0.5,2-0.5,3.1c0,5.4,4.3,9.7,9.6,9.7c5.3,0,9.6-4.3,9.6-9.6l12.3-30.9h69.3"+
                    "l12.2,28.8c-0.2,0.7-0.2,1.3-0.2,2c0,5.3,4.3,9.6,9.6,9.6c5.3,0,9.7-4.3,9.7-9.6C472.5,721.1,472.1,719.6,471.4,718.2L471.4,718.2"+
                    "z M405.7,607.6l16.1,38.1h-31.3L405.7,607.6L405.7,607.6z M376.7,680.2l8.7-21.8h41.8l9.2,21.8H376.7L376.7,680.2z"
                )
                .attr("transform",'scale(' + that.rotateScaleN +','+that.rotateScaleN+ ')');

            this.textAll.append("g")
                .attr({
                    "fill":"#ffffff",
                    "opacity":.4,
                    "transform":"translate("+-this.padding.left*2.7+","+-this.padding.top*2+")"
                })
                .append("use")
                .attr("xlink:href","#myDefsImg");
        }
        this.drawImg.select(".textAll")
            .attr("opacity",0)
            .transition()
            .delay(500)
            .duration(800)
            .attr("opacity",1);
        this.textAll.select("g").selectAll("text")
            .attr("opacity",0)
            .transition()
            .delay(500)
            .duration(800)
            .attr("opacity",1);
    },
    drawInnerImg: function(){
        var that = this;

        // /*--------------------绘制最内层-----------*/
        // this.drawImg.selectAll(".myDefs").remove();
        this.drawImg.selectAll(".drawInner").remove();
        this.svg.select(".myDefs").remove();
        this.svg.selectAll("defs").remove();

        var drawInner = this.drawImg.append("g")
            .attr("class","drawInner")
            .attr("transform","translate("+(this.width/2+this.padding.left)+","+(this.height/2+2*this.padding.top)+")");

        if(this.innerLayer_1){
            var inner_pie=d3.layout.pie()       // 定义饼状布局
                .value(function(d){  return d; });       // 值访问器

            var inner_piedata=inner_pie(this.innerData);

            var inner_arcs = drawInner.selectAll("g")
                .data(inner_piedata)
                .enter()
                .append("g")
                .each(function(d){
                    var margin = 0.02;
                    d.startAngle += margin;
                    d.endAngle -= margin;
                });
            var inner_arc = d3.svg.arc()
                .innerRadius(this.innerCircle_1)
                .outerRadius(this.outerCircle_1);

            inner_arcs.append("path") // 内圈
                .attr("fill",this.colorInner[0])
                .transition()
                .duration(1000)
                .attrTween("d",function(d,i){
                    var start = {
                        startAngle:inner_piedata[i].startAngle,
                        endAngle: inner_piedata[i].startAngle
                    };
                    var finish = {
                        startAngle:inner_piedata[i].startAngle,
                        endAngle: inner_piedata[i].endAngle
                    };
                    var i = d3.interpolate(start, finish);
                    return function (d) {
                        return inner_arc(i(d));
                    }
                });
        }
        /*----------------------绘制弧线---------*/
        if(this.innerLayer_2){
            var circleLi = d3.svg.arc()
                .outerRadius(this.outerCircle_2)        // 设置外半径访问器
                .innerRadius(this.innerCircle_2);

            var drawCircleLi=drawInner.append("path")
                .attr("fill",this.colorInner[1])
                .transition()
                .duration(800)
                .attrTween('d', function () {
                    var start = {
                        startAngle:11*Math.PI/8,
                        endAngle:11*Math.PI/8
                    };
                    var finish={
                        startAngle:11*Math.PI/8,        // 设置开始角度访问器
                        endAngle:3*Math.PI     // 设置结束角度访问器
                    };
                    var i = d3.interpolate(start, finish);
                    return function (d) {
                        return circleLi(i(d));
                    }
                });
        }
        /*------------------------绘制最外层defs------------*/
        if(this.outerLayer){
            var myDefs=this.svg.append("defs")
                .attr("class","myDefs")
                .append("path")
                .attr("id","myDefs")
                .attr("stroke","none")
                .attr("d","M39.36,92.94,22,82.94a165.66,165.66,0,0,0-9.57,19.43L31,110A145.58,145.58,0,0,1,39.36,92.94Z"
                    + "M90,290l-1.34-.83L87,288.06l-1.71-1.12L84,286.09q-1.34-.91-2.65-1.84L81,284a146.09,146.09,0,0,1-14.59-11.9l-.18-.17q-1.23-1.14-2.43-2.32l-.62-.61q-1-.94-1.9-1.91l-1-1-1.43-1.52-1.3-1.42-1-1.17L55,260.24l-.74-.87q-.85-1-1.69-2l-.55-.68q-.88-1.09-1.74-2.21a145.75,145.75,0,0,1-11.23-16.83q-.74-1.29-1.45-2.6l-.71-1.31q-.82-1.55-1.61-3.12c-.12-.24-.24-.34-.36-.58A146,146,0,0,1,20,166h0v-.47a145.74,145.74,0,0,1,5.53-39.93l-9.61-2.74A155.74,155.74,0,0,0,10,165.53v.17H0a165.45,165.45,0,0,0,22.22,82.71l8.66-5A155.7,155.7,0,0,0,42.2,260.29l-7.93,6.1a165.35,165.35,0,0,0,48.55,42.54l5-8.67a154.71,154.71,0,0,0,34.9,14.81l2.74-9.62a144.76,144.76,0,0,1-33.55-14.38Z"
                    +"M238.28,291.54l10,17.31a166.32,166.32,0,0,0,60.54-60.57l-17.31-10A146.29,146.29,0,0,1,238.28,291.54Z"
                    +"M331,165H311v.19h0v.35c0,1.54,0,3.07-.09,4.6,0,.37,0,.74,0,1.1q-.08,2.1-.22,4.2l0,.37q-.17,2.45-.43,4.89l0,.23q-.25,2.42-.59,4.82v.1q-.7,5-1.73,9.89l0,.11q-1,4.85-2.38,9.61A144.71,144.71,0,0,1,300,221.2l18.49,7.66A164.67,164.67,0,0,0,331,165.45Z"
                    +"M229.34,296.31a143.59,143.59,0,0,1-44.84,13.49q-2.16.28-4.34.5l-.57.06c-1.31.13-2.63.23-4,.32l-.8.06c-1.27.08-2.54.14-3.81.19l-.87,0q-2.3.07-4.59.08v20a167.54,167.54,0,0,0,21.58-1.41l-1.3-9.92a153.5,153.5,0,0,0,47.87-14.41Z"
                    +"M225.57,33q1.91.86,3.79,1.79l.37.18q2.07,1,4.12,2.11l.06,0q1.9,1,3.76,2.09A146.05,146.05,0,0,1,281,77.06q1.19,1.55,2.34,3.13l.44.6q1.3,1.81,2.54,3.65l0,0q1.29,1.92,2.52,3.89l.34.55q1,1.56,1.9,3.14,2.69,4.59,5.06,9.39l9-4.41c-1.59-3.24-3.31-6.41-5.11-9.52l8.66-5a166.51,166.51,0,0,0-12.07-18l-7.92,6.11A156.08,156.08,0,0,0,243,30.71L248,22A165.49,165.49,0,0,0,165.49,0H165V20h.47a145.75,145.75,0,0,1,59.6,12.76Z"
                    +"M165.2,10a157.9,157.9,0,0,0-20.25,1.34l-1.31-9.91A163.82,163.82,0,0,0,82.51,22.3l10,17.3q4.43-2.57,9-4.81Q105.24,33,109,31.4l.07,0q1.73-.73,3.46-1.41l1-.38,2.51-.94,1.52-.54,1.9-.65,2-.65,1.27-.39c.85-.26,1.7-.52,2.55-.77l.08,0a145,145,0,0,1,20.84-4.33,147.82,147.82,0,0,1,19-1.27Z"
                )
                .attr("transform",function(){
                    var myTranslate='translate('+-(that.width/3.6-that.padding.left*2.9)+','+-(that.width/3.6-that.padding.top*2.9)+')';
                    var myRotate= 'scale(' + that.rotateScaleW +','+that.rotateScaleW+ ')';
                    return myRotate +''+ myTranslate ;
                });

            drawInner.append("g")
                .attr({
                    "class":"myDefs",
                    "fill":this.colorInner[0]
                })
                .append("use")
                .attr("xlink:href","#myDefs");

            drawInner.append("circle")
                .attr({
                    "class":"myDefs",
                    "r":this.innerRadiusCircleW,
                    "fill":"none",
                    "stroke":"#4981bc"
                });

            drawInner.selectAll(".myDefs")
                .attr("transform","rotate(" + (45)+ ")")
                .transition()
                .duration(800)
                .attr("transform","rotate(" + (0)+ ")")
        }
    },
    drawCircleData : function(){
        var that = this;

        for(var j=0;j<this.series.aba_data.length;j++){
            this.drawData(j);
        }
    },
    repaint: function(){
        var that = this;

// this.interval = setInterval(function(){
        that.drawInnerImg();
        that.drawCenterText();
        that.drawCircleData();
// },20000);
    }
});// 扶贫 环形图结束

// 扶贫 十三五脱贫-脱贫目标开始
zhnx.chart.fpTargetTableL1 = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.fpTargetTableL1.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.fpTargetTableL1,
	_defaults : {},
	
	svgImg: undefined,
	htmlGroup: undefined,
	
	init: function(args){
		this.baseInit(args.selector);
		this.drawInit();
		this.drawSvg();
		this.drawHtmlText();
	},
	drawInit: function(){
		this.svgImg = this.svg.append("g");
		this.htmlGroup = $("<div/>").css({
			"position": "absolute",
			"width": 2*this.width/3,
			"height": this.height - this.height / 2,
			"left": this.width/6,
			"top": this.height/4,
			"font-family": "Microsoft Yahei",
			"text-align" :"justify" 
		});
		
		this.selector.append(this.htmlGroup);
	},
	drawSvg: function(){
		var that = this;
		zhnx.utils.loadSvg("svg/rect/shisanwutuopintuopinmubiao.svg", function(importedNode){
			var plane = that.svgImg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 0,
				"height": 372
			})
			.transition()
			.duration(800)
			.ease("circle-out")
			.attr({
				"width": 838.5
			});
		});
	},
	drawHtmlText: function(){
		var that = this;
		var imgDivH = this.htmlGroup
		.css({
			"color": "white",
			"float": "left",
			"font-size": "1.8em",
			"opacity": 0
		})
		.append('<div><span style="font-size: 1.3em;line-height: 1.5em">全区58.12万人口全面脱贫: </span><span style="color: rgba(255,255,255,0.7);line-height: 1.5em">三年集中脱贫攻坚，两年巩固提高，力争提前实现行业标准下的58.12万' +
				'农村贫困人口全部脱贫，贫困人口稳定实现不愁吃、不愁穿、不愁冬季取暖和保障义务教育、医疗、住房和安全饮水。</span></div>')
		 .delay(1000)
		.animate({
			"opacity": 1
		},800)
		
	}
});

zhnx.chart.fpTargetTableL2 = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.fpTargetTableL2.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.fpTargetTableL2,
	_defaults : {},
	
	svgImg: undefined,
	htmlGroup: undefined,
	
	init: function(args){
		this.baseInit(args.selector);
		this.drawInit();
		this.drawSvg();
		this.drawHtmlText();
	},
	drawInit: function(){
		this.svgImg = this.svg.append("g");
		this.htmlGroup = $("<div/>").css({
			"position": "absolute",
			"width": 2*this.width/3,
			"height": this.height - this.height / 2,
			"left": this.width/6,
			"top": this.height/4,
			"font-family": "Microsoft Yahei",
			"text-align" :"justify" 
		});
		this.selector.append(this.htmlGroup);
	},
	drawSvg: function(){
		var that = this;
		zhnx.utils.loadSvg("svg/rect/shisanwutuopintuopinmubiao.svg", function(importedNode){
			var plane = that.svgImg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 0,
				"height": 372
			})
			.transition()
			.duration(800)
			.ease("circle-out")
			.attr({
				"width": 838.5
			});
		});
	},
	drawHtmlText: function(){
		var that = this;
		var imgDivH = this.htmlGroup
		.css({
			"color": "white",
			"font-size": "1.8em",
			"opacity": 0
		})
		.append('<div><span style="font-size: 1.3em;line-height: 1.5em">到2020年，实现800个贫困村销号,</span><span style="color: rgba(255,255,255,0.7);line-height: 1.5em">抓住关键，紧盯贫困人口减少和农民收入增加两大服务，引导资金、技术和人才聚焦，集中发力，' +
				'增强贫困地区自我发展能力。要建立扶贫资金投入长效机制，使贫困地区、贫困群众早脱贫、早受益。</span></div>')
        .delay(2000)
		.animate({
			"opacity": 1
		},800)
	}
});

zhnx.chart.fpTargetTableR1 = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.fpTargetTableR1.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.fpTargetTableR1,
	_defaults : {},
	
	svgImg: undefined,
	htmlGroup: undefined,
// svgWidth: undefined,
// svgHeight: undefined,
	
	init: function(args){
		this.baseInit(args.selector);
		
// this.svgWidth = 838.5;
// this.svgHeight = 372;
		
		this.drawInit();
		this.drawSvg();
		this.drawHtmlText();
	},
	drawInit: function(){
		this.svgImg = this.svg.append("g");
		this.htmlGroup = $("<div/>").css({
			"position": "absolute",
			"width": 2*this.width/3,
			"height": this.height - this.height / 2,
			"left": this.width/6,
			"top": this.height/4,
			"font-family": "Microsoft Yahei",
			"text-align" :"justify" 
		});
		this.selector.append(this.htmlGroup);
	},
	drawSvg: function(){
		var that = this;
		zhnx.utils.loadSvg("svg/rect/shisanwutuopintuopinmubiao.svg", function(importedNode){
			var plane = that.svgImg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 0,
				"height": 372
			})
			.transition()
			.duration(800)
			.ease("circle-out")
			.attr({
				"width": 838.5
			});
		});
	},
	drawHtmlText: function(){
		var that = this;
		var imgDivH = this.htmlGroup
		.css({
			"color": "white",
			"font-size": "1.8em",
			"opacity": 0
		})
		.append('<div><span style="font-size: 1.3em;line-height: 1.5em">9个贫困县（区）农民人均支配收入增长幅度高于全区平均水平，</span><span style="color: rgba(255,255,255,0.7);line-height: 1.5em">实施"五个一批"精准扶贫，实现贫困人口精准脱贫，实施十三项脱贫行动计划，增强贫困地区发展能力，'+
				'严格执行《条例》，真正形成专项扶贫、行业扶贫、社会扶贫共同推进的大扶贫格局，确保脱贫攻坚顺利推进。</span></div>')
	    .delay(3000)
		.animate({
			"opacity": 1
		},800)
	}
});

zhnx.chart.fpTargetTableR2 = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.fpTargetTableR2.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.fpTargetTableR2,
	_defaults : {},
	
	svgImg: undefined,
	htmlGroup: undefined,
	
	init: function(args){
		this.baseInit(args.selector);
		this.drawInit();
		this.drawSvg();
		this.drawHtmlText();
	},
	drawInit: function(){
		this.svgImg = this.svg.append("g");
		this.htmlGroup = $("<div/>").css({
			"position": "absolute",
			"width": 2*this.width/3,
			"height": this.height - this.height / 2,
			"left": this.width/6,
			"top": this.height/4,
			"font-family": "Microsoft Yahei",
			"text-align" :"justify" 
		});
		this.selector.append(this.htmlGroup);
	},
	drawSvg: function(){
		var that = this;
		zhnx.utils.loadSvg("svg/rect/shisanwutuopintuopinmubiao.svg", function(importedNode){
			var plane = that.svgImg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 0,
				"height": 372
			})
			.transition()
			.duration(800)
			.ease("circle-out")
			.attr({
				"width": 838.5
			});
		});
	},
	drawHtmlText: function(){
		var that = this;
		var imgDivH = this.htmlGroup
		.css({
			"color": "white",
			"font-size": "1.8em",
			"opacity": 0
		})
		.append('<div id="testDiv"><span style="font-size: 1.3em;line-height: 1.5em">到2020年，贫困地区农民人均可支配收入达1万元以上，</span><span style="color: rgba(255,255,255,0.7);line-height: 1.5em">基本公共服务主要指标达到或接近全区平均水平，消除贫困、改善民生、逐步实现共同富裕，'+
		'确保与全国人民一同迈入全面小康社会。</span></div>')
		.delay(4000)
		.animate({
			"opacity": 1
		},800)
	}
});// 扶贫 十三五脱贫-脱贫目标结束

// 扶贫 十三五脱贫-十三项行动计划开始
zhnx.chart.fpActionPlane = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.fpActionPlane.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.fpActionPlane,
	_defaults : {},
	
	svgImg: undefined,
	htmlGroup: undefined,
	animateTime: undefined,	// 每个出现时间
	smallSvgWidth: undefined,
	smallSvgHeight: undefined,
	bigSvgWidth: undefined,
	bigSvgHeight: undefined,
	
	init: function(args){
		this.animateTime = 200;
		this.smallSvgWidth = 598.3;
		this.smallSvgHeight = 114;
		this.bigSvgWidth = 815;
		this.bigSvgHeight = 114;
		
		this.baseInit(args.selector);
		this.drawInit();
		this.drawSvg();
		this.drawHtmlText();
	},
	drawInit: function(){
		this.svgImg = this.svg.append("g");
		this.htmlGroup = $("<div/>").css({
			"position": "absolute",
			"width": this.width,
			"height": this.height,
			"left": 0,
			"top": 0,
			"font-family": "Microsoft Yahei"
		});
		this.selector.append(this.htmlGroup);
	},
	drawSvg: function(){
		var that = this;
		// 左侧
			zhnx.utils.loadSvg("svg/rect/shisanxiangxingdong_01.svg", function(importedNode){
				for(var i = 0;i<4;i++){
				var plane = that.svgImg.node().appendChild(importedNode.cloneNode(true));
					d3.select(plane).attr({
						"width": that.smallSvgWidth,
						"height": that.smallSvgHeight,
						"y":function(){return 160+i*(114+25)},
						"opacity":0,
						"x": "140px"
					})
					.transition()
					.delay(function(){return i*that.animateTime})
					.duration(this.animateTime)
					.ease("circle-out")
					.attr({
						"opacity":1
					})
				}
			});
		// 中间
			zhnx.utils.loadSvg("svg/rect/shisanxiangxingdong_02.svg", function(importedNode){
				for(var i = 0;i<5;i++){
				var plane = that.svgImg.node().appendChild(importedNode.cloneNode(true));
					d3.select(plane).attr({
						"width": that.bigSvgWidth,
						"height": that.bigSvgHeight,
						"y":function(){return 100+i*(114+25)},
						"opacity":0,
						"x": "900px"
					})
					.transition()
					.delay(function(){return that.animateTime*4+i*that.animateTime})
					.duration(this.animateTime)
					.ease("circle-out")
					.attr({
						"opacity":1
					})
				}
			});
// //右侧
			zhnx.utils.loadSvg("svg/rect/shisanxiangxingdong_01.svg", function(importedNode){
				for(var i = 0;i<4;i++){
				var plane = that.svgImg.node().appendChild(importedNode.cloneNode(true));
					d3.select(plane).attr({
						"width": that.smallSvgWidth,
						"height": that.smallSvgHeight,
						"y":function(){return 160+i*(114+25)},
						"opacity":0,
						"x": "1900px"
					})
					.transition()
					.delay(function(){return that.animateTime*(4+5)+i*that.animateTime})
					.duration(this.animateTime)
					.ease("circle-out")
					.attr({
						"opacity":1
					})
				}
			});
	},
	drawHtmlText: function(){
		var that = this;
		// 左侧
			var imgDivHL = this.htmlGroup
			.css({
				height:this.height,
				"color": "white",
				"font-size": "30px",
				"text-anchor": "middle",
				"margin": 0
			})
			.append('<ul class="divUl" style="width:760px; text-align: center;margin-left: 70px;margin-top: 200px;float: left">'+
					'<li style="list-style: none; margin-top:-10px;">实施<span style="font-size: 36px; font-weight: bold; ">金融</span>脱贫行动计划</li>'+
					'<li style="list-style: none; margin-top:90px;">实施<span style="font-size: 36px; font-weight: bold; ">旅游</span>脱贫行动计划</li>'+
					'<li style="list-style: none; margin-top:90px;">实施<span style="font-size: 36px; font-weight: bold; ">交通</span>脱贫行动计划</li>'+
					'<li style="list-style: none; margin-top:100px">实施<span style="font-size: 36px; font-weight: bold; ">能力提升</span>脱贫行动计划</li>'+
					'<ul/>')
				// 中间
			var imgDivHC = this.htmlGroup
			.append('<ul class="divUl" style="width:900px;text-align: center;margin-left: 70px;margin-top: 130px;float: left">'+
					'<li style="list-style: none;margin-top:0px">实施<span style="font-size: 36px; font-weight: bold; ">水利和电气</span>脱贫行动计划</li>'+
					'<li style="list-style: none; margin-top:90px">实施<span style="font-size: 36px; font-weight: bold; ">光伏和电力</span>脱贫行动计划</li>'+
					'<li style="list-style: none; margin-top:100px">实施<span style="font-size: 36px; font-weight: bold; ">医疗保障和卫生</span>脱贫行动计划</li>'+
					'<li style="list-style: none; margin-left: -80px; margin-top:90px">实施<span style="font-size: 36px; font-weight: bold; ">"三留守"和贫困残疾人关爱</span>行动计划</li>'+
					'<li style="list-style: none; margin-left: -80px; margin-top:90px">实施<span style="font-size: 36px; font-weight: bold; ">危窑危房改造和人居环境整治</span>行动计划</li>'+
					'<ul/>')
			// 右侧
			var imgDivHR = this.htmlGroup
			.append('<ul class="divUl" style="width:760px;text-align: center;margin-left: 1820px;margin-top: -550px;float: left">'+
					'<li style="list-style: none; margin-top:10px;margin-left: 40px">实施<span style="font-size: 36px; font-weight: bold; ">文化</span>脱贫行动计划</li>'+
					'<li style="list-style: none; margin-top:90px">实施<span style="font-size: 36px; font-weight: bold; ">社会帮扶</span>脱贫行动计划</li>'+
					'<li style="list-style: none; margin-top:90px">实施<span style="font-size: 36px; font-weight: bold; ">"互联网"</span>脱贫行动计划</li>'+
					'<li style="list-style: none; margin-top:90px">实施<span style="font-size: 36px; font-weight: bold; ">人才和科技</span>脱贫行动计划</li>'+
					'<ul/>')
					$(".divUl li").css("opacity",0);
					that.animateAn(0);
					
	},
	animateAn : function(index){
		var that = this;
		 $(".divUl li:eq("+index+")").animate({"opacity":1},that.animateTime,"",function(){
		        that.animateAn(index+1)
		    })
	}
});

zhnx.chart.fpActionPlane_pad = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.fpActionPlane_pad.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.fpActionPlane_pad,
	_defaults : {},
	init: function(args){
		var that = this;
		this.baseInit(args.selector);
		zhnx.utils.loadSvg("svg/pad/fupin/shiSanWuPlan.svg", function(importedNode){
			var plane = that.svg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 1100,
				"height": 1471
			});
		});
	}
});
// 扶贫 十三五脱贫-十三项行动计划结束

// Q--fuPin-end






















// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 气象云组件
//

// 时间原型
zhnx.chart.weatherTimeAndAddress=function(args){
	this.args=$.extend({},this._defaults,args);
	this.init(this.args);
}

zhnx.chart.weatherTimeAndAddress.prototype=$.extend({},zhnx.chart.base,{
	constructor:zhnx.chart.weatherTimeAndAddress,//构造器
	_defaults:{},
	backGroundSvgUrl:"svg/weather/border/timeandaddress.svg",

	init:function(args){
		
		this.baseInit(this.args.selector);
		this.city=args.cityName;
		this.bgSvg = this.svg.append("g");
		this.drawBackGround();
	},
	//绘制svg背景
	//bgSvg,drawTime,
	 drawBackGround: function(){
	        var that = this;
	       
	        zhnx.utils.loadSvg(that.backGroundSvgUrl, function(importedNode){
	        	var width=300, height =68;
	            var plane = that.bgSvg.node().appendChild(importedNode.cloneNode(true));
	            
	            var SVGcontainer = d3.select(plane).attr({
	                "width": 300,
	                "height":68
	            });
	            //plane.node().appendChild(importedNode.cloneNode(true));
	            that.drawTime(SVGcontainer, width, height);
	        });
	  },
	  
	  drawTime:function(SVGcontainer,width,height){
		  var that=this;
		  // 城市
		  var cityText=SVGcontainer.append("text")
		                .attr({
		                	"x":25,
		                	"y":height-25,
		                	"fill":d3.rgb(255,255,255).toString(),
		                	"font-size":"24px",
		                	"font-family":"KARNIVOL",
		                	"text-anchor":"center"
		                }).text(function(){
		                	return that.city;
		                });
		  // 时间
		  var timeOfText=SVGcontainer.append("text")
		                      .attr({
		                    	  "x": 125,
		      	                  "y": height - 22,
		                    	  "fill":d3.rgb(255,255,255).toString(),//白色
		                    	  "font-size":"34px",
		                    	  "font-family":"KARNIVOL",
		                    	  "text-anchor":"start"
		                      })
		                      .text(function(){
		                    	  return zhnx.utils.getTimeString(new Date());
		                      });
		  
		  //设置时间间隔调用函数，时间在跳动
		  setInterval(function(){
			  timeOfText.text(function(){return zhnx.utils.getTimeString(new Date());});
		  },1000);
	  },
	  
	 
});
// 温度计/风速/降雨量
zhnx.chart.weatherThermometer = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherThermometer.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherThermometer,
	_defaults : {},

	maxC : 50,
	maxW : 15,
	maxR : 10,
	colors : ["#FD0000", "#00beff", "#fff"],
	borderUrl : "svg/weather/border/Highest_Minimum_TemperatureSmallbox.svg",
	
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.type = args.type;
		this.title = args.title;
		this.value = args.value;
		this.imgUrl = args.imgUrl;
		
		
		this.addBackground();
		this.addBasicArea();
		this.drawData();
	},
	
	drawData : function(){
		switch(this.type){
		case "T" :/* 温度 */
			this.drawTemp();
			break;
		case "W" : /* 风速 */
			this.drawWind();
			break;
		case "R" :/* 降雨量 */
			this.drawRain();
			break;
		}
	},
	
	drawWind : function(){
		var that = this;
		var wind = this.svg.append("g").attr("class", "wind");
		zhnx.utils.loadSvg(this.imgUrl, function(importedNode){
			var plane = wind.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 20,
				"y" : 27,
	            "width": 0.2*that.width,
	            "height": 0.7*that.height
			});
		});
		wind.append("text").attr({
			"x" : 180,
			"y" : 65,
			"fill" : that.colors[2],
			"font-size" : 48,
			"font-weight" : "bold",	
			"text-anchor" : "middle",
			"dy" : ".35em"
    	}).each(function(){
    		d3.select(this).append("tspan").attr({
    			"font-size": 48
    		}).text(that.value);
    		d3.select(this).append("tspan").attr({
    			"dx": 10,
    			"font-size": 30
    		}).text("m/s");
    	});
		var h = 50*this.value/this.maxW;
		wind.append("rect").attr({
			"x" : 20,
			"y" : 107,
			"width" : 7,
			"height" : 0,
			"fill" : that.colors[2]			
		}).transition().duration(500).attr({
			"y" : 107-h,
			"height" : h
		});
	},
	
	drawRain : function(){
		var that = this;
		var rain = this.svg.append("g").attr("class", "rain");
		zhnx.utils.loadSvg(this.imgUrl, function(importedNode){
			var plane = rain.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : -20,
				"y" : 25,
	            "width": 0.55*that.width,
	            "height": 0.7*that.height
			});
		});
		rain.append("text").attr({
			"x" : 180,
			"y" : 65,
			"fill" : that.colors[2],
			"font-size" : 48,
			"font-weight" : "bold",	
			"text-anchor" : "middle",
			"dy" : ".35em"
    	}).each(function(){
    		d3.select(this).append("tspan").attr({
    			"font-size": 48
    		}).text(that.value);
    		d3.select(this).append("tspan").attr({
    			"dx": 10,
    			"font-size": 30
    		}).text("mm");
    	});
		var h = 95*this.value/this.maxR;
		rain.append("rect").attr({
			"x" : 48,
			"y" : 125,
			"width" : 22,
			"height" : 0,
			"fill" : that.colors[1],
			"opacity" : 0.8
		}).transition().duration(500).attr({
			"y" : 125-h,
			"height" : h
		});
	},
	
	drawTemp : function(){
		var that = this;
		var temp = this.svg.append("g").attr("class", "temp");
		zhnx.utils.loadSvg(this.imgUrl, function(importedNode){
			var plane = temp.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : -20,
				"y" : 25,
	            "width": 0.55*that.width,
	            "height": 0.7*that.height
			});
		});
		temp.append("text").attr({
			"x" : 180,
			"y" : 65,
			"fill" : that.colors[2],
			"font-size" : 48,
			"font-weight" : "bold",	
			"text-anchor" : "middle",
			"dy" : ".35em"
    	}).each(function(){
    		d3.select(this).append("tspan").attr({
    			"font-size": 48
    		}).text(that.value);
    		d3.select(this).append("tspan").attr({
    			"dx": 10,
    			"font-size": 30
    		}).text("℃");
    	});
		var h = 95*(this.value+30)/(this.maxC+30);
		temp.append("rect").attr({
			"x" : 57.5,
			"y" : 115,
			"width" : 5,
			"height" : 0,
			"fill" : that.colors[0]			
		}).transition().duration(500).attr({
			"y" : 115-h,
			"height" : h
		});
		temp.append("circle").attr({
			"cx" : 60,
			"cy" : 118,
			"r" : 5,
			"fill" : that.colors[0]	
		});
	},
	
	addBasicArea : function(){
		var that = this;
		var basic = this.svg.append("g").attr("class", "basicArea");
// basic.append("text").attr({
// "x" : 170,
// "y" : 80,
// "fill" : that.colors[2],
// "font-size" : 48,
// "font-weight" : "bold",
// "text-anchor" : "end",
// "dy" : ".35em"
// }).text(that.value);
		basic.append("text").attr({
			"x" : 170,
			"y" : 115,
			"fill" : that.colors[1],
			"font-size" : 20,
			"font-weight" : "normal",
			"text-anchor" : "middle",
			"dy" : ".35em"
		}).text(that.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(this.borderUrl, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 288,
	            "height": 146
			});
		});
	},
	
});

// 空气质量指数
zhnx.chart.weatherAQI = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherAQI.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherAQI,
	_defaults : {},
	
	color : ["#ffaa00", "#fff"],
	AQIColor : ["#6BCD06", "#FBD029", "#FE8802", "#FE0000", "#CD0104", "#960552", "#62021E"],
	AQIScale : [0, 50, 100, 150, 200, 300, 500, 600],
	AQILevel : ["优", "良", "轻度", "中度", "重度", "严重"],	
	bgURL : "svg/weather/border/QualityWaiFrame.svg",
	pmURL : "svg/weather/pm25icon.svg",
	slideURL : "svg/weather/slideBoder.svg",
	
	site : undefined,
	Date : undefined,
	AQIValue : undefined,
	PMValue : undefined,
	xScale : undefined,
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.site = args.site;
		this.Date = args.Date;
		this.AQIValue = args.AQIValue;
		this.PMValue = args.PMValue;
		this.xScale = d3.scale.linear().domain([0, 600]).range([50, 390]);
		
		this.addBackground();
		this.addPMIcon();
		this.addBasicText();
		this.addTitle();
		this.drawPM25();
		this.drawAQI();
	},
	
	drawAQI : function(){
		var that = this;
		var aqi = this.svg.append("g").attr("class", "aqi");
		var str = this.site + "空气质量指数";
		aqi.append("text").attr({
			"x" : 180,
			"y" : 75,
			"fill" : that.color[0],
			"font-size" : 12,
			"text-anchor" : "middle"
		}).text(str);
		aqi.append("text").attr({
			"x" : 150,
			"y" : 115,
			"fill" : that.color[0],
			"font-size" : 30,
			"text-anchor" : "middle",
			"font-weight" : "bold"
		}).text(that.AQIValue);
		var index = 0;
		for(var i=0; i<that.AQIScale.length; ++i){
			if((that.AQIValue > that.AQIScale[i]) && (that.AQIValue < that.AQIScale[i+1])){
				index = i;
				break;
			}
		}
		aqi.append("text").attr({
			"x" : 220,
			"y" : 115,
			"fill" : that.color[0],
			"font-size" : 20,
			"text-anchor" : "middle",
			"font-weight" : "bold"
		}).text(that.AQILevel[index]);
		zhnx.utils.loadSvg(this.slideURL, function(importedNode){
			var plane = aqi.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : that.xScale(that.AQIValue),
				"y" : 155,
	            "width": 56,
	            "height": 40
			});
		});
		aqi.append("text").attr({
			"x" : that.xScale(that.AQIValue)+28,
			"y" : 188,
			"fill" : "#fff",
			"font-size" : 16,
			"text-anchor" : "middle"
		}).text(that.AQIValue);
	},
	
	drawPM25 : function(){
		var that = this;
		var pm25 = this.svg.append("g").attr("class", "pm25");
		pm25.append("text").attr({
			"x" : 360,
			"y" : 118,
			"fill" : that.color[0],
			"font-size" : 22,
			"text-anchor" : "middle",
			"font-weight" : "bold"
		}).text(that.PMValue+"ug/m³");
	},
	
	addBasicText : function(){
		var that = this;
		var basic = this.svg.append("g").attr("class", "basic");
		basic.append("text").attr({
			"x" : 50,
			"y" : 100,
			"fill" : "#43CDF2",
			"font-size" : 36,
			"font-weight" : "bold"
		}).text("AQI");
		basic.append("text").attr({
			"x" : 320,
			"y" : 78,
			"fill" : that.color[0],
			"font-size" : 16,			
		}).text("PM2.5浓度");
		basic.selectAll("rect").data(this.AQIColor).enter().append("rect").attr({
			"x" : function(d, i){return that.xScale(that.AQIScale[i]);},
			"y" : 150,
			"width" : function(d, i){return that.xScale(that.AQIScale[i+1])-that.xScale(that.AQIScale[i]);},
			"height" : 8,
			"fill" : function(d){return d;},
			"opacity" : 1
		});
		basic.selectAll("line").data(this.AQIColor).enter().append("line").attr({
			"x1" : function(d, i){return that.xScale(that.AQIScale[i]);},
			"y1" : 143,
			"x2" : function(d, i){return that.xScale(that.AQIScale[i]);},
			"y2" : 148,
			"stroke" : "#fff",
			"stroke-width" : "1px"
		});
		basic.append("g").selectAll("text").data(this.AQIColor).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(that.AQIScale[i]);},
			"y" : 140,
			"fill" : "#fff",
			"font-size" : 10,
			"text-anchor" : "middle",
			
		}).text(function(d, i){return that.AQIScale[i]});
	},
	
	addPMIcon : function(){
		var that = this;
		var pm = this.svg.append("g").attr("class", "icon");
		zhnx.utils.loadSvg(this.pmURL, function(importedNode){
			var plane = pm.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 270,
				"y" : 60,
	            "width": 50,
	            "height": 50
			});
		});
	},
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(this.bgURL, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": that.width,
	            "height": that.height
			});
		});
	},
	
	addTitle : function(){
		var that = this;
		var str = this.site + this.Date + "空气质量";
		this.svg.append("g").attr("class", "title").append("text").attr({
			"x" : 135,
			"y" : 40,
			"fill" : that.color[0],
			"text-anchor" : "middle",
			"font-weight" : "bold",
			"font-size" : 16
		}).text(str);
	}
	
});


// 天气趋势预报
zhnx.chart.weatherTrendForecast = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherTrendForecast.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherTrendForecast,
	_defaults : {},
	
	titleURL : "svg/weather/border/HeadlineFrame.svg",
	borderURL : "svg/weather/border/ReportBorder.svg",
	color : ["#ffaa00", "#124999", "#00beff", "#ffe91d", "#06f99b"],
	aqiValue : [0, 50, 100, 150, 300, 500, 600],
	
	site : undefined,
	week : undefined,
	Date : undefined,
	weather : undefined,
	Temp : undefined,
	wind : undefined,
	PM25 : undefined,
	AQI : undefined,
	xScale : undefined,
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.chartArea = this.svg.append("g").attr("class", "chartArea");
		this.site = args.site;
		this.week = args.week;
		this.Date = args.Date;
		this.weather = args.weather;
		this.Temp = args.Temp;
		this.wind = args.wind;
		this.RH = args.RH;
		this.Pressure = args.pressure;
		this.xScale = d3.scale.linear().domain([1, 7]).range([90, 880]);
		this.selectedIndex = 0;
	
		
		this.addTitle();
		this.addBackground();
		this.addClickArea();
		this.selectChange(this.selectedIndex);
	},
	
	addClickArea : function(){
		var that = this;
		var clickArea = this.svg.append("g").attr("class", "clickArea");
		clickArea.selectAll("rect").data(that.week).enter().append("rect").attr({
			"x" : function(d, i){return that.xScale(i+1)-55;},
			"y" : 135,
			"width" : 110,
			"height" : 220,
			"fill" : that.color[0],
			"cursor" : "pointer",
			"opacity" : 0
		}).on("click", function(d, i){
			that.selectChange(i);
			that.selectChangeCommand({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.selectChange(" + i + ")",
    			execMode: "evalfunc"
    		});
		});
	},
	
	selectChange : function(index){
		// 保存当前点击索引
		this.selectedIndex = index;
		
		var that = this;
		this.chartArea.selectAll("*").remove();
		this.drawBasicArea();
		this.chartArea.select(".Rect"+index).transition().duration(1000).attr({
			"x" : that.xScale(index+1)-55,
			"width" : 110,
			"height" : 220,
		});
		this.chartArea.select(".Week"+index).transition().duration(1000).ease("bounce").attr({
			"x" : that.xScale(index+1),
			"y" : 250,
			"font-size" : 24
		});
		this.chartArea.select(".Date"+index).transition().duration(1000).ease("bounce").attr({
			"x" : that.xScale(index+1),
			"y" : 280,
			"font-size" : 18
		});
		this.chartArea.select(".Temp"+index).transition().duration(500).ease("bounce").attr({
			"y" : 480,
		}).transition().duration(500).ease("bounce").attr({
			"x" : 400,
			"font-size" : 40,
			"fill" : that.color[0]
		});
		this.chartArea.select(".Wind"+index).transition().duration(500).ease("bounce").attr({
			"y" : 510,
		}).transition().duration(500).ease("bounce").attr({
			"x" : 700,
			"font-size" : 18,
			"fill" : that.color[3]
		});
		this.chartArea.select(".WindValue"+index).transition().duration(500).ease("bounce").attr({
			"y" : 510,
		}).transition().duration(500).ease("bounce").attr({
			"x" : 820,
			"font-size" : 18,
			"fill" : that.color[3]
		});
		var basic = this.chartArea.append("g").attr("class", "basic");
		basic.append("text").attr({
			"x" : 950,
			"y" : 455,
			"text-anchor" : "middle",
			"dy" : ".35em",
			"opacity" : 0
		}).each(function(){
    		d3.select(this).append("tspan").attr({
    			"font-size": 18,
    			"fill" : that.color[2]
    		}).text("相对湿度");
    		d3.select(this).append("tspan").attr({
    			"dx": 50,
    			"font-size": 18,
    			"fill" : that.color[2]
    		}).text(that.RH[index]+"%")
		}).transition().delay(500).duration(500).attr("opacity", 1).attr("x", 750);
		basic.append("text").attr({
			"x" : 950,
			"y" : 560,
			"text-anchor" : "middle",
			"dy" : ".35em",
			"opacity" : 0
		}).each(function(){
    		d3.select(this).append("tspan").attr({
    			"font-size": 18,
    			"fill" : that.color[4]
    		}).text("气压");
    		d3.select(this).append("tspan").attr({
    			"dx": 50,
    			"font-size": 18,
    			"fill" : that.color[4]
    		}).text(that.Pressure[index]+"kPa")
		}).transition().delay(500).duration(500).attr("opacity", 1).attr("x", 750);
		zhnx.utils.loadSvg("svg/weather/icons/RH.svg", function(importedNode){
			var plane = basic.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 930,
				"y" : 435,
	            "width": 25,
	            "height": 35,
	            "opacity" : 0
			}).transition().delay(500).ease("bounce").attr("x", 620).attr("opacity", 1);
		});
		zhnx.utils.loadSvg("svg/weather/icons/windSpeedDirection.svg", function(importedNode){
			var plane = basic.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 930,
				"y" : 485,
	            "width": 25,
	            "height": 35,
	            "opacity" : 0
			}).transition().delay(500).ease("bounce").attr("x", 620).attr("opacity", 1);
		});
		zhnx.utils.loadSvg("svg/weather/icons/pressure.svg", function(importedNode){
			var plane = basic.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 930,
				"y" : 540,
	            "width": 25,
	            "height": 35,
	            "opacity" : 0
			}).transition().delay(500).ease("bounce").attr("x", 620).attr("opacity", 1);
		});
	},
	selectChangeCommand: function(commandArgs){
		
	},
	drawBasicArea : function(){
		this.addDate();
		this.addWeather();
		this.addTemp();
		this.addWind();
	},
	
	addWind : function(){
		var that = this;
		var wind = this.chartArea.append("g").attr("class", "wind");
		wind.selectAll("text").data(that.wind).enter().append("text").attr({
			"class" : function(d, i){return "Wind"+i;},
			"x" : function(d, i){return that.xScale(i+1)-30;},
			"y" : 340,
			"fill" : "#fff",
			"font-size" : 12,
			"font-weight" : "light",
			"text-anchor" : "middle"
		}).text(function(d){return d[0];});
		wind.append("g").selectAll("text").data(that.wind).enter().append("text").attr({
			"class" : function(d, i){return "WindValue"+i;},
			"x" : function(d, i){return that.xScale(i+1)+30;},
			"y" : 340,
			"fill" : "#fff",
			"font-size" : 12,
			"font-weight" : "light",
			"text-anchor" : "middle"
		}).text(function(d){return d[1];});
	},
	
	addTemp : function(){
		var that = this;
		var temp = this.chartArea.append("g").attr("class", "temp");
		temp.selectAll("text").data(that.Temp).enter().append("text").attr({
			"class" : function(d, i){return "Temp"+i;},
			"x" : function(d, i){return that.xScale(i+1);},
			"y" : 315,
			"fill" : "#fff",
			"font-size" : 20,
			"text-anchor" : "middle",
			"font-family" : "KARNIVOL"
		}).text(function(d){return d[0]+"℃ / "+d[1]+"℃";});
	},
	
	addWeather : function(){
		var that = this;
		var weatherArea = this.chartArea.append("g").attr("class", "weatherArea");
		var icons = weatherArea.selectAll("g").data(that.weather).enter().append("g");
		icons.each(function(d, i){
			var temp = d3.select(this);
			zhnx.utils.loadWeatherIconSvg(d, 50, 50, temp.node(), function(plane){
				var icons = d3.select(plane).attr({
					"class" : "Icon" + i,
					"x" : that.xScale(i+1) - 25,
					"y" : 210
				});
				var textStr = d3.select(plane).attr("zn");
				var text = temp.append("text").attr({
					"class" : "IconText"+i,
					"x" : that.xScale(i+1),
					"y" : 280,
					"fill" : that.color[0],
					"text-anchor" : "middle",
					"font-size" : 14
				}).text(textStr);
				if(that.selectedIndex == i){
					icons.transition().duration(500).ease("bounce").attr("y", 430).transition().duration(500).ease("bounce").attr({
						"x" : 100,
						"width" : 140,
						"height" : 140
					});
					text.transition().duration(500).ease("bounce").attr("y", 550).transition().duration(500).ease("bounce").attr({
						"x" : 400,
						"font-size" : 24
					});
				}
			});
		});	
	},

	addDate : function(){
		var that = this;
		var date = this.chartArea.append("g").attr("class", "date");
		date.selectAll("rect").data(that.week).enter().append("rect").attr({
			"class" : function(d, i){return "Rect"+i;},
			"x" : function(d, i){return that.xScale(i+1)-35;},
			"y" : 135,
			"width" : 70,
			"height" : 55,
			"fill" : that.color[1],
			"rx" : 5,
			"ry" : 5,
		});
		date.selectAll("text").data(that.week).enter().append("text").attr({
			"class" : function(d, i){return "Week"+i;},
			"x" : function(d, i){return that.xScale(i+1);},
			"y" : 158,
			"fill" : that.color[0],
			"text-anchor" : "middle",
			"font-size" : 18
		}).text(function(d){return d;});
		date.append("g").selectAll("text").data(that.Date).enter().append("text").attr({
			"class" : function(d, i){return "Date"+i;},
			"x" : function(d, i){return that.xScale(i+1);},
			"y" : 180,
			"fill" : "#fff",
			"text-anchor" : "middle",
			"font-size" : 12
		}).text(function(d){return d;});
	},
	
	addTitle : function(){
		var that = this;
		var title = this.svg.append("g").attr("class", "title");
		zhnx.utils.loadSvg(this.titleURL, function(importedNode){
			var plane = title.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 0,
				"y" : 0,
	            "width": 295,
	            "height": 70
			});
		});
		title.append("text").attr({
			"x" : 150,
			"y" : 35,
			"fill" : that.color[0],
			"font-size" : 24,
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(that.site+"天气趋势预报");
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(this.borderURL, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 0,
				"y" : 80,
	            "width": 960,
	            "height": 555
			});
		});
	}
});

// 气象云地图
/*
 * type:'METAR',text:"天气实况" type:'Precipitation',text:"逐时降水图"
 * type:'Wind',text:"逐时风向图" type:'Temperature',text:"逐时气温图"
 * type:'Forecast',text:"天气预报" type:'TrafficZone',text:"交通落区预报"
 * type:'TrafficRoad',text:"路段天气预报" type:'TrafficWeatherStation',text:"交通气象站"
 * type:'Poverty',text:"扶贫地图"
 * type:'EduStu',text:"学生人数（人）"
 * type:'EduSch',text:"学校数量（所）"
 * type:'EduMFR',text:"男女生比例"
 * type:'ResPla',text:"三通两平台"
 * type:'healthRegPla',text:"区域卫生平台"
 */
zhnx.chart.weatherMap = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherMap.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherMap,
	_defaults : {},
	series: [],
	curSer: null,
	common:{
		cuMpType:null,     // 当前地图类型
		cuMpTypeName:null, // 当前地图类型名称
		cuCityName:null,   // 当前城市名称
		cuCityCode:null,   // 当前城市编码
		clickable: true,   // 可点击的
		zoomable: true,    // 可缩放的
		frame: 'normal'    // 外框类别
	},
	flowFrame:{
		display: true,
		flowBtnGroup:null,
		flowBtn:null,
		flowFrameGroup:null,
		flowFrame:null,
		switch_btns:null,
		flowFrameContentWidth:193,
		padding:15,
		focusWidth:172,
		focusHeight:44,
		notFocusWidth:140,
		notFocusHeight:33
	},
	title:{
		titleGroup:null
	},
	unitScale:{
		unitScaleGroup:null
	},
	description:{
		svg:null
	},
	alert:{
		svg:null,
		timeout:null
	},
	switchPCMap:{
		switchPCGroup:null
	},
	detail:{
		detailGroup:null
	},
	describeAll:{//总体情况
		describeAllSvg:null,
		initDescribeAll_time:1000,
//		BgWidth:788,
//		BgHeight:288
	},
	bg:{
		
	},
	mouse: {
		mouseGroup: null
	},
	map: {
		svgGroup:null,     // 地图在一个单独的SVG组中
		svg:null,          // 地图在一个单独的SVG中
		bgGroup:null,      // 背景组
		bg:null,
		fgGroup:null,      // 前景组
		fg:null,
		mpGroup:null,      // 地图组
		mpPaths:null,
		cyGroup:null,      // 区县组
		cyPaths:{},
		cyPathsIsdisplay: false, // 区县地图是否显示
		selectedIsCity: false, // 当前选中城市
		dataGroup:null,    // 数据组
		fgDataGroup:null,
		bgOffsetX:"78.7071533203125px",
		bgOffsetY:"25.702539443969727px",
		nxCode: '640000000000',
		mapFile: '640000000000',
		cyMpFiles: ['640100000000', '640200000000', '640300000000', '640400000000', '640500000000'],
		center: [105.9961, 37.3096],
		scale : 8455,
		zoom: 1,
		scaleLimit:{
			min: 1,
			max: 5
		},
		focusColor:"#9020e0",
		color:["#1a58e2", "#0d50b2", "#0044cc", "#0d50b2", "#1a58e2"],
		bgWidth:502.5,
		bgHeight:777.2,
		initTran:null,
		initScal:null,
		projection:null,
		geoPath:null,
		currentZoomScale: 1,
		currentTranslate: [0, 0],
		cities: [
	         {"name": "吴忠市", "cp": [106.853, 37.3755], "code": "640300000000"},
	         {"name": "中卫市", "cp": [105.4028, 36.9525], "code": "640500000000"},
	         {"name": "固原市", "cp": [106.1389, 35.9363], "code": "640400000000"},
	         {"name": "银川市", "cp": [106.3586, 38.1775], "code": "640100000000"},
	         {"name": "石嘴山市", "cp": [106.4795, 39.0015], "code": "640200000000"}
	    ],
	    focusCityPosColor: "#FFCF01",
	    cityPosColor: "#00beff",
	    cityPosCircle: [],
	    
	},
	Precipitation:{
		dataPath:null,
		dataGroup:null
	},
	Forecast:{
		lng:null,
		lat:null,
		dataGroup:null,
		detailData:null
	},
	TrafficRoad:{
		cuRoadType:"H",
		dataGroup:null,
		cuRoadName:null,
		cuRoadSectionName:null
	},
	TrafficWeatherStation: {
		dataGroup:null,
	},
	init: function(){
//		console.info(this.args);
		// 基本初始化
		this.baseInit(this.args.selector);
		// 其它参数
		if(this.args.flowFrameDisplay == false){
			this.flowFrame.display = false;
		} else {
			this.flowFrame.display = true;
		}
		// 当前地图数据初始化
		this.initCurSeries(0);
		// 如果是pad则修改属性值
		if(this.args.isPad){
			this.svg.attr({
				"viewBox": "0 0 736 940"
			});
			this.width = 736;
			this.height = 940;
		}
		if(this.args.frame){
			this.common.frame = this.args.frame;
		}else{
			this.common.frame = 'normal';
		}
		// 初始化节点信息
		this.drawInit();
		// 初始化外部背景框
		this.initBgFrame();
		// 初始化操作浮窗
		this.initFlowFrame(this.args.mapTypes);
		// 地图背景
		this.drawMap(this.args.mapTypes[0]);
		// 告警信息
		this.initAlert();
		
		//总体情况描述数据
		this.zhanKaiData = this.args.zhanKaiData !=undefined? this.args.zhanKaiData: "";
	},
	initCurSeries: function(i){
		this.series = this.args.series != undefined ? this.args.series : [];
		this.curSer = this.series[i];
	},
	drawInit: function(){
		var that = this;
		// 鼠标控制层
		this.mouse.mouseControllerGroup = this.svg.append("g").attr({
			"class": "mouse_controller_group"
		});
		this.mouse.mouseControllerGroup.append("rect").attr({
			"fill": "rgba(0,0,0,0)",
			"strork": "none",
			"width": that.width,
			"height": that.height,
			"x": 0,
			"y": 0
		});
		// 地图节点
		this.map.svgGroup = this.svg.append("g").attr({
			"class": "map_group"
		});
		// 鼠标控制显示层
		this.mouse.mouseViewGroup = this.svg.append("g").attr({
			"class": "mouse_view_group"
		});
		// 浮云窗
		this.flowFrame.flowGroup = this.svg.append("g").attr({
			"class": "flowFrame"
		});
		// 标题
		this.title.titleGroup = this.svg.append("g").attr({
			"class": "title"
		});
		// 告警信息
		this.alert.svg = this.svg.append("svg").attr({
			"class": "alert"
		});
		// 区市切换按钮
		this.switchPCMap.switchPCGroup = this.svg.append("g").attr({
			"class": "switchPCMap"
		});
		// 描述信息
		this.description.svg = this.svg.append("svg").attr({
			"class": "description"
		});
		// 单位标尺
		this.unitScale.unitScaleGroup = this.svg.append("g").attr({
			"class": "unitScale"
		});
		// 前景数据层
		this.detail.detailGroup = this.svg.append("g").attr({
			"class": "detail"
		});
		//总体情况描述
		this.describeAll.describeAllSvg = this.svg.append("svg").attr({
			"class": "describeAll"
		})
	},
	drawMap: function(mapInfo){
		// 当前地图类型
		this.common.cuMpType = mapInfo.type;
		this.common.cuMpTypeName = mapInfo.text;
		this.common.cuCityName = null;
		this.common.cuCityCode = null;
		// 地图是否可操作
		this.common.clickable = true;
		if(mapInfo.clickable == false){
			this.common.clickable = mapInfo.clickable;
		}
		this.common.zoomable = true;
		if(mapInfo.zoomable == false){
			this.common.zoomable = mapInfo.zoomable;
		}
		// 标题
		this.initTitle();
		// 描述信息
		this.TrafficRoad.cuRoadName = null;
		this.initDescription();
		//总体情况描述
		this.initDescribeAll();
		// 区市切换按钮
		this.initSwitchPCMap();
		// 地图单位标尺
		this.initUnitScale();
		// 初始化地图容器
		this.initMapContainer();
		this.initMap();
        this.initMapBg();
        this.initMapFg();
        // 地图数据
        this.initMapData();
	},
	initMapContainer: function(){
		this.map.svgGroup.selectAll("*").remove();
		// 地图SVG
		this.map.svg = this.map.svgGroup.append("svg").attr({
			"width": 660,
			"height": 810
		});
		// 背景层
		this.map.bgGroup = this.map.svg.append("g");
		// 绘制层
		this.map.mpGroup = this.map.svg.append("g");
		this.map.cyGroup = this.map.svg.append("g");
		// 数据层
		this.map.dataGroup = this.map.svg.append("g");
		// 前景层
		this.map.fgGroup = this.map.svg.append("g");
		// 城市名称
		this.map.cityGroup = this.map.svg.append("g");
		// 前景数据层
		this.map.fgDataGroup = this.map.svg.append("g");
	},
	initMap: function(){
		var that = this, transX = 330, transY = 417.5;
		that.map.projection = d3.geo.mercator().translate([transX, transY]).center(this.map.center).scale(this.map.scale);
		that.map.geoPath = d3.geo.path().projection(that.map.projection);
		// 城市地图
        d3.json(zhnx.resource.getUrl("data/" + this.map.mapFile + ".json"), function (errot, root) {
        	// 地图路径
        	that.map.mpPaths = that.map.mpGroup.selectAll("path").data(root.features).enter()
	            .append("path").attr({
	                "stroke": "#12b7ff",
	                "stroke-width": 1,
	                "fill": function(d, i){
	                	return that.map.color[i];
	                },
	                "d": that.map.geoPath
	            }).on("click", function(d, i){
	            	that.mapClick(i);
	    			that.mapClickCommand({
	        			type: 'click',
	        			context: that.id,
	        			contextType: 'chaObj',
	        			execString: "that.mapClick('" + i + "')",
	        			execMode: "evalfunc"
	        		});
	    			d3.event.stopPropagation();
	            });
        	// 城市名称
        	that.map.cityPosCircle = [];
        	that.map.cityGroup.selectAll("g").data(that.map.cities).enter()
	            .append("g").attr({
	            	"transform": function(d, i){
	            		var x = that.map.projection(d.cp)[0];
	            		var y = that.map.projection(d.cp)[1];
	            		return "translate(" + x + "," + y + ")";
	            	}
	            }).each(function(d, i){
	            	// 城市坐标点
	            	var circles = d3.select(this).selectAll("circle").data(d3.range(5)).enter()
	            	.append("circle").attr({
	                	"cx": 0,
	        	        "cy": 0,
	        	        "r": function(d, i){
	        	        	return i * 4;
	        	        },
	                    "stroke": that.map.cityPosColor,
	                    "stroke-width": 2,
	                    "stroke-opacity": function(d, i){
	        	        	return 1 - i * 0.25;
	        	        },
	                    "fill": "none"
	                });
	            	that.map.cityPosCircle.push(circles);
	            	zhnx.utils.timer(function(){
	            		var rofunc = function(r){
	            			r += 0.05;
	            			o = 1 - r / 16;
	            			o = o == 'none' ? 0 : o;
	            			return r > 16 ? [0, 1] : [r, o];
	            		};
	            		circles.attr({
	            			"r": function(d, i){
	            				var r = parseFloat(d3.select(this).attr("r"));
	            				return rofunc(r)[0];
	            			},
	            			"stroke-opacity": function(d, i){
	            				var r = parseFloat(d3.select(this).attr("r"));
	            				return rofunc(r - 0.05)[1];
	            			},
	            		});
	            	});
	            	// 城市名称
	            	d3.select(this).append("rect")
	                .attr({
	                	"class": "point",
	                	"x": 16,
	                    "y": - 14,
	                    "width": 90,
	                    "height": 25,
	                    "fill": "#284e6b",
	                    "fill-opacity": 0.6,
	                    "stroke": "#20BFFD",
	                    "stroke-width": 1,
	                    "stroke-dasharray": "30,3,8,20"
	                });
	            	d3.select(this).append("text")
	            	.attr({
	                	"x": 16 + 90 / 2,
	                    "y": - 14 + 25 / 2,
			            "fill": d3.rgb(255, 168, 1).toString(),
			            "font-size": 14,
			            "font-weight": "bold",
			            "font-family": "Microsoft Yahei",
			            "text-anchor": "middle",
			            "dominant-baseline": "middle"
	            	}).text(d.name);
	            });
        	// 缩放功能
        	that.map.initTran = that.map.projection.translate(), that.map.initScal = that.map.projection.scale();
        	var zoomstartPosit;
        	var zoom = d3.behavior.zoom()
        		.scaleExtent([that.map.scaleLimit.min, that.map.scaleLimit.max])
				.center([transX, transY])
				.on('zoomstart', function(d){
					zoomstartPosit = d3.mouse(this);
				})
				.on('zoom', function(d){
					var mousePosit = d3.mouse(this), initPosit = that.map.initTran, scale = d3.event.scale;
					var translate = [initPosit[0] - mousePosit[0], initPosit[1] - mousePosit[1]];
					if(that.map.currentZoomScale == scale){
						translate = [mousePosit[0] - zoomstartPosit[0] + that.map.currentTranslate[0], mousePosit[1] - zoomstartPosit[1] + that.map.currentTranslate[1]];
					}
					that.mapZoom(translate, scale);
					that.mapZoomCommand({
		    			type: 'zoom',
		    			context: that.id,
		    			contextType: 'chaObj',
		    			execString: "that.mapZoom(" + JSON.stringify(translate) + "," + scale + ")",
		    			execMode: "evalfunc"
		    		});
					// 重置开始点
					zoomstartPosit = mousePosit;
				})
				.on('zoomend', function(){
					
				});
        	that.svg.call(zoom).on('dblclick.zoom', null);
        	/*
        	// 拖拽命令
        	that.mouse.ellipse = that.mouse.mouseViewGroup.append("ellipse").attr({
        		"stroke": "#FFF",
        		"fill": "none",
        		"stroke-width": 1
        	});
        	var startPosit;
        	var drag = d3.behavior.drag()
    		.on("dragstart", function(){
    			if(that.map.currentZoomScale != that.map.scaleLimit.min){
    				return false;
    			}
    			startPosit = d3.mouse(this);
    			that.mapSelectCollector('dragstart', startPosit, startPosit);
    			that.mapSelectCollectorCommand({
	    			type: 'drag',
	    			context: that.id,
	    			contextType: 'chaObj',
	    			execString: "that.mapSelectCollector('dragstart'," + JSON.stringify(startPosit) + "," + JSON.stringify(startPosit) + ")",
	    			execMode: "evalfunc"
	    		});
    		})
    		.on("drag", function(){
    			if(that.map.currentZoomScale != that.map.scaleLimit.min){
    				return false;
    			}
    			var mousePosit = d3.mouse(this);
    			that.mapSelectCollector('drag', startPosit, mousePosit);
    			that.mapSelectCollectorCommand({
	    			type: 'drag',
	    			context: that.id,
	    			contextType: 'chaObj',
	    			execString: "that.mapSelectCollector('drag'," + JSON.stringify(startPosit) + "," + JSON.stringify(mousePosit) + ")",
	    			execMode: "evalfunc"
	    		});
    		})
    		.on("dragend", function(){
    			if(that.map.currentZoomScale != that.map.scaleLimit.min){
    				return false;
    			}
    			var mousePosit = d3.mouse(this);
    			that.mapSelectCollector('dragend', startPosit, mousePosit);
    			that.mapSelectCollectorCommand({
	    			type: 'drag',
	    			context: that.id,
	    			contextType: 'chaObj',
	    			execString: "that.mapSelectCollector('dragend'," + JSON.stringify(startPosit) + "," + JSON.stringify(mousePosit) + ")",
	    			execMode: "evalfunc"
	    		});
    		});
        	that.mouse.mouseControllerGroup.call(drag);
        	*/
        	// 默认点击银川
            switch (that.common.cuMpType) {
    		case "METAR":
    		case "Forecast":
    			that.mapClick(3);
    			break;
            }
        });
        // 各区县地图
    	// 默认点击银川
        switch (that.common.cuMpType) {
		case "Poverty":
			for(var i = 0; i < that.map.cyMpFiles.length; i++){
				that.initCityMap(that.map.cyMpFiles[i]);
			}
			break;
        }
        // 动画
        this.map.svgGroup.attr({
        	"transform": "translate(" + that.width + ", 73)"
        }).transition().duration(500).attr({
        	"transform": "translate(38, 73)"
        });
	},
	mapSelectCollector: function(type, mouseStartPosit, mouseEndPosit){
		var that = this;
		switch(type){
		case 'dragstart':
			that.mouse.ellipse.attr({
        		"stroke": "#FFF",
        		"cx": mouseStartPosit[0],
        		"cy": mouseStartPosit[1],
        		"rx": 0,
        		"ry": 0
			});
			break;
		case 'drag':
			that.mouse.ellipse.attr({
        		"cx": function(){
        			if(mouseEndPosit[0] - mouseStartPosit[0] > 0){
        				return (mouseEndPosit[0] - mouseStartPosit[0]) / 2 + mouseStartPosit[0];
        			}else{
        				return (mouseStartPosit[0] - mouseEndPosit[0]) / 2 + mouseEndPosit[0];
        			}
        		},
        		"cy": function(){
        			if(mouseEndPosit[1] - mouseStartPosit[1] > 0){
        				return (mouseEndPosit[1] - mouseStartPosit[1]) / 2 + mouseStartPosit[1];
        			}else{
        				return (mouseStartPosit[1] - mouseEndPosit[1]) / 2 + mouseEndPosit[1];
        			}
        		},
        		"rx": function(){
        			return Math.abs(mouseEndPosit[0] - mouseStartPosit[0]) / 2;
        		},
        		"ry": function(){
        			return Math.abs(mouseEndPosit[1] - mouseStartPosit[1]) / 2;
        		}
			});
			break;
		case 'dragend':
			that.mouse.ellipse.attr({
				"stroke": "none"
			});
			var allPoints = [], existInEllipse = false, selected = [];
			that.map.mpPaths.each(function(d, i){
				var d = d3.select(this).attr("d");
				d = d.replace("M", "").replace("Z", "")
				var onePathPoints = d.split("L");
				onePathPoints = d.split("L").map(function(d, i){
					return d.split(",");
				});
				var isIn = false, cx, cy, a = Math.abs(mouseEndPosit[0] - mouseStartPosit[0]) / 2, b = Math.abs(mouseEndPosit[1] - mouseStartPosit[1]) / 2;
    			if(mouseEndPosit[0] - mouseStartPosit[0] > 0){
    				cx = (mouseEndPosit[0] - mouseStartPosit[0]) / 2 + mouseStartPosit[0];
    			}else{
    				cx = (mouseStartPosit[0] - mouseEndPosit[0]) / 2 + mouseEndPosit[0];
    			}
    			if(mouseEndPosit[1] - mouseStartPosit[1] > 0){
    				cy = (mouseEndPosit[1] - mouseStartPosit[1]) / 2 + mouseStartPosit[1];
    			}else{
    				cy = (mouseStartPosit[1] - mouseEndPosit[1]) / 2 + mouseEndPosit[1];
    			}
				for(var n = 0; n < onePathPoints.length; n++){
					var fnxy = zhnx.utils.isPointInEllipse(parseFloat(onePathPoints[n][0]) + 38, parseFloat(onePathPoints[n][1]) + 73, cx, cy, a, b, -Math.PI);
					if(fnxy <= 0){
						isIn = true;
						existInEllipse = true;
						break;
					}
				}
				if(!isIn){
					d3.select(this).attr({
						"fill": "#FFF"
					});
					selected.push(false);
				}else{
					d3.select(this).attr({
						"fill": that.map.color[i]
					});
					selected.push(true);
				}
			});
			if(!existInEllipse){
    			that.map.mpPaths.each(function(d, i){
					d3.select(this).attr({
						"fill": that.map.color[i]
					});
    			});
			}
			that.mapSelectCollectorInner(selected);
			break;
		}
	},
	mapSelectCollectorInner: function(selected){
		var that = this, titles = [];
		for(var i = 0; i < that.map.cities.length; i++){
			if(selected[i]){
				titles.push(that.map.cities[i].name);
			}
		}
		if(titles.length > 0){
			that.initTitle(titles.join("、"));
		}else{
			that.initTitle();
		}
	},
	mapSelectCollectorCommand: function(commandArgs){
		
	},
	initCityMap: function(fileName){
		var that = this;
        d3.json(zhnx.resource.getUrl("data/" + fileName + ".json"), function (errot, root) {
        	// 地图路径
        	var cyPath = that.map.cyGroup.selectAll("path" + fileName).data(root.features).enter()
	            .append("path").attr({
	                "stroke": "none",
	                "stroke-width": 2,
	                "fill": "none",
	                "d": that.map.geoPath
	            }).on("click", function(d, i){
	            	that.mapClickCommand({
            			type: 'click',
            			context: 'widgetMap',
            			contextType: 'chaObj',
            			execString: "that.mapClick('" + zhnx.cityCodeAbbrs[d.properties.id] + "')",
            			execMode: "evalfunc"
            		});
					that.mapClickOuter(d.properties.id);
	    			d3.event.stopPropagation();
	            });
        	that.map.cyPaths[fileName] = cyPath;
        });
	},
	initMapBg: function(){
		var that = this;
		zhnx.utils.loadSvg("svg/weather/map/map_bg.svg", function(importedNode){
			var plane = that.map.bgGroup.node().appendChild(importedNode.cloneNode(true));
			that.map.bg = d3.select(plane).attr({
				"x": that.map.bgOffsetX,
				"y": that.map.bgOffsetY,
				"width": that.map.bgWidth,
				"height": that.map.bgHeight
			});
		});
	},
	initMapFg: function(){
		var that = this;
		zhnx.utils.loadSvg("svg/weather/map/map_fg.svg", function(importedNode){
			var plane = that.map.fgGroup.node().appendChild(importedNode.cloneNode(true));
			that.map.fg = d3.select(plane).attr({
				"x": that.map.bgOffsetX,
				"y": that.map.bgOffsetY,
				"width": that.map.bgWidth,
				"height": that.map.bgHeight,
				"pointer-events": "none"
			});
		});
	},
	initMapData: function(){
		var that = this;
		that.Precipitation.dataPath = null;
		switch (this.common.cuMpType) {
		case "Wind":
		case "Temperature":
		case "Precipitation":
			that.Precipitation.dataGroup = that.map.fgDataGroup.selectAll("g").data([{
				lng:105.7489013671875,
				lat:36.0779620797358,
				name:"西吉县",
				data:2,
				max:10,
				min:0,
				unit:"mm"
			},{
				lng:106.3037109375,
				lat:36.2354121683998,
				name:"原州县",
				data:4,
				max:10,
				min:0,
				unit:"mm"
			},{
				lng:106.57012939453125,
				lat:35.88014896488361,
				name:"彭阳县",
				data:2,
				max:10,
				min:0,
				unit:"mm"
			},{
				lng:106.083984375,
				lat:35.72644736208901,
				name:"隆德县",
				data:2,
				max:10,
				min:0,
				unit:"mm"
			},{
				lng:106.30096435546875,
				lat:35.51210746747797,
				name:"泾源县",
				data:2,
				max:10,
				min:0,
				unit:"mm"
			}]).enter().append("g").attr({
				"transform": function(d, i){
					return "translate(" + that.map.projection([d.lng, d.lat]).join(",") + ")";
				}
			}).each(function(d, i){
				var g = this;
            	var circles = d3.select(this).append("circle").attr({
                	"cx": 0,
        	        "cy": 0,
        	        "r": 3,
                    "stroke": d3.rgb(255, 168, 1).toString(),
                    "stroke-width": 0,
                    "stroke-opacity": 1,
                    "fill": d3.rgb(255, 168, 1).toString()
                });
            	d3.select(this).append("text")
            	.attr({
                	"x": 6,
                    "y": 2,
		            "fill": d3.rgb(255, 168, 1).toString(),
		            "font-size": 12,
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "start",
		            "dominant-baseline": "middle",
            		"transform": "scale(1)"
            	}).text(d.name).transition().duration(0).attr({
            		"transform": "scale(0.8)"
            	});
            	d3.select(this).append("rect")
                .attr({
                	"class": "point",
                	"x": -20,
                    "y": 8,
                    "width": 60,
                    "height": 16,
                    "fill": "#284e6b",
                    "fill-opacity": 0.6,
                    "stroke": "#20BFFD",
                    "stroke-width": 1,
                    "stroke-dasharray": "30,3,8,20"
                });
            	d3.select(this).append("text")
            	.attr({
                	"x": function(){
                		if(that.common.cuMpType == "Precipitation"){
                			return -20 + 58;
                		}
                		return -20 + 60 / 2 + 1;
                	},
                    "y": 8 + 8 + 5,
		            "fill": d3.rgb(255, 168, 1).toString(),
		            "font-size": 12,
		            "font-family": "Microsoft Yahei",
		            "text-anchor": function(){
                		if(that.common.cuMpType == "Precipitation"){
                			return "end";
                		}
                		return "middle";
		            },
		            "dominant-baseline": "middle",
            		"transform": "scale(1)"
            	}).text(function(){
            		if(that.common.cuMpType == "Temperature"){
            			return d.min + d.unit + "-" + d.max + d.unit;
            		}
            		return d.data + d.unit;
            	}).transition().duration(0).attr({
            		"transform": "scale(0.8)"
            	});
			});
        	if(that.common.cuMpType == "Precipitation"){
				zhnx.utils.loadSvg("svg/weather/map/precipitation_rain.svg", function(importedNode){
					that.Precipitation.dataGroup.each(function(){
						var g = this;
						var plane = g.appendChild(importedNode.cloneNode(true));
						d3.select(plane).attr({
							"x": -18,
							"y": 10,
							"width": 15,
							"height": 12
						});
					});
				});
        	}else if(that.common.cuMpType == "Wind"){
				zhnx.utils.loadSvg("svg/weather/map/wind_flag.svg", function(importedNode){
					that.Precipitation.dataGroup.each(function(){
						var g = this;
						var plane = g.appendChild(importedNode.cloneNode(true));
						d3.select(plane).attr({
							"x": -2,
							"y": -18,
							"width": 14,
							"height": 18
						});
					});
				});
        	}
			break;
		case "Forecast":
			that.Forecast.dataGroup = that.map.fgDataGroup.selectAll("g").data([{
				type:"Storm",
				typeName:"大风",
				level:1,
				levelName:"IV级",
				color:"Blue",
				colorName:"蓝色",
				ponderance:"heavier",
				ponderanceName:"强度一般",
				MB:"中宁县气象局",
				time:"2016/9/5 21:00:04",
				isWarning:true,
				content:"昨天（16日），今年第14号台风“莫兰蒂”给江苏、上海等地带来强风雨，今天，中央气象台凌晨2点钟对“莫兰蒂”停止编号，但第16号台风“马勒卡”将给东海大部等海域带来大风。",
				lng:105.684000,
				lat:37.484300
			},{
				type:"Storm",
				typeName:"大风",
				level:1,
				levelName:"IV级",
				color:"Blue",
				colorName:"蓝色",
				ponderance:"heavier",
				ponderanceName:"强度一般",
				MB:"石嘴山市气象局",
				time:"2016/9/5 21:00:04",
				isWarning:true,
				content:"昨天（16日），今年第14号台风“莫兰蒂”给江苏、上海等地带来强风雨，今天，中央气象台凌晨2点钟对“莫兰蒂”停止编号，但第16号台风“马勒卡”将给东海大部等海域带来大风。",
				lng:106.390000,
				lat:39.040000
			},{
				type:"Storm",
				typeName:"大风",
				level:1,
				levelName:"IV级",
				color:"Blue",
				colorName:"蓝色",
				ponderance:"heavier",
				ponderanceName:"强度一般",
				MB:"银川市气象局",
				time:"2016/9/5 21:00:04",
				isWarning:true,
				content:"昨天（16日），今年第14号台风“莫兰蒂”给江苏、上海等地带来强风雨，今天，中央气象台凌晨2点钟对“莫兰蒂”停止编号，但第16号台风“马勒卡”将给东海大部等海域带来大风。",
				lng:106.207700,
				lat:38.471300
			}]).enter().append("g").attr({
				"transform": function(d, i){
					return "translate(" + that.map.projection([d.lng, d.lat]).join(",") + ")";
				}
			}).each(function(d, i){
				var g = this;
				zhnx.utils.loadSvg("svg/weather/icons/warningPosition.svg", function(importedNode){
					var plane = g.appendChild(importedNode.cloneNode(true));
					d3.select(plane).attr({
						"class": "warningPositionIcon",
						"x": -7,
						"y": -20,
						"width":9.4,
						"height":15
					});
				});
				var iconFileName = "BlueStorm";
				zhnx.utils.loadSvg("svg/weather/icons/waring/" + iconFileName + ".svg", function(importedNode){
					var plane = g.appendChild(importedNode.cloneNode(true));
					var path = d3.select(plane).attr({
						"class": "warningIcon",
						"x": 10,
						"y": -34 - 20,
						"width": 38.6,
						"height": 34
					}).select("." + iconFileName + "_st0").attr({
						"stroke": "#28EBFD",
						"stroke-width": 4
					});
					// 外框动画
				    var totalLength = path.node().getTotalLength();
					path.attr({
						"stroke-dashoffset": totalLength,
						"stroke-dasharray": [totalLength / 10, totalLength / 10, totalLength / 10, ].join(" ")
					})
					zhnx.utils.timer(function(){
						path.attr({
							"stroke-dashoffset": function(){
								var cuLen = path.attr("stroke-dashoffset");
								cuLen -= 1;
								cuLen = cuLen < 0 ? totalLength : cuLen;
								return cuLen;
							}
						})
					});
				});
			}).style({
				"cursor": "pointer"
			}).on("click", function(d, i){
				that.forecastClick(i);
				that.forecastClickCommand({
	    			type: 'click',
	    			context: that.id,
	    			contextType: 'chaObj',
	    			execString: "that.forecastClick(" + i + ")",
	    			execMode: "evalfunc"
	    		});
			});
			break;
		case "TrafficRoad":
			this.initMapRoad(this.TrafficRoad.cuRoadType);
			break;
		case "TrafficWeatherStation":
			that.map.fgDataGroup.selectAll("*").remove();
			that.TrafficWeatherStation.dataGroup = that.map.fgDataGroup.selectAll("g").data([{
				lng:105.6939697265625,
		        lat:37.199706196161735,
		        name:"小洪沟"
			},{
				lng:106.14990234375,
		        lat:36.58024660149866,
		        name:"李旺"
			},{
				lng:105.97961425781249,
		        lat:36.910372213522535,
		        name:"同心"
			},{
				lng:106.14990234375,
		        lat:38.19502155795575,
		        name:"沿川子"
			},{
				lng:106.0345458984375,
		        lat:35.7688006602384,
		        name:"六盘山"
			},{
				lng:106.248779296875,
		        lat:36.00022956178002,
		        name:"固原"
			},{
				lng:106.2432861328125,
		        lat:36.28856319836237,
		        name:"三营"
			}]).enter().append("g").attr({
				"transform": function(d, i){
					return "translate(" + that.map.projection([d.lng, d.lat]).join(",") +")";
				}
			}).style({
				"cursor": "pointer"
			}).on("click", function(d, i){
				that.trafficWeatherStationClick(i);
			});
			that.trafficWeatherStationClick(-1);
			break;
		}
	},
	initMapRoad: function(HoGoS){
		var that = this;
		this.map.fgDataGroup.selectAll("*").remove();
		switch (HoGoS) {
		case "H":
			zhnx.utils.loadSvg("svg/weather/common/Expy.svg", function(importedNode){
				var plane = that.map.fgDataGroup.node().appendChild(importedNode.cloneNode(true));
				that.TrafficRoad.dataGroup = d3.select(plane).attr({
					"x": that.map.bgOffsetX,
					"y": that.map.bgOffsetY,
					"width": that.map.bgWidth,
					"height": that.map.bgHeight
				}).selectAll(".Expy_Road").on("click", function(){
					var g = d3.select(this);
					that.trafficRoadClick(g.attr("id"), g.attr("lng"), g.attr("lat"));
				});
			});
			break;
		case "G":
			zhnx.utils.loadSvg("svg/weather/common/NationalRoad.svg", function(importedNode){
				var plane = that.map.fgDataGroup.node().appendChild(importedNode.cloneNode(true));
				that.TrafficRoad.dataGroup = d3.select(plane).attr({
					"x": that.map.bgOffsetX,
					"y": that.map.bgOffsetY,
					"width": that.map.bgWidth,
					"height": that.map.bgHeight
				});
			});
			break;
		case "S":
			zhnx.utils.loadSvg("svg/weather/common/ProvincialRoad.svg", function(importedNode){
				var plane = that.map.fgDataGroup.node().appendChild(importedNode.cloneNode(true));
				that.TrafficRoad.dataGroup = d3.select(plane).attr({
					"x": that.map.bgOffsetX,
					"y": that.map.bgOffsetY,
					"width": that.map.bgWidth,
					"height": that.map.bgHeight
				});
			});
			break;
		}
	},
	initTrafficRoadOuter: function(HoGoS){
        this.TrafficRoad.cuRoadType = HoGoS;
        this.drawMap({
        	type:"TrafficRoad",
        	text:"路段天气预报"
        });
	},
	initTrafficWeatherStationOuter: function(statIdx){
        this.drawMap({
        	type:"TrafficWeatherStation",
        	text:"交通气象站"
        });
        this.trafficWeatherStationClick(statIdx);
	},
	mapClick: function(n){
		var that = this;
		if(!this.common.clickable){
			return false;
		}
		// 地图选中后的颜色
		switch (this.common.cuMpType) {
		case "METAR":
		case "Forecast":
		case "EduStu":
		case "EduSch":
		case "EduMFR":
			that.map.mpPaths.attr({
				"fill": function(d, i){
					return i == n ? that.map.focusColor : that.map.color[i];
				}
			});
			break;
		case "Poverty":
			// 隐藏区县地图
			for(var id in that.map.cyPaths){
				that.map.cyPaths[id].attr({
					"stroke": "none",
					"fill": "none"
				});
			}
			// 放大当前选择的地图
			var lng = that.map.cities[n].cp[0], lat = that.map.cities[n].cp[1];
			that.outerMapZoom(lng, lat, 2);
			that.map.cyPaths[that.map.cities[n].code].attr({
				"fill": "rgba(0,0,0,0)",
				"stroke": "#12b7ff"
			});
			that.map.cyPathsIsdisplay = true;
			break;
		}
		// 命令发送
		switch (this.common.cuMpType) {
		case "Poverty":
			that.mapClickCommand({
    			type: 'click',
    			context: 'widgetMap',
    			contextType: 'chaObj',
    			execString: "that.mapDbClick('" + zhnx.cityCodeAbbrs[that.map.cities[n].code] + "')",
    			execMode: "evalfunc"
    		});
			break;
		}
		// 地图选中后坐标点颜色
		that.map.cityPosCircle.map(function(d, i){
			d.attr({
				"stroke": function(){
					return i == n ? that.map.focusCityPosColor : that.map.cityPosColor;
				}
			});
		});
		// 当前城市名称
		this.common.cuCityName = that.map.cities[n].name;
		this.common.cuCityCode = that.map.cities[n].code;
		// 标题、描述区域
		switch (this.common.cuMpType) {
		case "METAR":
		case "Forecast":
		case "EduStu":
		case "EduSch":
		case "EduMFR":
			this.initTitle();
			this.initDescription();
			break;
		}
		// 地图切换按钮状态
		that.map.selectedIsCity = true;
		that.switchPCClick("C");
		// 其它操作
		that.mapClickInner();
		that.mapClickOuter(this.common.cuCityCode);
	},
	mapClickInner: function(){
		
	},
	mapClickOuter: function(cuCityCode){
		
	},
	mapClickCommand: function(commandArgs){
		
	},
	mapZoom: function(d3Trans, d3Scale){
		var that = this;
		if(!this.common.zoomable){
			return false;
		}
		// 当前缩放比例、平移
		that.map.currentZoomScale = d3Scale;
		that.map.currentTranslate = d3Trans;
		// 缩放比例为1时
		if(d3Scale == 1){
			that.map.projection.translate(that.map.initTran);
		}else{
			that.map.projection.translate([that.map.initTran[0] + d3Trans[0], that.map.initTran[1] + d3Trans[1]]);
		}
		that.map.projection.scale(that.map.initScal * d3Scale);
		that.map.mpPaths.attr("d", that.map.geoPath);
		for(var id in that.map.cyPaths){
			that.map.cyPaths[id].attr("d", that.map.geoPath);
		}
		// 城市名称
		that.map.cityGroup.selectAll("g").attr({
        	"transform": function(d, i){
        		var x = that.map.projection(d.cp)[0];
        		var y = that.map.projection(d.cp)[1];
        		return "translate(" + x + "," + y + ")";
        	}
		});
		// 地图位置
		var position = that.map.mpGroup.node().getBBox();
		// 背景大小
		that.map.bgGroup.select("svg").attr({
			"width": function(){
				return that.map.bgWidth * d3Scale;
			},
			"height": function(){
				return that.map.bgHeight * d3Scale;
			},
			"x": position.x + "px",
			"y": position.y + "px"
		});
		// 数据
		switch (this.common.cuMpType) {
		case "Wind":
		case "Temperature":
		case "Precipitation":
			that.Precipitation.dataGroup.attr({
				"transform": function(d, i){
					return "translate(" + that.map.projection([d.lng, d.lat]).join(",") + ")";
				}
			});
			break;
		case "Forecast":
			that.Forecast.dataGroup.attr({
				"transform": function(d, i){
					return "translate(" + that.map.projection([d.lng, d.lat]).join(",") + ")";
				}
			}).each(function(d, i){
				var isCenterPosition = false;
				if(that.Forecast.lng == d.lng && that.Forecast.lat == d.lat){
					isCenterPosition = true;
				}
				// 还原图标大小
				d3.select(this).select(".warningPositionIcon").attr({
					"width": d3Scale == 1 ? 9.4 : isCenterPosition ? 14 : 9.4,
					"height":d3Scale == 1 ? 15 : isCenterPosition ? 20 : 15
				});
				d3.select(this).select(".warningIcon").attr({
					"width": d3Scale == 1 ? 38.6 : isCenterPosition ? 58 : 38.6,
					"height": d3Scale == 1 ? 34 : isCenterPosition ? 51 : 34
				});
			});
			if(d3Scale == 1){
				that.detailCollapse();
			}
			break;
		case "TrafficRoad":
			that.map.fgDataGroup.select("svg").attr({
				"width": function(){
					return that.map.bgWidth * d3Scale;
				},
				"height": function(){
					return that.map.bgHeight * d3Scale;
				},
				"x": position.x + "px",
				"y": position.y + "px"
			});
			// 取消选中路段
			if(d3Scale == 1){
				that.map.fgDataGroup.selectAll("*").classed("Expy_Focus", false);
				that.descriptionCollapse();
			}
			break;
		case "TrafficWeatherStation":
			that.TrafficWeatherStation.dataGroup.attr({
				"transform": function(d, i){
					return "translate(" + that.map.projection([d.lng, d.lat]).join(",") + ")";
				}
			});
			if(d3Scale == 1){
				// that.trafficWeatherStationClick(-1);
			}
			break;
		case "Poverty":
			if(d3Scale == 1){
				// 隐藏区县地图
				for(var id in that.map.cyPaths){
					that.map.cyPaths[id].attr({
						"stroke": "none",
						"fill": "none"
					});
				}
				// 命令发送并调用外部操作
				if(that.map.cyPathsIsdisplay){
					that.mapClickCommand({
	        			type: 'click',
	        			context: 'widgetMap',
	        			contextType: 'chaObj',
	        			execString: "that.mapDbClick('NX')",
	        			execMode: "evalfunc"
	        		});
					that.mapClickOuter(that.map.nxCode);
				}
				that.map.cyPathsIsdisplay = false;
			}
			break;
		case "EduStu":
		case "EduSch":
		case "EduMFR":
		case "ResPla":
			if(d3Scale == 1){
				if(that.map.selectedIsCity){
					that.switchPCClick("P");
				}
				that.map.selectedIsCity = false;
			}
			break;
		}
		// 前景
		that.map.fgGroup.select("svg").attr({
			"width": function(){
				return that.map.bgWidth * d3Scale;
			},
			"height": function(){
				return that.map.bgHeight * d3Scale;
			},
			"x": position.x + "px",
			"y": position.y + "px"
		});
	},
	mapZoomCommand: function(commandArgs){
		
	},
	outerMapZoom: function(lng, lat, scale){
		var that = this;
		that.map.projection.translate(that.map.initTran).scale(that.map.initScal);
		var x = (that.map.initTran[0] - that.map.projection([lng, lat])[0]) * scale;
		var y = (that.map.initTran[1] - that.map.projection([lng, lat])[1]) * scale;
		var tempX = 0, xStep = x / 20, tempY = 0, yStep = y / 20, tempScale = 1, scaleStep = (scale - tempScale) / 20;
		var compute = d3.interpolate(tempX, x);
		zhnx.utils.timer(function(){
			tempX += xStep;
			tempX = Math.abs(tempX) > x ? x : tempX;
			tempY += yStep;
			tempY = Math.abs(tempY) > y ? y : tempY;
			tempScale += scaleStep;
			tempScale = Math.abs(tempScale) > scale ? scale : tempScale;
			
			that.mapZoom([tempX, tempY], tempScale);
			if(tempX == x && tempY == y && tempScale == scale){
				return true;
			}
		});
		// 保存当前经纬度--天气预报使用
		switch (this.common.cuMpType) {
		case "Forecast":
			that.Forecast.lng = lng;
			that.Forecast.lat = lat;
			that.Forecast.dataGroup.each(function(d, i){
				if(that.Forecast.lng == d.lng && that.Forecast.lat == d.lat){
					that.Forecast.detailData = d;
					that.initDetail();
				}
			});
			break;
		};
	},
	forecastClick: function(idx){
		var that = this;
		that.Forecast.dataGroup.filter(function(d, i){
			return idx == i ? this : null;
		}).each(function(d, i){
			that.outerMapZoom(d.lng, d.lat, 2);
			that.Forecast.detailData = d;
			that.initDetail();
			if(d3.event != null){
				d3.event.stopPropagation();
			}
		});
	},
	forecastClickCommand: function(commandArgs){
		
	},
	trafficRoadClick: function(id, lng, lat){
		var that = this;
		this.map.fgDataGroup.selectAll("*").classed("Expy_Focus", false);
		d3.select("#" + id).classed({
			"Expy_Focus": true
		}).each(function(){
			that.TrafficRoad.cuRoadName = d3.select(this).attr("roadName");
			that.TrafficRoad.cuRoadSectionName = d3.select(this).attr("roadSectionName");
		});
		this.initDescription();
		this.outerMapZoom(lng, lat, 3);
	},
	trafficWeatherStationClick: function(idx){
		var that = this;
		zhnx.utils.loadSvg("svg/weather/common/WeatherStationPosition.svg", function(importedNode){
			that.TrafficWeatherStation.dataGroup.each(function(d, i){
				var g = this;
				d3.select(g).selectAll("*").remove();
				var plane = g.appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"x": -10,
					"y": -28.2,
					"width": 21.9,
					"height":28.2
				});
				d3.select(g).append("text").attr({
					"x": 15,
					"y": -14,
					"fill": "#FFF",
					"font-size": 14,
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "start",
		            "dominant-baseline": "middle"
				}).text(d.name);
			}).filter(function(d, i){
				return idx == i ? this : null;
			}).each(function(d, i){
				var g = this;
				zhnx.utils.loadSvg("svg/weather/common/WeatherStationPositionFocus.svg", function(importedNode){
					d3.select(g).selectAll("*").remove();
					var plane = g.appendChild(importedNode.cloneNode(true));
					d3.select(plane).attr({
						"x": -10,
						"y": -28.2,
						"width": 43.8,
						"height":56.4
					});
					d3.select(g).append("text").attr({
						"x": 15 + 21.9,
						"y": -14 + 28.2,
						"fill": "#00E1FF",
						"font-size": 18,
			            "font-family": "Microsoft Yahei",
			            "text-anchor": "start",
			            "dominant-baseline": "middle"
					}).text(d.name);
				});
				that.outerMapZoom(d.lng, d.lat, 3);
			});;
		})
	},
	initTitle: function(title){
		var that = this;
		that.title.titleGroup.attr({
			"transform": "translate(0, 58)"
		}).selectAll("*").remove();
		zhnx.utils.loadSvg("svg/weather/map/map_title.svg", function(importedNode){
			// 动画
			that.title.titleGroup.transition().duration(200).attr({
				"transform": "translate(0, -8)"
			});
			var plane = that.title.titleGroup.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x": (that.width - 188) / 2,
				"y": that.height - 44 - 12,
				"width": 188,
				"height": 44,
			});
			that.title.titleGroup.append("text").attr({
				"x": (that.width - 188) / 2 + 94,
				"y": that.height - 44 - 12 + 22,
				"fill": "#FFF",
				"font-size": 18,
	            "font-family": "Microsoft Yahei",
	            "text-anchor": "middle",
	            "dominant-baseline": "middle"
			}).text(function(){
				var cityName = that.common.cuCityName == null ? "" : that.common.cuCityName
				return title == undefined ? cityName + that.common.cuMpTypeName : title;
			});
		});
	},
	initDescribeAll: function(){
		var that = this;
		that.describeAll.describeAllSvg.selectAll("*").remove();
		//当前地图是否需要总体情况描述
		switch (this.common.cuMpType) {
		case "healthRegPla":
			//加载进入的按钮
			zhnx.utils.loadSvg("svg/health/map/zhanKaiAnNiu.svg", function(importedNode){
				var plane = that.describeAll.describeAllSvg.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"class":"zhanKai",
					"cursor":"pointer",
					"x": that.width-80,
					"y": 25,
					"width": 50,
					"height": 36
				});
				that.describeAll.describeAllSvg.append("rect").attr({
					"class":"zhanKai",
					"cursor":"pointer",
					"x": that.width-80,
					"y": 25,
					"width": 50,
					"height": 36,
					"fill":"rgba(255,255,255,0)"
				}).on("click",function(){
					that.describeAllClick();
					that.clickReturn();
					that.describeAllClickCommand({
	        			type: 'click',
	        			context: that.id,
	        			contextType: 'chaObj',
	        			execString: 'that.describeAllClick()'+';that.clickReturn()',
	        			execMode: "evalfunc"
	        		});
				});
			});
			break;
		}
	},
	describeAllClickCommand: function(commandArgs){
		
	},
	describeAllClickReturnCommand: function(commandArgs){
		
	},
	describeAllClick: function(){
		var that = this;
		that.describeAll.describeAllSvg.selectAll(".zhanKai").remove();
		
		//点击展开的背景
		zhnx.utils.loadSvg("svg/health/map/ZheDieMianBan.svg", function(importedNode){
			var planeBg = that.describeAll.describeAllSvg.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeBg).attr({
				"x": 18,
				"y": 15,
				"width": 700,
				"height": 0,
			}).transition().duration(that.describeAll.initDescribeAll_time).ease("bounce").attr({
				"height": 288
			});
			//背景框展开内容
			for(var i = 0;i<that.zhanKaiData.length;i++){
				for(var j = 0;j<that.zhanKaiData[i].type.length;j++){
					this.color = that.zhanKaiData[i].color;
					this.unit = that.zhanKaiData[i].unit[j];
					this.type = that.zhanKaiData[i].type[j];
					this.svgName = that.zhanKaiData[i].svgName[j];
					this.value = that.zhanKaiData[i].value[j];
					that.describeAllSvg(this.color,this.unit,this.type,this.svgName,this.value,i,j);
				}
			}
		});
		
	},
	clickReturn: function(){
		var that = this;
		//点击按钮收起
		zhnx.utils.loadSvg("svg/health/map/zheDieAnNiu.svg", function(importedNode){
			var planeAn = that.describeAll.describeAllSvg.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeAn).attr({
				"class":"zheDie",
				"cursor":"pointer",
				"x": (700+25-49.7)/2,
				"y": 288+5-35.5,
				"width": 49.7,
				"height": 35.5,
				"opacity":0
			}).transition().delay(that.describeAll.initDescribeAll_time*3/2).duration(that.describeAll.initDescribeAll_time/2).ease("bounce").attr({
				"opacity": 1
			});
			that.describeAll.describeAllSvg.append("g").append("rect").attr({
				"class":"zheDie",
				"cursor":"pointer",
				"x": (700+25-49.7)/2,
				"y": 288+5-35.5,
				"width": 49.7,
				"height": 35.5,
				"fill":"rgba(255,255,255,0)",
				"opacity":0
			})
			.on("click",function(){
				that.initDescribeAll();
				that.describeAllClickReturnCommand({
	    			type: 'click',
	    			context: that.id,
	    			contextType: 'chaObj',
	    			execString: "that.initDescribeAll()",
	    			execMode: "evalfunc"
	    		});
			})
			.transition().delay(that.describeAll.initDescribeAll_time*3/2).duration(that.describeAll.initDescribeAll_time/2).ease("bounce").attr({
				"opacity": 1
			});
		});
	},
	describeAllSvg: function(color,unit,type,svgName,value,circleNumI,circleNumJ){
		var that = this;
		
		zhnx.utils.loadSvg("svg/health/map/"+svgName+".svg", function(importedNode){
			var iconSvg = that.describeAll.describeAllSvg.node().appendChild(importedNode.cloneNode(true));
			d3.select(iconSvg).attr({
				"x": 50+700/3*circleNumJ,
				"y": 60+(288/2-10)*circleNumI,
				"width": 42,
				"height": 50,
				"opacity":0,
			}).transition().duration(that.describeAll.initDescribeAll_time).attr({
				"opacity":1
			});
		});
		var describeAllText = that.describeAll.describeAllSvg.append("g").attr({
			"font-family":"Microsoft Yahei",
            "text-anchor": "start",
            "dominant-baseline": "middle",
            "font-size":16,
            "transform":"translate("+(50+700/3*circleNumJ+50)+","+(60+(288/2-10)*circleNumI)+")"
		})
		//文字
		describeAllText.append("text").attr({
			"fill":color[0],
			"opacity":0,
		}).text(type).transition().duration(that.describeAll.initDescribeAll_time).attr({
			"opacity":1
		})
		//数字
		describeAllText.append("text").attr({
			"fill": color[1],
			"font-size":18,
			"font-weight": "bold",
			"opacity":0,
			"dy": "2.5em"
		}).text(value).transition().duration(that.describeAll.initDescribeAll_time).attr({
			"opacity":1
		})
		//单位
		describeAllText.append("text").attr({
			"fill": color[1],
			"font-size":12,
			"dx":12*value.toString().length,
			"opacity":0,
			"dy": 18*2.5
		}).text(unit).transition().duration(that.describeAll.initDescribeAll_time).attr({
			"opacity":1
		})
	},
	initAlert: function(){
		var that = this;
		that.alert.svg.selectAll("*").remove();
		if(that.alert.timeout){
			clearTimeout(that.alert.timeout);
		}
		// 判断当前地图是否需要告警信息
		switch (this.common.cuMpType) {
		case "Poverty":
		case "EduStu":
		case "EduSch":
		case "EduMFR":
		case "ResPla":
			return false;
			break;
		default:
			return false;
		break;
		}
		// 初始化alert位置
		that.alert.svg.attr({
			"x": (that.width - 688) / 2,
			"y": - 52
		});
		zhnx.utils.loadSvg("svg/weather/map/alert_frame.svg", function(importedNode){
			var plane = that.alert.svg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 688,
				"height": 52
			});
			that.alert.svg.transition().duration(200).attr({
				"width": 688,
				"height": 52,
				"x": (that.width - 688) / 2,
				"y": 18
			});
			var text = that.alert.svg.append("text").datum("中宁县气象局发布大风蓝色预警|风力IV级|强度一般").attr({
				"x": 688,
				"y": 52 / 1.7,
				"fill": "red",
				"font-size": 24,
	            "font-weight": "bold",
	            "font-family": "Microsoft Yahei",
	            "text-anchor": "start",
	            "dominant-baseline": "middle"
			}).each(function(d){
				var texts = d.split("|");
				for(var i = 0; i < texts.length; i++){
					d3.select(this).append("tspan").attr({
						"dx": 10
					}).text(texts[i]);
				}
			});
			var textWidth = text.node().getBBox().width;
			zhnx.utils.timer(function(){
				text.attr({
					"x": function(){
						var x = parseFloat(text.attr("x")) - 2;
						x = x < -textWidth ? 688 : x;
						return x;
					}
				});
			});
			that.alert.timeout = setTimeout(function(){
				that.initAlert();
			}, 60 * 1000);
		});
	},
	initSwitchPCMap: function(){
		var that = this;
		this.switchPCMap.switchPCGroup.selectAll("*").remove();
		switch (this.common.cuMpType) {
		case "EduStu":
		case "EduSch":
		case "EduMFR":
		case "ResPla":
			that.switchPCMap.switchPCGroup.attr({
				"transform": "translate(40, -42)"
			});
			zhnx.utils.loadSvg("svg/weather/map/switchPC_frame.svg", function(importedNode){
				var plane = that.switchPCMap.switchPCGroup.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 156,
					"height": 42
				});
				d3.select(plane).select("#XMLID_12679_").attr({
					"fill-opacity": 0.6
				}).each(function(){
					that.switchPCMap.switchPCGroup.append("text").attr({
						"x":this.getBBox().x + this.getBBox().width / 2,
						"y":this.getBBox().y + this.getBBox().height / 2,
			            "fill": "#F6B407",
			            "font-size": 15,
			            "font-weight": "bold",
			            "font-family": "Microsoft Yahei",
			            "text-anchor": "middle",
			            "dominant-baseline": "middle"
					}).text("区").style({
						"cursor": "pointer"
					}).on("click", function(){
						that.switchPCClick("P");
						that.switchPCClickCommand({
		        			type: 'click',
		        			context: that.id,
		        			contextType: 'chaObj',
		        			execString: "that.switchPCClick('P')",
		        			execMode: "evalfunc"
		        		});
					});
				});
				d3.select(plane).select("#XMLID_98_").attr({
					"fill-opacity": 0
				}).each(function(){
					that.switchPCMap.switchPCGroup.append("text").attr({
						"x":this.getBBox().x + this.getBBox().width / 2,
						"y":this.getBBox().y + this.getBBox().height / 2,
			            "fill": "#FFF",
			            "font-size": 15,
			            "font-weight": "bold",
			            "font-family": "Microsoft Yahei",
			            "text-anchor": "middle",
			            "dominant-baseline": "middle"
					}).text("市");
				});
				that.switchPCMap.switchPCGroup.transition().duration(200).attr({
					"transform": "translate(40, 30)"
				});
			});
			break;
		}
	},
	switchPCClick: function(POC){
		var that = this;
		this.switchPCMap.switchPCGroup.select("#XMLID_12679_").attr({
			"fill-opacity": function(){
				return POC == "P" ? 0.6 : 0;
			}
		});
		this.switchPCMap.switchPCGroup.select("#XMLID_98_").attr({
			"fill-opacity": function(){
				return POC == "C" ? 0.6 : 0;
			}
		});
		switch (POC) {
		case "P":
			this.map.selectedIsCity = false;
			this.map.mpPaths.attr({
				"fill": function(d, i){
					return that.map.color[i];
				}
			});
			that.map.cityPosCircle.map(function(d, i){
				d.attr({
					"stroke": function(){
						return that.map.cityPosColor;
					}
				});
			});
			that.switchPCClickOuter("P");
			that.switchPCClickInner("P");
			break;
		}
	},
	switchPCClickInner: function(POC){
		var that = this;
		if(POC == "P"){
			that.common.cuCityName = null;
			that.common.cuCityCode = null;
		}
		that.initDescription();
	},
	switchPCClickOuter: function(POC){
		
	},
	switchPCClickCommand: function(commandArgs){
		
	},
	initDescription: function(){
		var that = this;
		this.description.svg.selectAll("*").remove();
		switch (this.common.cuMpType) {
		case "METAR":
			if(that.common.cuCityCode == null || that.common.cuCityCode == undefined){
				break;
			}
			var metar_ser = that.curSer.data[that.common.cuCityCode];
			this.description.svg.attr({
				"width": 264,
				"height": 180,
				"x": - 264,
				"y": 150
			}).transition().duration(300).attr({
				"x": 40
			});
			zhnx.utils.loadSvg("svg/weather/map/description_frame.svg", function(importedNode){
				var plane = that.description.svg.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 264,
					"height": 180
				});
				that.description.svg.append("text").attr({
					"x":15.7 + 10,
					"y":(39.1 - 12.7) / 1.7 + 12.7,
		            "fill": "#F6B407",
		            "font-size": 15,
		            "font-weight": "bold",
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "start",
		            "dominant-baseline": "middle"
				}).text(function(){
					var cityName = that.common.cuCityName == null ? "" : that.common.cuCityName;
					return cityName + that.common.cuMpTypeName;
				});
				d3.select(plane).select("#description_collapse_btn").on("click", function(){
					that.descriptionCollapse();
				}).style({
					"cursor": "pointer"
				});
			});
			zhnx.utils.loadSvg("svg/weather/icons/" + metar_ser.weather + ".svg", function(importedNodeMETAR){
				var planeMETAR = that.description.svg.node().appendChild(importedNodeMETAR.cloneNode(true));
				d3.select(planeMETAR).attr({
					"width": 50,
					"height": 50,
					"x": (264 - 50) / 2,
					"y": (39.1 - 12.7) / 1.7 + 12.7 + 22
				});
				that.description.svg.append("text").attr({
					"x": 264 / 2,
					"y": (39.1 - 12.7) / 1.7 + 12.7 + 18 + 70,
					"fill": "#FFAA00",
		            "font-size": 15,
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "middle",
		            "dominant-baseline": "middle"
				}).text(d3.select(planeMETAR).attr("zn"));
				that.description.svg.append("text").attr({
					"x": 264 / 2,
					"y": (39.1 - 12.7) / 1.7 + 12.7 + 18 + 70 + 30,
					"fill": "#FFF",
		            "font-size": 24,
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "middle",
		            "dominant-baseline": "middle"
				}).text(function(){
					return metar_ser.max + "°C/" + metar_ser.min + "°C";
				});
			});
			break;
		case "Forecast":
			if(that.common.cuCityCode == null || that.common.cuCityCode == undefined){
				break;
			}
			var metar_ser = that.curSer.data[that.common.cuCityCode];
			this.description.svg.attr({
				"width": 264,
				"height": 180,
				"x": - 264,
				"y": 150
			}).transition().duration(300).attr({
				"x": 40
			});
			zhnx.utils.loadSvg("svg/weather/map/description_frame.svg", function(importedNode){
				var plane = that.description.svg.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 264,
					"height": 180
				});
				that.description.svg.append("text").attr({
					"x":15.7 + 10,
					"y":(39.1 - 12.7) / 1.7 + 12.7,
		            "fill": "#F6B407",
		            "font-size": 15,
		            "font-weight": "bold",
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "start",
		            "dominant-baseline": "middle"
				}).text(function(){
					var cityName = that.common.cuCityName == null ? "" : that.common.cuCityName;
					return cityName + that.common.cuMpTypeName;
				});
				d3.select(plane).select("#description_collapse_btn").on("click", function(){
					that.descriptionCollapse();
				}).style({
					"cursor": "pointer"
				});
			});
			zhnx.utils.loadSvg("svg/weather/icons/" + metar_ser.weather + ".svg", function(importedNodeMETAR){
				var planeMETAR = that.description.svg.node().appendChild(importedNodeMETAR.cloneNode(true));
				d3.select(planeMETAR).attr({
					"width": 50,
					"height": 50,
					"x": (264 - 50) / 2,
					"y": (39.1 - 12.7) / 1.7 + 12.7 + 22
				});
				that.description.svg.append("text").attr({
					"x": 264 / 2,
					"y": (39.1 - 12.7) / 1.7 + 12.7 + 18 + 70,
					"fill": "#FFAA00",
		            "font-size": 15,
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "middle",
		            "dominant-baseline": "middle"
				}).text(d3.select(planeMETAR).attr("zn"));
				that.description.svg.append("text").attr({
					"x": 264 / 2,
					"y": (39.1 - 12.7) / 1.7 + 12.7 + 18 + 70 + 30,
					"fill": "#FFF",
		            "font-size": 24,
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "middle",
		            "dominant-baseline": "middle"
				}).text(function(){
					return metar_ser.max + "°C/" + metar_ser.min + "°C";
				});
			});
			break;
		case "TrafficRoad":
			// 是否显示描述信息
			if(that.TrafficRoad.cuRoadName == null){
				return false;
			}
			this.description.svg.attr({
				"width": 264,
				"height": 180,
				"x": - 264,
				"y": 150
			}).transition().duration(300).attr({
				"x": 40
			});
			zhnx.utils.loadSvg("svg/weather/map/description_frame.svg", function(importedNode){
				var plane = that.description.svg.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 264,
					"height": 180
				});
				that.description.svg.append("text").attr({
					"x":15.7 + 10,
					"y":(39.1 - 12.7) / 1.7 + 12.7,
		            "fill": "#F6B407",
		            "font-size": 15,
		            "font-weight": "bold",
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "start",
		            "dominant-baseline": "middle"
				}).text(function(){
					var roadName = that.TrafficRoad.cuRoadName;
					var roadSectionName = that.TrafficRoad.cuRoadSectionName;
					return roadName + roadSectionName;
				});
				d3.select(plane).select("#description_collapse_btn").on("click", function(){
					that.descriptionCollapse();
				}).style({
					"cursor": "pointer"
				});
			});
			break;
		case "Wind":
			return false;
			this.description.svg.attr({
				"width": 192,
				"height": 150,
				"x": - 192,
				"y": 160
			}).transition().duration(300).attr({
				"x": 60
			});
			zhnx.utils.loadSvg("svg/weather/map/weathervanes.svg", function(importedNode){
				var plane = that.description.svg.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 192,
					"height": 150
				});
			});
			break;
		case "EduStu":
		case "EduSch":
		case "EduMFR":
		case "ResPla":
			this.description.svg.attr({
				"width": 264,
				"height": 180,
				"x": - 264,
				"y": 150
			}).transition().duration(300).attr({
				"x": 40
			});
			zhnx.utils.loadSvg("svg/weather/map/description_frame_edu.svg", function(importedNode){
				var plane = that.description.svg.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 264,
					"height": 180
				});
				that.description.svg.append("text").attr({
					"x":264 / 2,
					"y":60,
		            "fill": "#F6B407",
		            "font-size": 18,
		            "font-weight": "bold",
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "middle",
		            "dominant-baseline": "middle"
				}).text(function(){
					var cityName = that.common.cuCityName == null ? "" : that.common.cuCityName;
					if(that.common.cuMpType == 'ResPla'){
						return that.curSer.label;
					}else if(that.common.cuMpType == 'EduMFR'){
						return cityName + that.curSer.label;
					}else{
						return cityName + that.common.cuMpTypeName;
					}
				});
				that.description.svg.append("text").attr({
					"x":264 / 2,
					"y":60 + 50,
		            "fill": "#F6B407",
		            "font-size": 30,
		            "font-weight": "bold",
		            "font-family": "Microsoft Yahei",
		            "text-anchor": "middle",
		            "dominant-baseline": "middle"
				}).text(function(){
					if(that.common.cuMpType == 'ResPla'){
						return that.curSer.data;
					}
					if(that.common.cuCityName == null){
						var total = 0, i = 0;
						for(var code in that.curSer.data){
							total += that.curSer.data[code];
							i++;
						}
						return total;
					}else{
						return that.curSer.data[that.common.cuCityCode];
					}
				});
			});
			break;
		};
	},
	descriptionCollapse: function(){
		var that = this;
		that.description.svg.transition().duration(300).attr({
			"x": - 264
		});
	},
	initUnitScale: function(){
		return false;
		this.unitScale.unitScaleGroup.selectAll("*").remove();
		var data = [], rectWidth = 110;
		switch (this.common.cuMpType) {
		case "Temperature":
			data.push({color:"rgba(0,0,0,0)", text:"单位°C"});
			data.push({color:"#660808", text:"35-40"});
			data.push({color:"#992904", text:"30-35"});
			data.push({color:"#CC4A00", text:"25-30"});
			data.push({color:"#E78D41", text:"20-25"});
			data.push({color:"#FED180", text:"15-20"});
			data.push({color:"#F9FFA5", text:"10-15"});
			data.push({color:"#AFECFF", text:"0-10"});
			data.push({color:"#3EB2ED", text:"-10-0"});
			break;
		case "Precipitation":
			data.push({color:"rgba(0,0,0,0)", text:"单位mm"});
			data.push({color:"#AA1B8F", text:"50以上"});
			data.push({color:"#9228C8", text:"20-50"});
			data.push({color:"#2840EA", text:"10-20"});
			data.push({color:"#68D8FE", text:"6-10"});
			data.push({color:"#23DDDC", text:"4-6"});
			data.push({color:"#18C700", text:"2-4"});
			data.push({color:"#31FE61", text:"1-2"});
			break;
		case "TrafficZone":
			data.push({color:"rgba(0,0,0,0)", text:"单位mm"});
			data.push({color:"#9A3169", text:"250以上"});
			data.push({color:"#3733EA", text:"150-250"});
			data.push({color:"#F636FD", text:"50-150"});
			data.push({color:"#77ACE0", text:"25-50"});
			data.push({color:"#5AAD65", text:"10-25"});
			data.push({color:"#BDF2A0", text:"0-10"});
			rectWidth = 130;
			break;
		default:
			return false;
			break;
		}
		this.unitScale.unitScaleGroup.attr({
			"transform": function(){
				return "translate(" + (-rectWidth - 30) + ", 650)"
			}
		});
		this.unitScale.unitScaleGroup.transition().duration(200).ease("bounce").attr({
			"transform": function(){
				return "translate(30, 650)"
			}
		});
		this.unitScale.unitScaleGroup.append("rect").attr({
			"x":0,
			"y":0,
			"width": 110,
			"height": 220,
			"fill":"#f7f7f7",
			"fill-opacity": 0.2
		});
		this.unitScale.unitScaleGroup.selectAll("g")
		.data(data).enter().append("g")
		.attr({
			"transform": function(d, i){
				return "translate(10, " + (i * 20 + 15) + ")"
			}
		}).each(function(d, i){
			d3.select(this).append("rect").attr({
				"x": 0,
				"y": 0,
				"width": 40,
				"height": 13,
				"fill": d.color
			});
			d3.select(this).append("text").attr({
				"x": 40 + 10,
				"y": 13 / 2,
				"fill": "#FFF",
				"font-size": 12,
	            "font-family": "Microsoft Yahei",
	            "text-anchor": "start",
	            "dominant-baseline": "middle"
			}).text(d.text);
		});
	},
	initDetail: function(){
		var that = this;
		this.detail.detailGroup.selectAll("*").remove();
		switch (this.common.cuMpType) {
		case "Forecast":
			zhnx.utils.loadSvg("svg/weather/map/detail_frame.svg", function(importedNode){
				var plane = that.detail.detailGroup.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 690,
					"height": 130
				}).select(".detail_frame_st1_btn").style({
					"cursor": "pointer"
				}).on("click", function(){
					that.detailCollapse();
				});
				// 内容
				var iconFileName = "BlueStorm";
				zhnx.utils.loadSvg("svg/weather/icons/waring/" + iconFileName + ".svg", function(importedNode){
					var plane = that.detail.detailGroup.node().appendChild(importedNode.cloneNode(true));
					d3.select(plane).attr({
						"x": 20,
						"y": 10,
						"width": 58,
						"height": 51
					});
				});
				that.detail.detailGroup.append("text").attr({
					"x": 90,
					"y": 35,
					"fill": "red",
					"font-size": 20,
					"font-weight": "bold",
		            "font-family": "Microsoft Yahei",
					"text-anchor": "start",
					"dominant-baseline": "middle"
				}).each(function(){
					d3.select(this).append("tspan").text(that.Forecast.detailData.colorName);
					d3.select(this).append("tspan").attr({
						"dx": 10
					}).text(that.Forecast.detailData.typeName + "预警");
				});
				// 详细内容
				that.detail.detailGroup.append("g").attr({
					"transform": "translate(20, 65)"
				}).each(function(){
					var g = d3.select(this);
					textContent(that.Forecast.detailData.content, 0);
					function textContent(content, rowIdx){
						var textNode =  g.append("text").attr({
							"x": 10,
							"y": 10 + rowIdx * 18,
							"fill": "#FFF",
							"font-size": 12,
				            "font-family": "Microsoft Yahei",
							"text-anchor": "start",
							"dominant-baseline": "middle"
						});
						for(var i = Math.min(40, content.length); i <= content.length; i++){
							textNode.text(content.slice(0, i));
							if(textNode.node().getBBox().width > 645){
								textNode.text(content.slice(0, --i));
								if(content.slice(i).length > 0){
									textContent(content.slice(i), ++ rowIdx);
								}
								break;
							}
						}
					}
				});
				// 动画部份
				that.detail.detailGroup.attr({
					"transform": function(){
						var x = (that.width - 690) / 2, y = that.height;
						return "translate(" + x + "," + y + ")"
					}
				}).transition().duration(400).attr({
					"transform": function(){
						var x = (that.width - 690) / 2, y = that.height - 188;
						return "translate(" + x + "," + y + ")"
					}
				});
			});
		}
	},
	detailCollapse: function(){
		var that = this;
		that.detail.detailGroup.transition().duration(200).attr({
			"transform": function(){
				var x = (that.width - 690) / 2, y = that.height;
				return "translate(" + x + "," + y + ")"
			}
		});
	},
	initFlowFrame: function(data){
		var that = this;
		// 如果只有一个地图则不用切换按钮
		if(data.length <= 1){
			return false;
		}
		// 展开按钮
		zhnx.utils.loadSvg("svg/weather/map/flow_button.svg", function(importedNode){
			that.flowFrame.flowBtnGroup = that.flowFrame.flowGroup.append("g").attr({
				"transform": "translate(673, 825)"
			}).style({
				"display": function(){
					return that.flowFrame.display ? "block" : "none";
				}
			});
			that.flowFrame.flowBtn = that.flowFrame.flowBtnGroup.node().appendChild(importedNode.cloneNode(true));
			that.flowFrame.flowBtn = d3.select(that.flowFrame.flowBtn).attr({
				"width": 50,
				"height": 50
			}).style({
				"cursor": "pointer"
			}).on("click", function(){
				that.fFCollapse();
				that.fFCollapseCommand({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.fFCollapse()",
        			execMode: "evalfunc"
        		});
			});
		});
		// 浮云窗
		zhnx.utils.loadSvg("svg/weather/map/flow_frame.svg", function(importedNode){
			that.flowFrame.flowFrameGroup = that.flowFrame.flowGroup.append("g").attr({
				"transform": "translate(720, 877)"
			});
			that.flowFrame.flowFrame = that.flowFrame.flowFrameGroup.node().appendChild(importedNode.cloneNode(true));
			that.flowFrame.flowFrame = d3.select(that.flowFrame.flowFrame).attr({
				"width": 0,
				"height": 0
			});
			that.flowFrame.flowFrameGroup.select("#MAP_XMLID_44_BTN").on("click", function(){
				that.fFExpand();
				that.fFExpandCommand({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.fFExpand()",
        			execMode: "evalfunc"
        		});
			});
			// 地图切换按钮
			zhnx.utils.loadSvg("svg/weather/map/flow_switch_map_btn.svg", function(importedNode){
				data = data.map(function(d, i){
					return $.extend({i:i}, d);
				});
				// padding根据数据来决定
				that.flowFrame.padding = data.length == 3 ? 30 : 15;
				that.flowFrame.switch_btns = that.flowFrame.flowFrameGroup.selectAll(".switch_btn").data(data)
					.enter().append("g").attr({
						"transform": function(d, i){
							var x = (i == 0 ? (that.flowFrame.flowFrameContentWidth - that.flowFrame.focusWidth) : (that.flowFrame.flowFrameContentWidth - that.flowFrame.notFocusWidth)) / 2 + 21;
							var y = (i * (that.flowFrame.padding + that.flowFrame.notFocusHeight)) + (i == 0 ? 0 : (that.flowFrame.focusHeight - that.flowFrame.notFocusHeight)) + 25;
							return "translate(" + x + "," + y +")"
						}
					}).each(function(d, i){
						var plane = this.appendChild(importedNode.cloneNode(true));
						d3.select(plane).attr({
							"width": function(){
								return i == 0 ? that.flowFrame.focusWidth : that.flowFrame.notFocusWidth;
							},
							"height": function(){
								return i == 0 ? that.flowFrame.focusHeight : that.flowFrame.notFocusHeight;
							}
						});
						d3.select(this).append("text").attr({
							"x": (i == 0 ? that.flowFrame.focusWidth : that.flowFrame.notFocusWidth) / 2,
							"y": (i == 0 ? that.flowFrame.focusHeight : that.flowFrame.notFocusHeight) / 2,
							"fill": "#FFF",
							"font-size": (i == 0 ? 22 : 16),
							"text-anchor": "middle",
							"dominant-baseline": "middle",
				            "font-family": "Microsoft Yahei"
						}).text(d.text);
					}).on("click", function(d, i){
						that.fFSwitch(d, i);
						that.fFSwitchCommand({
		        			type: 'click',
		        			context: that.id,
		        			contextType: 'chaObj',
		        			execString: "that.fFSwitch(" + JSON.stringify(d) + "," + i + ")",
		        			execMode: "evalfunc"
		        		});
					}).style({
						"cursor": "pointer",
						"display": "none"
					});
			});
		});
	},
	fFSwitch: function(d, i){
		var that = this;
		that.flowFrame.switch_btns.transition().duration(200).attr({
			"transform": function(t, n){
				n = n == 0 ? d.i : n == d.i ? 0 : n;
				var x = (n == 0 ? (that.flowFrame.flowFrameContentWidth - that.flowFrame.focusWidth) : (that.flowFrame.flowFrameContentWidth - that.flowFrame.notFocusWidth)) / 2 + 21;
				var y = (n * (that.flowFrame.padding + that.flowFrame.notFocusHeight)) + (n == 0 ? 0 : (that.flowFrame.focusHeight - that.flowFrame.notFocusHeight)) + 25;
				return "translate(" + x + "," + y +")"
			}
		});
		that.flowFrame.switch_btns.each(function(t, n){
			d3.select(this).select("svg").transition().duration(500).attr({
				"width": function(){
					return n == d.i ? that.flowFrame.focusWidth : that.flowFrame.notFocusWidth;
				},
				"height": function(){
					return n == d.i ? that.flowFrame.focusHeight : that.flowFrame.notFocusHeight;
				}
			});
			d3.select(this).select("text").transition().duration(500).attr({
				"font-size": (n == d.i ? 22 : 16),
				"x": (n == d.i ? that.flowFrame.focusWidth : that.flowFrame.notFocusWidth) / 2,
				"y": (n == d.i ? that.flowFrame.focusHeight : that.flowFrame.notFocusHeight) / 2
			});
		});
		that.fFSwitchInner(d);
	},
	fFSwitchInner: function(d){
		this.initCurSeries(d.i);
		this.drawMap(d);
		this.fFSwitchOuter(d);
	},
	fFSwitchOuter: function(d){
		
	},
	fFSwitchCommand: function(commandArgs){
		
	},
	fFCollapse: function(){
		var that = this;
		that.flowFrame.flowFrameGroup.transition().duration(300).attr({
			"transform": "translate(506, 645)"
		});
		that.flowFrame.flowFrame.transition().duration(300).attr({
			"width": 214,
			"height": 232
		}).each("end", function(){
			that.flowFrame.switch_btns.style({
				"display": "inline"
			});
		});
		that.flowFrame.flowBtn.transition().duration(0).attr({
			"width": 0,
			"height": 0
		});
		that.fFCollapseOuter();
	},
	fFCollapseOuter: function(){
		
	},
	fFCollapseCommand: function(commandArgs){
		
	},
	fFExpand: function(){
		var that = this;
		that.flowFrame.switch_btns.style({
			"display": "none"
		});
		that.flowFrame.flowFrameGroup.transition().duration(300).attr({
			"transform": "translate(720, 877)"
		});
		that.flowFrame.flowFrame.transition().duration(300).attr({
			"width": 0,
			"height": 0
		});
		that.flowFrame.flowBtn.transition().duration(0).delay(300).attr({
			"width": 50,
			"height": 50
		});
		that.fFExpandOuter();
	},
	fFExpandOuter: function(){
		
	},
	fFExpandCommand: function(commandArgs){
		
	},
	initBgFrame: function(){
		var that = this, frameFileName, x, y, width, height;
		// 加载地图外框
		switch(this.common.frame){
		case 'normal':
			frameFileName = "svg/weather/map/map_frame.svg";
			x = "0px";
			y = "0px";
			width = this.width;
			height = this.height;
			break;
		case 'short':
			frameFileName = "svg/weather/map/map_frame_short.svg";
			x = "0px";
			y = "44px";
			width = 734;
			height = 896;
			break;
		}
		zhnx.utils.loadSvg(frameFileName, function(importedNode){
			var plane = that.svg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x": x,
				"y": y,
				"width": width,
				"height": height
			}).style({
				"position": "absolute",
				"left": "0px",
				"top": "0px"
			});
		});
		this.initBgFrameAnimate();
	},
	initBgFrameAnimate: function(){
		var that = this, y, v = 0;
		switch(this.common.frame){
		case 'normal':
			y = 3;
			break;
		case 'short':
			y = 47;
			break;
		}
		that.bg.svg_top = that.svg.append("svg").attr({
			"class": "ruler",
			"x": (that.width - 320) / 2 + "px",
			"y": y + "px",
			"width": 320,
			"height": 6
		});
		zhnx.utils.loadSvg("svg/weather/map/ruler_top.svg", function(importedNode){
			var plane = that.bg.svg_top.node().appendChild(importedNode.cloneNode(true));
			var planeCopy = that.bg.svg_top.node().appendChild(importedNode.cloneNode(true));
			var ruler = d3.select(plane).attr({
				"x": "0",
				"y": "0",
				"width": 320,
				"height": 6
			});
			var rulerCopy = d3.select(planeCopy).attr({
				"x": "-320",
				"y": "0",
				"width": 320,
				"height": 6
			});
			zhnx.utils.timer(function(){
				ruler.attr({
					"x": function(){
						var x = parseFloat(ruler.attr("x")) + v;
						x = x > 320 ? -320 : x;
						return x;
					}
				});
				rulerCopy.attr({
					"x": function(){
						var x = parseFloat(rulerCopy.attr("x")) + v;
						x = x > 320 ? -320 : x;
						return x;
					}
				});
			});
		});
		that.bg.svg_bottom_left = that.svg.append("svg").attr({
			"class": "ruler",
			"x": 30 + "px",
			"y": that.height - 14 + "px",
			"width": 214,
			"height": 6
		});
		that.bg.svg_bottom_right = that.svg.append("svg").attr({
			"class": "ruler",
			"x": 490 + "px",
			"y": that.height - 14 + "px",
			"width": 214,
			"height": 6
		});
		zhnx.utils.loadSvg("svg/weather/map/ruler_bottom.svg", function(importedNode){
			var plane = that.bg.svg_bottom_left.node().appendChild(importedNode.cloneNode(true));
			var planeCopy = that.bg.svg_bottom_left.node().appendChild(importedNode.cloneNode(true));
			var ruler = d3.select(plane).attr({
				"x": "0",
				"y": "0",
				"width": 214,
				"height": 6
			});
			var rulerCopy = d3.select(planeCopy).attr({
				"x": "214",
				"y": "0",
				"width": 214,
				"height": 6
			});
			var plane_right = that.bg.svg_bottom_right.node().appendChild(importedNode.cloneNode(true));
			var planeCopy_right = that.bg.svg_bottom_right.node().appendChild(importedNode.cloneNode(true));
			var ruler_right = d3.select(plane_right).attr({
				"x": "0",
				"y": "0",
				"width": 214,
				"height": 6
			});
			var rulerCopy_right = d3.select(planeCopy_right).attr({
				"x": "214",
				"y": "0",
				"width": 214,
				"height": 6
			});
			zhnx.utils.timer(function(){
				ruler.attr({
					"x": function(){
						var x = parseFloat(ruler.attr("x")) - v;
						x = x < -214 ? 214 : x;
						return x;
					}
				});
				rulerCopy.attr({
					"x": function(){
						var x = parseFloat(rulerCopy.attr("x")) - v;
						x = x < -214 ? 214 : x;
						return x;
					}
				});
				ruler_right.attr({
					"x": function(){
						var x = parseFloat(ruler_right.attr("x")) - v;
						x = x < -214 ? 214 : x;
						return x;
					}
				});
				rulerCopy_right.attr({
					"x": function(){
						var x = parseFloat(rulerCopy_right.attr("x")) - v;
						x = x < -214 ? 214 : x;
						return x;
					}
				});
			});
		});
	}
});
// 气象云告警信息
zhnx.chart.weatherAlert = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherAlert.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherAlert,
	_defaults : {},
	timeout: null,
	bgGroup: undefined,
	ctGroup: undefined,
	init: function(args){
		// 基本初始化
		this.baseInit(this.args.selector);
		// 修改z-index
//		$("#" + this.id).css({
//			"z-index": -1
//		});
		// 初始化容器
		this.initContainer();
		this.initBgFrame();
		this.initAlert();
	},
	initContainer: function(){
		this.bgGroup = this.svg.append("g");
		this.ctGroup = this.svg.append("g");
	},
	initAlert: function(){
		var that = this, timerCollector = false;
		that.ctGroup.selectAll("*").remove();
		var text = that.ctGroup.append("text").datum("中宁县气象局发布大风蓝色预警|风力IV级|强度一般").attr({
			"x": 2030,
			"y": 80 / 1.8,
			"fill": "#ff313c",
			"font-size": 42,
            "font-weight": "bold",
            "font-family": "Microsoft Yahei",
            "text-anchor": "start",
            "dominant-baseline": "middle"
		}).each(function(d){
			var texts = d.split("|");
			for(var i = 0; i < texts.length; i++){
				d3.select(this).append("tspan").attr({
					"dx": 10
				}).text(texts[i]);
			}
		});
		var textWidth = text.node().getBBox().width;
		zhnx.utils.timer(function(){
			text.attr({
				"x": function(){
					var x = parseFloat(text.attr("x")) - 2;
					x = x < -textWidth ? 2030 : x;
					return x;
				}
			});
			if(timerCollector){
				return true;
			}
		});
		that.timeout = setTimeout(function(){
			timerCollector = true;
			that.initAlert();
		}, 2 * 60 * 1000);
	},
	initBgFrame: function(){
		var that = this;
		zhnx.utils.loadSvg("svg/weather/alert_frame.svg", function(importedNode){
			var plane = that.bgGroup.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 2030,
				"height": 80
			}).style({
				"position": "absolute",
				"left": "0px",
				"top": "0px"
			});
		});
	}
});
// 气象云折线面积图
zhnx.chart.weatherAreaLine = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherAreaLine.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherAreaLine,
	_defaults : {},
	
	option : {
		padding : {
			top : 70,
			right : 40,
			bottom : 50,
			left : 55
		},
		background : {
			show : true,
			url : "svg/weather/border/HourlyTemperature_Pressure_RainfallBorder.svg",
			width : 960,
			height : 220
		},
		title : {
			text : "",
			textAlign : 'left', 
			left : 45,
			top : 40,
			textStyle : {
				fontSize : 20
			}
		},
		xAxis : {
			unit : '',
			gap : false,
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		yAxis : {
			unit : '',
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		grid : {
			borderColor : "#05a8f7"
		},
		area : {
			showCircle: true,
			showText: false,
			showLastText : true,
		},
		line : {
			lineStyle: {
				interpolate: "cardinal"		// 定义线绘制形状,step\basis等，默认为linear
			},
			isText : false,
			isCircle : false,
			lineAnimate : "left",
		}
	},
	
	init : function(args){
		var opt = $.extend(true, {}, this.option, args.option, {viewBox: args.viewBox});
		var chart = xCharts(this.args.selector.get(0), opt);
		chart.FormateData(args.series);
		chart.drawBackground();
		chart.drawTitle();
		var xInfo = chart.drawXAxis(chart.series.label[0]);
		var yInfo = chart.drawYAxis(chart.series.data[0]);
		chart.drawGrid(xInfo, yInfo);
		chart.drawLine(chart.series.data[0], xInfo, yInfo);
		chart.drawArea(xInfo, yInfo, chart.series.data[0]);
	}
});

// 气象云全年降水量图
zhnx.chart.weatherRainOfYear = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherRainOfYear.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherRainOfYear,
	_defaults : {},
	
	option : {
		padding : {
			top : 100,
			right : 40,
			bottom : 40,
			left : 40
		},
		background : {
			show : true,
			url : "svg/weather/border/YearlyRainfallChartBorder.svg",
			width : 910,
			height : 400
		},
		title : {
			text : "全年降水量",
			textAlign : 'left', 
			left : 100,
			top : 45,
			textStyle : {
				fontSize : 24
			}
		},
		xAxis : {
			unit : '月份',
			gap : true,
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		yAxis : {
			unit : 'mm',
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		grid : {
			borderColor : "#05a8f7",
			opacity : 0.2
		},
		area : {
			showCircle: true,
			showText: false,
			showLastText : true,
		},
		line : {
			lineStyle: {
				interpolate: "cardinal"		// 定义线绘制形状,step\basis等，默认为linear
			},
			isText : false,
			isCircle : false,
			lineAnimate : "left",
		}
	},
	
	init : function(args){
		var chart = xCharts(this.args.selector.get(0), this.option);
		chart.FormateData(args);
		chart.drawBackground();
		chart.drawTitle();
		var xInfo = chart.drawXAxis(chart.series.label[0]);
		var yInfo = chart.drawYAxis(chart.series.data[0]);
		chart.drawGrid(xInfo, yInfo);
		chart.drawLine(chart.series.data[0], xInfo, yInfo);
		chart.drawArea(xInfo, yInfo, chart.series.data[0]);
	}
});

// 气象云综合天气指标和气象灾害
zhnx.chart.weatherSynthesisKPI = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherSynthesisKPI.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherSynthesisKPI,
	_defaults : {},
	
	backgroundURL : "svg/weather/border/SynthesizeWeatherIndexBorder.svg",
	smallboxURL : "svg/weather/border/SynthesizeWeatherIndexInteriorSmallbox.svg",
	
	IconsURL : undefined,
	type : undefined,
	value : undefined,
	title : undefined,
	mode : undefined,
	xScale : undefined,

	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.mode = args.mode;
		this.IconsURL = args.series.IconsURL;
		this.type = args.series.type;
		this.value = args.series.value;
		this.title = args.series.title;
		this.xScale = d3.scale.linear().domain([0, 3]).range([125, 785]);
		
		this.addBackground();
		this.addTitle();
		this.addIcons();
		this.addTextAndValue();
		if (this.mode == "one"){
			this.drawModeOne();
		}else{
			this.cropValue = args.series.cropValue;
			this.drawModeTwo();
		}
	},
	
	drawModeOne : function(){
		var that = this;
		var chart = this.svg.append("g").attr("class", "chartArea");
		chart.append("g").selectAll("rect").data(that.value).enter().append("rect").attr({
			"x" : function(d, i){return that.xScale(i)-90;},
			"y" : 225,
			"width" : 180,
			"height" : 15,
			"fill" : "#063664",
			"rx" : 7,
			"ry" : 7
		});
		chart.append("g").selectAll("rect").data(that.value).enter().append("rect").attr({
			"x" : function(d, i){return that.xScale(i)-90;},
			"y" : 225,
			"rx" : 7,
			"ry" : 7,
			"width" : function(d){return 180*d/365;},
			"height" : 15,
			"fill" : "#00beff"			
		});
	},
	
	drawModeTwo : function(){
		var that = this;
		var chart = this.svg.append("g").attr("class", "chartArea");
		chart.append("g").selectAll("text").data(that.value).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i);},
			"y" : 200,
			"fill" : "#fff",
			"font-size" : "16px",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text("农作物受影响面积");
		chart.append("g").selectAll("text").data(that.cropValue).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i);},
			"y" : 230,
			"fill" : "#ffaa00",
			"font-size" : "18px",
			"text-anchor" : "middle",
			"font-weight" : "bold",
			"dy" : ".5em"
		}).text(function(d){return d+"亩";});
	},
	
	addTextAndValue : function(){
		var that = this;
		var tv = this.svg.append("g").attr("class", "textAndvalue");
		var yPos1 = (this.mode == "one") ? 155 : 140;
		tv.append("g").selectAll("text").data(that.type).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i);},
			"y" : yPos1,
			"fill" : "#fff",
			"font-size" : "16px",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(function(d){return d;});
		var yPos2 = (this.mode == "one") ? 185 : 165;
		tv.append("g").selectAll("text").data(that.value).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i);},
			"y" : yPos2,
			"fill" : "#ffaa00",
			"font-size" : "18px",
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(function(d, i){
			if((i==2) && (that.mode == "one")){
				return d+"mm";
			}else{
				return d+"天";
			}
		});
	},
	
	addIcons : function(){
		var icons = this.svg.append("g").attr("class", "icons");
		var ypos = (this.mode == "one") ? 75 : 68;
		for(var i=0; i<this.IconsURL.length; ++i){
			this.loadIcons(icons, this.xScale(i), ypos, this.IconsURL[i]);
		}
	},
	
	loadIcons : function(chart, x, y, url){
		zhnx.utils.loadSvg(url, function(importedNode){
			var plane = chart.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : x-37,
				"y" : y,
				"width": 74,
				"height": 60
			});
		});
	},
	
	addTitle : function(){
		var that = this;
		var g_title = this.svg.append("g").attr("class", "title");
		g_title.append("text").attr({
			"x" : 150,
			"y" : 22,
			"fill" : "#ffaa00",
			"font-size" : "24px",
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(that.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(that.backgroundURL, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 910,
				"height": 305
			});
		});
		zhnx.utils.loadSvg(that.smallboxURL, function(importedNode){
			for(var i=0; i<4; ++i){
				var plane = bg.append("g").node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"x" : 20+i*220,
					"y" : 53,
					"width": 210,
					"height": 225
				});
			}			
		});
	}
	
});


// 气象云天气实况——实时天气情况
zhnx.chart.weatherActual = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherActual.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherActual,
	_defaults : {},
	
	colors : ["#ffaa00", "#fff", "#05BBFD", "#05FA9B", "#FFE81C"],
	titleBorderURL : "svg/weather/border/HeadlineFrame.svg",
	backgroundURL : "svg/weather/border/actualWeatherBorder.svg",

	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.title = args.title;
		this.headText = args.series.headText;
		this.weather = args.series.weather;
		this.Temp = args.series.Temp;
		this.dataSet = args.series.rtData;
		
		this.addBackground();
		this.addTitle();
		this.addWeatherText();
		this.addWeatherIcon();
		this.addWeatherValue();
		this.addWeatherDetail();
		this.addWeatherDetailValue();
	},
	
	addWeatherDetailValue : function(){
		var that = this;
		var detail = this.svg.append("g").attr("class", "weatherDetail");
		for(var j=0; j<that.dataSet.length; ++j){
			detail.append("g").selectAll("text").data(that.dataSet[j].value).enter().append("text").attr({
				"x" : function(d, i){
					if(i==0 || i==1){
						return 630;
					}else{
						return 890;
					}
				},
				"y" : function(d, i){
					if(i==0 || i==2){
						return 140+j*180;
					}else{
						return 175+j*180;
					}
				},
				"fill" : function(d, i){
					if(i==0 || i==2){
						return that.colors[2];
					}else{
						return that.colors[3];
					}
				},
				"font-size" : "14px",
				"text-anchor" : "end",
				"dy" : ".5em"
			}).text(function(d){return d;});
		}		
	},
	
	addWeatherDetail : function(){
		var that = this;
		var detail = this.svg.append("g").attr("class", "weatherDetail");
		for(var j=0; j<that.dataSet.length; ++j){
			detail.append("g").selectAll("text").data(that.dataSet[j].type).enter().append("text").attr({
				"x" : function(d, i){
					if(i==0 || i==1){
						return 530;
					}else{
						return 770;
					}
				},
				"y" : function(d, i){
					if(i==0 || i==2){
						return 140+j*180;
					}else{
						return 175+j*180;
					}
				},
				"fill" : function(d, i){
					if(i==0 || i==2){
						return that.colors[2];
					}else{
						return that.colors[3];
					}
				},
				"font-size" : "14px",
				"text-anchor" : "start",
				"dy" : ".5em"
			}).text(function(d){return d;});
		}		
	},
	
	addWeatherValue : function(){
		var that = this;
		var value = this.svg.append("g").attr("class", "weatherValue");
		value.append("g").selectAll("text").data(that.Temp).enter().append("text").attr({
			"x" : 340,
			"y" : function(d, i){return 130+i*180;},
			"fill" : that.colors[1],
			"font-size" : "30px",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(function(d){return d+"℃";});
	},
	
	addWeatherIcon : function(){
		var that = this;
		var icon = this.svg.append("g").attr("class", "weatherIcon");
		for(var i=0; i<that.weather.length; ++i){
			var url = "svg/weather/icons/"+that.weather[i]+".svg";
			this.loadIcons(url, 130+i*180, icon);
		}
	},
	
	loadIcons : function(url, y, svg){
		var that = this;
		zhnx.utils.loadSvg(url, function(importedNode){
			var plane = svg.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 170,
				"y" : y,
				"width": 70,
				"height": 70
			});
			var text = d3.select(plane).attr("zn");
			svg.append("text").attr({
				"x" : 340,
				"y" : y+45,
				"fill" : that.colors[1],
				"font-size" : "28px",
				"font-weight" : "bold",
				"text-anchor" : "middle",
				"dy" : ".5em"
			}).text(text);
		});
	},
	
	addWeatherText : function(){
		var that = this;
		var text = this.svg.append("g").attr("class", "weatherText");
		text.append("g").selectAll("text").data(that.headText).enter().append("text").attr({
			"x" : 90,
			"y" : function(d, i){return 160+i*180;},
			"fill" : that.colors[0],
			"font-size" : function(d, i){
				if(i==0){
					return "46px";
				}
				return "36px";
			},
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(function(d){return d;});
	},
	
	addTitle : function(){
		var that = this;
		var g_title = this.svg.append("g").attr("class", "title");
		g_title.append("text").attr({
			"x" : 150,
			"y" : 32,
			"fill" : that.colors[0],
			"font-size" : "24px",
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(that.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(that.titleBorderURL, function(importedNode){
			var plane = bg.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 0,
				"y" : 0,
				"width": 300,
				"height": 66
			});
		});
		zhnx.utils.loadSvg(that.backgroundURL, function(importedNode){
			for(var i=0; i<3; ++i){
				var plane = bg.append("g").node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"x" : 0,
					"y" : 75+i*180,
					"width": 945,
					"height": 165
				});
			}			
		});
		
		var strPath = "svg/weater/icons/"+ +".svg";
		var iconsPath1 = ["RH", "windSpeedDirection", "RH", "windSpeedDirection", "RH", "windSpeedDirection"];
		var iconsPath2 = ["pressure", "LAL", "pressure", "sunset", "pressure", "sunrise"];
		var xPos = [480, 710];
		var yPos = [125, 160, 305, 340, 485, 520];
		for(var j=0; j<iconsPath1.length; ++j){
			var strPath = "svg/weather/icons/"+ iconsPath1[j] +".svg";
			this.loadBGIcons(bg, strPath, xPos[0], yPos[j]);
		}
		for(var j=0; j<iconsPath2.length; ++j){
			var strPath = "svg/weather/icons/"+ iconsPath2[j] +".svg";
			this.loadBGIcons(bg, strPath, xPos[1], yPos[j]);
		}
	},
	loadBGIcons : function(bg, url, x, y){
		zhnx.utils.loadSvg(url, function(importedNode){
			var plane = bg.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : x,
				"y" : y,
				"width": 25,
				"height": 35
			});
		});
	}
});

// 气象云天气实况——实时生活指数
zhnx.chart.weatherIndexOfLiving = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherIndexOfLiving.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherIndexOfLiving,
	_defaults : {},
	
	colors : ["#ffaa00", "#fff"],
	backgroundURL : "svg/weather/border/CityTimeLiveIndex_Border.svg",
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.title = args.title;
		this.Icons = args.series.Icons;
		this.Values = args.series.Values;
		this.Tips = args.series.Tips;
		this.xScale = d3.scale.linear().domain([0, 5]).range([95, 870]);
		
		
		this.addBackground();
		this.addTitle();
		this.addIndexIcons();
		this.addValueAndTips();
	},
	
	addValueAndTips : function(){
		var that = this;
		var value = this.svg.append("g").attr("class", "IndexValue");
		value.append("g").selectAll("text").data(that.Values).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i)},
			"y" : 190,
			"fill" : that.colors[1],
			"font-size" : "20px",
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(function(d){return d;});
		value.append("g").selectAll("text").data(that.Tips).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i)},
			"y" : 230,
			"fill" : that.colors[1],
			"font-size" : "14px",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).each(function(d){//文字换行
			var newType;
			if(d!=undefined||d!=null){
				newType = d;
			}
			var newTextArrayBot = "";
	        var textNumBot = 8;
	        if(newType.length>textNumBot){
	            var testBot = newType.substring(0,textNumBot)//截取个数
	            var testBot2 = newType.substring(textNumBot,newType.length)
	            newTextArrayBot=testBot+","+testBot2;//使用符号将前后连接起来
	        }else{
	        	newTextArrayBot = newType
	        }
	        var strsBot = newTextArrayBot.split(",") ;
	        var textAllBot = d3.select(this)
			textAllBot.selectAll("tspan")
            .data(strsBot)
            .enter()
            .append("tspan")
            .attr("x",textAllBot.attr("x"))
            .attr("dy",function(d,i){return (1.2*i)+"em"})
            .text(function(d){ return d;});
		});
	},
	
	addIndexIcons : function(){
		var that = this;
		var icon = this.svg.append("g").attr("class", "IndexIcon");
		for(var i=0; i<that.Icons.length; ++i){
			var url = "svg/weather/Index/"+that.Icons[i]+".svg";
			this.loadIcons(url, that.xScale(i), icon);
		}
	},
	
	loadIcons : function(url, x, svg){
		var that = this;
		zhnx.utils.loadSvg(url, function(importedNode){
			var plane = svg.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : x-30,
				"y" : 80,
				"width": 60,
				"height": 60
			});
			var text = d3.select(plane).attr("zn");
			svg.append("text").attr({
				"x" : x,
				"y" : 160,
				"fill" : that.colors[0],
				"font-size" : "16px",
				"text-anchor" : "middle",
				"dy" : ".5em"
			}).text(text);
		});
	},
	
	addTitle : function(){
		var that = this;
		var g_title = this.svg.append("g").attr("class", "title");
		g_title.append("text").attr({
			"x" : 120,
			"y" : 35,
			"fill" : that.colors[0],
			"font-size" : "20px",
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(that.title);
	},
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(that.backgroundURL, function(importedNode){
			var plane = bg.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 0,
				"y" : 0,
				"width": 960,
				"height": 295
			});		
		});
		
	}
});

// 气象云天气预报——生活指数、空气质量生活指数
zhnx.chart.weatherForecastIndex = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherForecastIndex.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherForecastIndex,
	_defaults : {},
	
	colors : ["#ffaa00", "#fff"],
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.title = args.title;
		this.type = args.type;
		this.Icons = args.series.Icons;
		this.Tips = args.series.Tips;
		this.backgroundURL = "svg/weather/border/ForcastLivingIndexBorder.svg";
		if(this.type == "row4"){
			this.Values = args.series.Values;
			this.backgroundURL = "svg/weather/border/AQILivingIndexBorder.svg";
		}		
		this.xScale = d3.scale.linear().domain([0, 5]).range([85, 870]);
		this.addBackground();
		this.addTitle();
		this.addIndexIcons();
		if(this.type == "row3"){
			this.addValues();
		}else{
			this.addValueAndTips();
		}
	},
	
	addValues : function(){
		var that = this;
		var value = this.svg.append("g").attr("class", "IndexValue");
		value.append("g").selectAll("text").data(that.Tips).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i)},
			"y" : 170,
			"fill" : that.colors[0],
			"font-size" : "16px",
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(function(d){return d;});
	},

	addValueAndTips : function(){
		var that = this;
		var value = this.svg.append("g").attr("class", "IndexValue");
		value.append("g").selectAll("text").data(that.Values).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i)},
			"y" : 170,
			"fill" : that.colors[0],
			"font-size" : "20px",
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(function(d){return d;});
		value.append("g").selectAll("text").data(that.Tips).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i)},
			"y" : 195,
			"fill" : that.colors[1],
			"font-size" : "14px",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(function(d){return d;});
	},
	
	addIndexIcons : function(){
		var that = this;
		var icon = this.svg.append("g").attr("class", "IndexIcon");
		for(var i=0; i<that.Icons.length; ++i){
			var url = "svg/weather/Index/"+that.Icons[i]+".svg";
			this.loadIcons(url, that.xScale(i), icon);
		}
	},
	
	loadIcons : function(url, x, svg){
		var that = this;
		zhnx.utils.loadSvg(url, function(importedNode){
			var plane = svg.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : x-30,
				"y" : 70,
				"width": 60,
				"height": 60
			});
			var text = d3.select(plane).attr("zn");
			svg.append("text").attr({
				"x" : x,
				"y" : 145,
				"fill" : that.colors[0],
				"font-size" : "12px",
				"font-weight" : "light",
				"text-anchor" : "middle",
				"dy" : ".5em"
			}).text(text);
		});
	},
	
	addTitle : function(){
		var that = this;
		var g_title = this.svg.append("g").attr("class", "title");
		var xpos = (this.type == "row3") ? 150 : 165;
		var ypos = (this.type == "row3") ? 32 : 35;
		g_title.append("text").attr({
			"x" : xpos,
			"y" : ypos,
			"fill" : that.colors[0],
			"font-size" : "20px",
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text(that.title);
	},
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		var height = (this.type == "row3") ? 215 : 235;
		zhnx.utils.loadSvg(that.backgroundURL, function(importedNode){
			var plane = bg.append("g").node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": that.width,
				"height": height
			});		
		});		
	}	
});


// 天气预报——预警信息
zhnx.chart.weatherWarMsgRoll = function (args) {
	var that = this;
	this.args = $.extend({}, this._defaults, args);
	that.init(that.args);
}
zhnx.chart.weatherWarMsgRoll.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherWarMsgRoll,
	_defaults : {},
	contentSVGHeight: 560,
	contentOneHeight: 560 / 4,
	contentOneMaxHeight: 560 / 4.5 * 1.5,
	contentOneMinHeight: 560 / 4.5,
	focusBgRectColor: "rgba(26, 88, 226, 0.4)",
	contentIdx: 3,
	continueRollAnimate: true,
	isAnimated: false,
	contentData: null,
	init: function(args){
		// 基本初始化
		this.baseInit(this.args.selector);
		// 数据初始化
		this.contentData = this.args.series;
		// 节点初始化
		this.drawInit();
		// 加载背景框
		this.initBgFrame();
		// 标题
		this.initTitle();
		// 报警内容
		this.initWarningInfo();
	},
	drawInit: function(){
		this.bgFrameGroup = this.svg.append("g");
		this.titleGroup = this.svg.append("g");
		// 内容svg
		this.contentSVG = this.svg.append("svg").attr({
			"x": (this.width - 870) / 2,
			"y": 57 + 20+8,
			"width": 870,
			"height":this.contentSVGHeight,
			"xmlns": "http://www.w3.org/2000/svg"
		});
	},
	initTitle: function(){
		this.titleGroup.append("text").attr({
			"x":65,
			"y":60,
			"fill": "rgb(240, 160, 0)",
			"font-size": 24,
			"font-weight": "bold",
            "font-family": "Microsoft Yahei"
		}).text("宁夏灾害预警信息");
	},
	initWarningInfo: function(){
		var that = this;
		this.contentData = this.contentData.map(function(d, i){
			d.idx = i;
			return d;
		});
		this.contentSVG.selectAll("g").data(this.contentData.slice(0, Math.min(1, this.contentData.length))).enter()
		.append("g").attr({
			"transform": function(d, i){
				return "translate(0, " + (i * that.contentSVGHeight / 4) + ")"
			}
		}).each(function(d, i){
			that.initOneWarningInfo(this, d, i);
		});
		// 新增动画
		this.rollAnimation();
		this.rollAnimateListener();
	},
	initOneWarningInfo: function(group, d, i){
		var that = this;
		d3.select(group).datum(d).attr({
			"class": "warningContentGroup"
		}).style({
			"cursor": "pointer"
		})
//		.on("click", function(){
//			that.contentClick(d.idx);
//		})
		.each(function(){
			// 背景
			d3.select(this).append("rect").attr({
				"class": "bgRect",
				"x":0,
				"y":0,
				"width":870,
				"height":that.contentOneHeight - 13 - 10,
				"fill":"rgba(0,0,0,0)"
			});
			// 上部分
			d3.select(this).append("g").attr({
				"class": "upContentGroup"
			}).each(function(){
				var g = this;
				// 图标
				zhnx.utils.loadSvg("svg/weather/icons/waring/BlueStorm.svg", function(importedNode){
					var plane = g.appendChild(importedNode.cloneNode(true));
					d3.select(plane).attr({
						"width": 58,
						"height": 51
					});
				});
				// 预警框
				zhnx.utils.loadSvg("svg/weather/border/WarningFrame.svg", function(importedNode){
					var plane = g.appendChild(importedNode.cloneNode(true));
					d3.select(plane).attr({
						"x": 870 - 68,
						"y": (51 - 38) / 2,
						"width": 68,
						"height":38
					});
					d3.select(g).append("text").attr({
						"x": 870 - 68 + 68 / 2,
						"y": (51 - 38) / 2 + 38 / 2,
						"font-size":18,
						"font-weight":"bold",
			            "font-family": "Microsoft Yahei",
						"text-anchor": "middle",
						"dominant-baseline": "middle",
						"fill": function(){
							return d.isWarning ? "red" : "rgb(240, 160, 0)";
						}
					}).text(function(){
						return d.isWarning ? "预警中" : "已解除";
					});
				});
				d3.select(g).append("text").attr({
					"x": 65,
					"y": 14,
					"fill": "rgb(240, 160, 0)",
					"font-size": 20,
		            "font-family": "Microsoft Yahei",
					"text-anchor": "start",
					"dominant-baseline": "middle"
				}).text(function(){
					return d.MB + "发布" + d.colorName + d.typeName + "预警";
				});
				d3.select(g).append("text").attr({
					"x": 65,
					"y": 50,
					"fill": "rgb(240, 160, 0)",
					"font-size":20,
					"font-weight":"bold",
		            "font-family": "Microsoft Yahei"
				}).each(function(){
					d3.select(this).append("tspan").text(d.levelName);
					d3.select(this).append("tspan").attr({
						"dx": 30
					}).text(d.ponderanceName);
					d3.select(this).append("tspan").attr({
						"dx": 30,
						"font-size": 12,
						"fill": "#FFF",
						"font-weight":"normal",
					}).text(function(){
						return d.MB + " " + d.time + " 发布";
					});
				});
			});
			// 详细
			d3.select(this).append("g").attr({
				"class": "downContentGroup",
				"transform": "translate(0, 60)"
			}).each(function(){
				var g = d3.select(this);
				textContent(d.content, 0);
				function textContent(content, rowIdx){
					var textNode =  g.append("text").attr({
						"x": 10,
						"y": 10 + rowIdx * 18,
						"fill": "#FFF",
						"font-size": 12,
			            "font-family": "Microsoft Yahei",
						"text-anchor": "start",
						"dominant-baseline": "middle"
					});
					for(var i = Math.min(60, content.length); i <= content.length; i++){
						textNode.text(content.slice(0, i));
						if(textNode.node().getBBox().width > 870 - 10){
							textNode.text(content.slice(0, --i));
							if(content.slice(i).length > 0){
								textContent(content.slice(i), ++ rowIdx);
							}
							break;
						}
					}
				}
			});
			// 分割线
			d3.select(this).append("g").attr({
				"class": "splitLine",
				"transform": "translate(0, " + (that.contentOneHeight - 16) + ")"
			}).each(function(){
				var g = this;
				zhnx.utils.loadSvg("svg/weather/border/WarningSplitline.svg", function(importedNode){
					var plane = g.appendChild(importedNode.cloneNode(true));
					d3.select(plane).attr({
						"width": 870,
						"height": 3
					});
				});
			});
		});
	},
	rollAnimation: function(){
		// 是否启用动画
		if(this.contentData.length <= 4){
			return false;
		}
		// 动画内容
		var that = this, currentTime = new Date().getTime();
		zhnx.utils.timer(function(){
			if(new Date().getTime() - currentTime > 1000 * 10){
				// 索引增加
				that.contentIdx = ++ that.contentIdx == that.contentData.length ? 0 : that.contentIdx;
				// 移除第一个内容
				that.contentSVG.select(".warningContentGroup").remove();
				// 新增最后一个内容
				var addContentGroup = that.contentSVG.append("g").attr({
					"transform": function(){
						return "translate(0, " + (4 * that.contentSVGHeight / 4) + ")"
					}
				});
				that.initOneWarningInfo(addContentGroup.node(), that.contentData[that.contentIdx], that.contentIdx);
				// 动画
				that.contentSVG.selectAll(".warningContentGroup").each(function(d, i){
					d3.select(this).transition().duration(500).attr({
						"transform": function(){
							return "translate(0, " + (i * that.contentSVGHeight / 4) + ")"
						}
					});
				});
				// 更新时间
				currentTime = new Date().getTime();
			}
			// 正在执行动画
			that.isAnimated = true;
			// 是否要继续执行
			if(!that.continueRollAnimate){
				that.isAnimated = false;
				return true;
			}
		});
	},
	rollAnimateListener: function(){
		var that = this;
		zhnx.utils.timer(function(){
			if(that.continueRollAnimate && !that.isAnimated){
				that.rollAnimation();
			}
		});
	},
//	contentClick: function(idx){
//		var that = this, isAddY = false, allContentGroup = this.contentSVG.selectAll(".warningContentGroup");
//		// 是否再次点击
//		var clickContent = allContentGroup.filter(function(d, i){
//			return d.idx == idx ? this : null;
//		});
//		if(clickContent.select(".bgRect").attr("fill") == this.focusBgRectColor){
//			this.contentClickAgain(idx);
//			return false;
//		}
//		// 动画效果
//		allContentGroup.transition().duration(200).attr({
//			"transform": function(d, i){
//				var x = 0;
//				var y = i * that.contentOneMinHeight;
//				y = isAddY ? y += that.contentOneMaxHeight - that.contentOneMinHeight : y;
//				if(d.idx == idx){
//					isAddY = true;
//				}
//				return "translate(" + x + "," + y + ")";
//			}
//		}).each(function(d, i){
////			d3.select(this).select(".splitLine").transition().duration(200).attr({
////				"transform": function(){
////					var y = d.idx == idx ? that.contentOneMaxHeight - 13 : that.contentOneMinHeight - 13;
////					return "translate(0, " + y + ")"
////				}
////			});
////			d3.select(this).select(".upContentGroup").transition().duration(200).attr({
////				"transform": function(){
////					var x = 0;
////					var y = d.idx == idx  ? 30 : 0;
////					return "translate(" + x + "," + y + ")";
////				}
////			});
////			d3.select(this).select(".downContentGroup").transition().duration(200).attr({
////				"transform": function(){
////					var x = 0;
////					var y = d.idx == idx  ? 90 : 60;
////					return "translate(" + x + "," + y + ")";
////				}
////			});
////			d3.select(this).select(".bgRect").attr({
////				"height": that.contentOneHeight - 13 - 10,
////			}).transition().duration(200).attr({
////				"height": that.contentOneHeight - 13 - 10 + 45,
////			});
//		});
//		
//		allContentGroup.filter(function(d, i){
//			return d.idx != idx ? this : null;
//		}).select(".bgRect").attr({
//			"fill": "rgba(26, 88, 226, 0)"
//		});
//		clickContent.select(".bgRect").attr({
//			"fill": that.focusBgRectColor
//		});
//		this.continueRollAnimate = false;
//		// 调用外部方法
//		this.contentClickOuter(clickContent.data()[0].lng, clickContent.data()[0].lat)
//	},
//	contentClickOuter: function(lng, lat){
//		
//	},
//	contentClickAgain: function(idx){
//		var that = this, allContentGroup = this.contentSVG.selectAll(".warningContentGroup");
//		// 动画效果
////		allContentGroup.transition().duration(200).attr({
////			"transform": function(d, i){
////				var x = 0;
////				var y = i * that.contentOneHeight;
////				return "translate(" + x + "," + y + ")";
////			}
////		}).each(function(d, i){
////			d3.select(this).select(".splitLine").transition().duration(200).attr({
////				"transform": function(){
////					var y = that.contentOneHeight - 13;
////					return "translate(0, " + y + ")"
////				}
////			});
////			d3.select(this).select(".upContentGroup").transition().duration(200).attr({
////				"transform": function(){
////					var x = 0;
////					var y = 0;
////					return "translate(" + x + "," + y + ")";
////				}
////			});
////			d3.select(this).select(".downContentGroup").transition().duration(200).attr({
////				"transform": function(){
////					var x = 0;
////					var y = 60;
////					return "translate(" + x + "," + y + ")";
////				}
////			});
////			d3.select(this).select(".bgRect").transition().duration(200).attr({
////				"height": that.contentOneHeight - 13 - 10,
////			});
////		});
//		// 取消选中色
//		allContentGroup.filter(function(d, i){
//			return d.idx == idx ? this : null;
//		}).select(".bgRect").attr({
//			"fill": "rgba(26, 88, 226, 0)"
//		});
//		this.continueRollAnimate = true;
//	},
	initBgFrame: function(){
		var that = this;
		zhnx.utils.loadSvg("svg/weather/border/yubaoyujing.svg", function(importedNode){
			var plane = that.bgFrameGroup.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 953.3,
				"height":255
			});
		});
	}
});


// 气象云路段天气预报
zhnx.chart.weatherHighwayForecast = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherHighwayForecast.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherHighwayForecast,
	_defaults : {},
	
	navSelectedURL : "svg/weather/border/Speed_Road_ProvinceWayOnBackground.svg",
	navURL : "svg/weather/border/Speed_Road_RoadFrame.svg",
	backgroundURL : "svg/weather/border/Speed_Road_RoadOuterFrame.svg",
	titleURL : "svg/weather/border/HeadlineFrame.svg",
	colors : ["#ffaa00", "#fff", "#1561BF", "#2994FF"],
	navXPos : [50, 130, 210],
	bgRectOpacity : 0.3,
	count : 6,
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.title = args.title;
		this.initData(args.series);
		
		this.addBackground();
		this.addTitle();
		
		this.setNavSelectedIndex();
		this.addNav();		
		
		this.drawDetail();
	},
	
	navClick : function(index){
		var that = this;
		this.selectedIndex = index;
		this.dataSelectedIndex = 0;
		this.svg.select("#selectedImg").transition().duration(500).attr("x", that.navXPos[index]+8);
		this.dat = this.series[this.selectedIndex].dataset;
		var temp = 100+(134+20)*(this.dat.site.length-1);
		this.xScale = d3.scale.linear().domain([0, this.dat.site.length-1]).range([100, temp]);
		this.detailGroup.remove();
		this.svg.select(".scrollBar").remove();
		this.drawDetail();
		this.navClickOuter(index);
	},
	navClickOuter: function(){
		
	},
	bgRectClick : function(index){
		var that = this;
		this.dataSelectedIndex = index;
		this.svg.selectAll(".backgroundRect").each(function(d, i){
			if(i == index){
				d3.select(this).attr("opacity", that.bgRectOpacity);
			}else{
				d3.select(this).attr("opacity", 0);
			}
		});
		this.drawRoad();
		this.drawIndex(index);
		this.bgRectClickOuter(that.dat.siteID[index], that.dat.site[index], that.dat.road[index]);
	},
	bgRectClickOuter: function(siteId, siteName, roadName){
		
	},
	drawDetail : function(){
		if(!this.svg.select(".detailGroup").empty()){
			this.svg.select(".detailGroup").remove();
		}
		this.detailGroup = this.svg.append("g").attr("class", "detailGroup");
		if(this.dat.site.length > this.count){
			this.addScrollBar();
		}		

		this.addSelectRect();
		this.drawData();
		this.drawIndex(0);
		this.drawRoad();
//		this.addSelectRect();
	},	
	//添加右上角路段标示
	drawRoad : function(){
		var that = this;
		if(!this.svg.select(".roadNum").empty()){
			this.svg.select(".roadNum").remove();
		}
		var road = this.svg.append("g").attr("class", "roadNum");
		road.append("text").attr({
			"x" : 850,
			"y" : 150,
			"font-size" : 18,
			"text-anchor" : "middle",
			"fill" : "#fff"
		}).text(that.dat.road[that.dataSelectedIndex]);
	},
	//添加指数提示
	drawIndex : function(indexNum){
		var that = this;
		if(!this.svg.select(".Index").empty()){
			this.svg.select(".Index").remove();
		}
		var index = this.svg.append("g").attr("class", "Index");
		var typeXPos = [170, 400, 500, 600, 700, 860];
		var typeYPos = [490, 540, 540, 540, 540, 540];
		index.append("g").selectAll("text").data(that.dat.Type).enter().append("text").attr({
			"x" : function(d, i){return typeXPos[i];},
			"y" : function(d, i){return typeYPos[i];},
			"font-size" : function(d, i){
				if(i == 0){
					return 24;
				}else{
					return 14;
				}
			},
			"font-weight" : "normal",
			"text-anchor" : "middle",
			"fill" : "#fff",
		}).text(function(d){return d;});
		index.append("g").selectAll("text").data(that.dat.value[indexNum]).enter().append("text").attr({
			"x" : function(d, i){return typeXPos[i];},
			"y" : 590,
			"font-size" : function(d, i){
				if(i == 0){
					return 24;
				}else{
					return 20;
				}
			},
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"fill" : that.colors[0],
		}).text(function(d, i){
			if(i==0){
				return (d == 0) ? "良好" : ((d==1) ? "一般": "较差");
			}else{
				return d;
			}
		});
		var fillcolor = ["#006d00", "#e07c00", "#bd200e"];
		index.append("rect").attr({
			"x" : 110,
			"y" : 515,
			"width" : 120,
			"height" : 34,
			"rx" : 17,
			"ry" : 17,
			"fill": fillcolor[that.dat.value[indexNum][0]]
		});
	},
	
	drawData : function(){
		var that = this;
		if(!this.detailGroup.select(".Data").empty()){
			this.detailGroup.select(".Data").remove();
		}
		var detail = this.detailGroup.append("g").attr("class", "Data");
		
		detail.append("g").selectAll("text").data(that.dat.site).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i);},
			"y" : 215,
			"font-size" : 18,
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"fill" : that.colors[0],
		}).text(function(d){return d;});
		detail.append("g").selectAll("text").data(that.dat.road).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i);},
			"y" : 240,
			"font-size" : 14,
			"font-weight" : "normal",
			"text-anchor" : "middle",
			"fill" : that.colors[1],
		}).text(function(d){return d;});
		detail.append("g").selectAll("text").data(that.dat.Temp).enter().append("text").attr({
			"x" : function(d, i){return that.xScale(i);},
			"y" : 380,
			"font-size" : 18,
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"fill" : that.colors[1],
		}).text(function(d){return d[0]+"℃/"+d[1]+"℃";})
		var wh = detail.append("g").attr("class", "weather");
		for(var j=0; j<that.dat.weather.length; ++j){
			that.loadSVG(detail, that.dat.weather[j], j);			
		}
	},
	
	loadSVG : function(wh, iconName, j){
		var that = this;
		zhnx.utils.loadWeatherIconSvg(iconName, 50, 50, wh.append("g").node(), function(plane){
			d3.select(plane).attr({
				"x" : that.xScale(j) - 25,
				"y" : 260
			});
			var text = d3.select(plane).attr("zn");
			wh.append("text").attr({
				"x" : that.xScale(j),
				"y" : 340,
				"fill" : that.colors[0],
				"text-anchor" : "middle",
				"font-size" : 18
			}).text(text);
		});
	},

	addScrollBar : function(){
		var that = this;
		if(!this.svg.select(".scrollBar").empty()){
			this.svg.select(".scrollBar").remove();
		}
		var scrollBar = this.svg.append("g").attr("class", "scrollBar");
		this.scrollBarScale = d3.scale.linear().domain([0, this.dat.site.length-this.count+1]).range([75, 830]);
		var drag = d3.behavior.drag()
		.origin(function(){
			var xPos = d3.select(this).attr("x"), yPos = d3.select(this).attr("y");
			return {x:xPos, y:yPos};
		})
		.on("dragstart", function(){
			
		})
		.on("dragend", function(){
			
		})
		.on("drag", function(){
			d3.select(this).attr("x", function(){
				if(d3.event.x < 75){
					return 75;
				}else if(d3.event.x > 830){
					return 830;
				}else{
					for(var i=0; i<that.dat.site.length-that.count+1; ++i){
						if((d3.event.x >= that.scrollBarScale(i)) && (d3.event.x < that.scrollBarScale(i+1))){
							var xOffset = that.xScale(0) - that.xScale(i);
							that.svg.select(".detailGroup").attr("transform", "translate("+ xOffset + ",0)");
						}
					}
					return d3.event.x;
				}
			});
		});
		scrollBar.append("rect").attr({
			"x" : 75,
			"y" : 418,
			"width" : 100,
			"height" : 9,
			"rx" : 4,
			"ry" : 4,
			"fill" : "#73d4ff",
			"opacity" : 1,
			"cursor" : "pointer"
		}).call(drag);
	},
	
	initData : function(series){
		this.series = series;
		this.selectedIndex = 0;
		this.dataSelectedIndex = 0;
		this.type = [];		
		for(var i=0; i<series.length; ++i){
			this.type.push(series[i].type);			
		}
		this.dat = this.series[this.selectedIndex].dataset;
		var temp = 100+(134+20)*(this.dat.site.length-1);
		this.xScale = d3.scale.linear().domain([0, this.dat.site.length-1]).range([100, temp]);
		this.detailGroup = this.svg.append("g").attr("class", "detailGroup");
	},
	
	addSelectRect : function(){
		var that = this;
		if(!this.detailGroup.select(".bgRect").empty()){
			this.detailGroup.remove();
		}
		var bgRect = this.detailGroup.append("g").attr("class", "bgRect");	
		bgRect.selectAll("rect").data(that.dat.site).enter().append("rect").attr({
			"class" : "backgroundRect",
			"x" : function(d, i){return that.xScale(i)-67;},
			"y" : 185,
			"fill" : that.colors[2],
			"width" : 134,
			"height" : 215,
			"opacity" : function(d, i){if(i == that.dataSelectedIndex){
				return that.bgRectOpacity;
			}else{
				return 0;
			}},
			"cursor" : "pointer"
		})
		.on("click", function(d,i){
			that.bgRectClick(i);
			that.dataClickOuterCommand({
				type: 'click',
				context: that.id,
				contextType: 'chaObj',
				execString: "that.bgRectClick(" + i + ")",
				execMode: "evalfunc"
			});
		});
	},
	
	setNavSelectedIndex : function(){
		var that = this;
		var temp = this.svg.append("g").attr("class", "selectedIndex");
		zhnx.utils.loadSvg(that.navSelectedURL, function(importedNode){
			var plane = temp.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"id" : "selectedImg",
				"x" : that.navXPos[that.selectedIndex]+8,
				"y" : 127,
				"width": 50,
				"height":20
			});
		});
	},
	dataClickOuterCommand:function(){},
	navClickOuterCommand:function(){},
	addNav : function(){
		var that = this;
		var nav = this.svg.append("g").attr("class", "nav");
		zhnx.utils.loadSvg(that.navURL, function(importedNode){
			for(var i=0; i<that.type.length; ++i){
				var plane = nav.append("g").node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"x" : that.navXPos[i],
					"y" : 125,
					"width": 60,
					"height":24
				});
			}			
		});
		nav.append("g").selectAll("text").data(that.type).enter().append("text").attr({
			"class" : "navText",
			"x" : function(d, i){return that.navXPos[i]+33;},
			"y" : 137,
			"font-size" : 14,
			"text-anchor" : "middle",
			"dy" : ".35em",
			"fill" : that.colors[0],
			"cursor":"pointer"
		})
		.on("click", function(d, i){
			that.navClick(i);
			that.navClickOuterCommand({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.navClick(" + i + ")",
    			execMode: "evalfunc"
    		});
		})
		.text(function(d){return d;});
	},
	
	addTitle : function(){
		var that = this;
		var title = this.svg.append("g").attr("class", "title");
		zhnx.utils.loadSvg(this.titleURL, function(importedNode){
			var plane = title.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 0,
				"y" : 0,
	            "width": 295,
	            "height": 70
			});
		});
		title.append("text").attr({
			"x" : 150,
			"y" : 35,
			"fill" : that.colors[0],
			"font-size" : 24,
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"dy" : ".5em"
		}).text("路段天气预报");
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(this.backgroundURL, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 0,
				"y" : 80,
	            "width": 960,
	            "height": 575
			});
		});
	}	
});


// 气象云交通气象站
zhnx.chart.weatherTrifficStation = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherTrifficStation.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherTrifficStation,
	_defaults : {},
	
	navSelectedURL : "svg/weather/border/Speed_Road_ProvinceWayOnBackground.svg",
	navURL : "svg/weather/border/Speed_Road_RoadFrame.svg",
	backgroundURL : "svg/weather/border/trifficStationBorder.svg",
	colors : ["#ffaa00", "#fff", "#1561BF", "#00beff"],
	navXPos : [30, 110, 190, 270, 350, 430, 510],
	dataXPos : [120, 305, 488, 670, 850],
	bgRectOpacity : 0.5,
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.title = args.title;
		this.series = args.series;
		this.initData();
		this.addBackground();
		this.addTitle();
		this.setNavSelectedIndex();
		this.addNav();
		this.drawData();
	},
	
	navClick : function(index){
		var that = this;
		this.selectedIndex = index;
		this.dataSelectedIndex = 0;
		this.svg.select("#selectedImg").transition().duration(500).attr("x", that.navXPos[index]+8);
		this.dat = this.series.dataset[this.selectedIndex].data;
		this.drawData();
		this.navClickOuter(index, this.series.dataset[this.selectedIndex].stationID, this.series.dataset[this.selectedIndex].station);
	},
	navClickOuter: function(index, stationId, stationName){
		
	},
	dataClick : function(index){
		var that = this;
		this.dataSelectedIndex = index;
		this.svg.selectAll(".dataRect").each(function(d, i){
			if(i == index){
				d3.select(this).attr("opacity", that.bgRectOpacity);
			}else{
				d3.select(this).attr("opacity", 0);
			}
		});
		var icon=this.series.icons
		this.dataClickOuter(index,this.series.icons);
	},
	dataClickOuter: function(index){
		
	},
	
	drawData : function(){
		var that = this;
		if(!this.svg.select(".detailData").empty()){
			this.svg.select(".detailData").remove();
		}
		var g_data = this.svg.append("g").attr("class", "detailData");
		var detail = g_data.selectAll("g").data(that.icons).enter().append("g").attr({
			"transform" : function(d, i){
				return "translate(" + that.dataXPos[i] + ", 110)"; 
			},
			"cursor" : "pointer"
		}).on("click", function(d, i){
			that.dataClick(i);
			that.dataClickOuterCommand({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.dataClick(" + i + ")",
    			execMode: "evalfunc"
    		});
		});
		g_data.selectAll("g").each(function(d, i){
			d3.select(this).append("rect").attr({
				"class" : "dataRect",
				"x" : -80,
				"y" : 5,
				"width" : 150,
				"height" : 125,
				"fill" : that.colors[2],
				"opacity" : function(){
					if(i == that.dataSelectedIndex){
						return that.bgRectOpacity;
					}else{
						return 0;
					}
				}
			});
			var strName = "svg/weather/Index/"+that.icons[i]+".svg";
			var thus = this;
			zhnx.utils.loadSvg(strName, function(importedNode){
				var plane = d3.select(thus).node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"x" : -25,
					"y" : 10,
		            "width": 50,
		            "height": 50
				});
				var text = d3.select(plane).attr("zn");
				d3.select(thus).append("text").attr({
					"x" : 0,
					"y" : 80,
					"fill" : that.colors[1],
					"text-anchor" : "middle",
					"font-size" : 14
				}).text(text);
			});
			d3.select(this).append("text").attr({
				"x" : 0,
				"y" : 110,
				"fill" : that.colors[3],
				"text-anchor" : "middle",
				"font-weight" : "bold",
				"font-size" : 18
			}).text(that.dat[i]);
		});
	},
		
	setNavSelectedIndex : function(){
		var that = this;
		var temp = this.svg.append("g").attr("class", "selectedIndex");
		zhnx.utils.loadSvg(that.navSelectedURL, function(importedNode){
			var plane = temp.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"id" : "selectedImg",
				"x" : that.navXPos[that.selectedIndex]+8,
				"y" : 72,
				"width": 50,
				"height":20
			});
		});
	},
	
	addNav : function(){
		var that = this;
		var nav = this.svg.append("g").attr("class", "nav");
		zhnx.utils.loadSvg(that.navURL, function(importedNode){
			var station = nav.selectAll("g").data(that.stations).enter().append("g").attr({
				"transform" : function(d, i){
					return "translate(" + that.navXPos[i] + ", 70)"; 
				},
				"cursor" : "pointer"
			}).on("click", function(d, i){
				that.navClick(i);
				that.navClickOuterCommand({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.navClick(" + i + ")",
        			execMode: "evalfunc"
        		});
				
			});
			nav.selectAll("g").each(function(d, i){
				var plane = d3.select(this).node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 60,
					"height":24
				});
				d3.select(this).append("text").attr({
					"x" : 33,
					"y" : 12,
					"font-size" : 14,
					"text-anchor" : "middle",
					"dy" : ".35em",
					"fill" : that.colors[0],
				}).text(d);
			});		
		});
	},
	
	navClickOuterCommand:function(commandArgs){
		console.log(commandArgs);
	},
	dataClickOuterCommand:function(commandArgs){
		console.log(commandArgs);
	},
	
	
	initData : function(){
		this.selectedIndex = 0;
		this.dataSelectedIndex = 0;
		this.icons = this.series.icons;
		this.stations = [];
		for(var i=0; i<this.series.dataset.length; ++i){
			this.stations.push(this.series.dataset[i].station);
		}
		this.dat = this.series.dataset[this.selectedIndex].data;
	},
	
	addTitle : function(){
		var that = this;
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 160,
			"y" : 45,
			"font-size" : 24,
			"font-weight" : "bold",
			"text-anchor" : "middle",
			"fill" : that.colors[0]
		}).text(that.title);
	},
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(that.backgroundURL, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"width": 960,
				"height":265
			});
		});
	}	
});


// 气象云路段天气预报组合图
zhnx.chart.weatherRoadForecast = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherRoadForecast.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherRoadForecast,
	_defaults : {},
	
	svgWidth : 960,
	svgHeight : 200,
	maxHeight : 250,
	minHeight : 180,
	colors : ["#ffaa00", "#fff", "#1561BF", "#00beff"],
	svgYPos : [0, 205, 410, 615],
	
	option : {
		padding : {
			top : 75,
			right : 60,
			bottom : 45,
			left : 60
		},
		background : {
			show : true,
			url : "svg/weather/border/trifficWeatherAreaBorder.svg",
			width : 960,
			height : 200
		},
		title : {
			text : "",
			textAlign : 'left', 
			left : 70,
			top : 43,
			textStyle : {
				fontSize : 28
			}
		},
		xAxis : {
			unit : 'h',
			gap : false,
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		yAxis : {
			unit : '',
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		grid : {
			borderColor : "#05a8f7"
		},
		area : {
			showCircle: true,
			showText: false,
			showLastText : true,
		},
		line : {
			lineStyle: {
				interpolate: "cardinal"		// 定义线绘制形状,step\basis等，默认为linear
			},
			isText : false,
			isCircle : false,
			lineAnimate : "left",
		}
	},
	
	init : function(args){
		var that = this;
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		
		this.title = args.title;
		this.series1 = args.series1;
		this.series2 = args.series2;
		this.series3 = args.series3;
		this.series4 = args.series4;
		
		this.TempSvg = this.svg.append("svg").attr("width", this.svgWidth).attr("height", this.svgHeight)
							.attr("class", "TempSvg").attr("x", 0).attr("y", that.svgYPos[0]).attr("cursor", "pointer")
							//.on("click", function(){  that.chartClick(0);  });		
		this.VisibilitySvg = this.svg.append("svg").attr("width", this.svgWidth).attr("height", this.svgHeight)
							.attr("class", "VisibilitySvg").attr("x", 0).attr("y", that.svgYPos[1]).attr("cursor", "pointer")
							//.on("click", function(){ that.chartClick(2); });
		this.WindSvg = this.svg.append("svg").attr("width", this.svgWidth).attr("height", this.svgHeight)
							.attr("class", "WindSvg").attr("x", 0).attr("y", that.svgYPos[2]).attr("cursor", "pointer")
							//.on("click", function(){ that.chartClick(3);  });
		this.RainSvg = this.svg.append("svg").attr("width", this.svgWidth).attr("height", this.svgHeight)
							.attr("class", "VisibilityRainSvg").attr("x", 0).attr("y", that.svgYPos[3]).attr("cursor", "pointer")
							//.on("click", function(){ that.chartClick(4);  });
		this.drawChart();
	},
	drawChart : function(){
		this.drawChart1(0);
		this.drawChart2();
		this.drawChart3();
		this.drawChart4();
	},
		
	chartClick : function(idx,ico){
		// that.chartClickOuter(idx);
		var that = this;
		if(idx==0||idx==1){
			this.TempSvg.select("svg").remove();
			this.drawChart1(idx);
		}
		switch(ico[idx]){
		case "PavementTemperature" : 
		case "RoadbedTemperature" :{//路基路面温度
			that.TempSvg.transition().duration(700).attr({
				"height" : that.maxHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.VisibilitySvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+that.maxHeight+15,
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.WindSvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+that.maxHeight+that.minHeight+35,
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.RainSvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+that.maxHeight+2*that.minHeight+45,
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
		}break;
		case "VisibilityIndex" : {//能见度
			that.TempSvg.transition().duration(700).attr({
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.VisibilitySvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+that.minHeight+15,
				"height" : that.maxHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.WindSvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+that.maxHeight+that.minHeight+35,
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.RainSvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+that.maxHeight+2*that.minHeight+45,
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
		}break;
		case "windSpeed" : {//风速
			that.TempSvg.transition().duration(700).attr({
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.VisibilitySvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+that.minHeight+15,
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.WindSvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+2*that.minHeight+35,
				"height" : that.maxHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.RainSvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+that.maxHeight+2*that.minHeight+45,
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
		}break;
		case "precipitation" : {//降雨量
			that.TempSvg.transition().duration(700).attr({
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.VisibilitySvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+that.minHeight+15,
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.WindSvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+2*that.minHeight+35,
				"height" : that.minHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
			that.RainSvg.transition().duration(700).attr({
				"y" : that.svgYPos[0]+3*that.minHeight+45,
				"height" : that.maxHeight,
				"viewBox" : "0 0 " + that.svgWidth + " " + that.svgHeight,
				"preserveAspectRatio": "none"
			});
		}break;
		}
	},
	
// chartClickOuter: function(idx){
//		
// },
	
	drawChart1 : function(idx){
		var that = this;
		var opt = {
			title : {
				text : that.title + that.series1[idx].group
			},
			yAxis : {
				unit : that.series1[idx].data.unit
			},
		};
		var temp = $.extend(true, {}, this.option, opt);
		var chart1 = xCharts(this.TempSvg.node(), temp);
		chart1.FormateData(this.series1);
		chart1.drawBackground();
		chart1.drawTitle();
		var xInfo = chart1.drawXAxis(chart1.series.label[idx]);
		var yInfo = chart1.drawYAxis(chart1.series.data[idx]);
		chart1.drawGrid(xInfo, yInfo);
		chart1.drawLine(chart1.series.data[idx], xInfo, yInfo);
		chart1.drawArea(xInfo, yInfo, chart1.series.data[idx]);
	},	
	
	drawChart2 : function(){
		var that = this;
		var opt = {
			title : {
				text : that.title + that.series2[0].group
			},
			yAxis : {
				unit : that.series2[0].data.unit
			},
		};
		var temp = $.extend(true, {}, this.option, opt);
		var chart1 = xCharts(this.VisibilitySvg.node(), temp);
		chart1.FormateData(this.series2);
		chart1.drawBackground();
		chart1.drawTitle();
		var xInfo = chart1.drawXAxis(chart1.series.label[0]);
		var yInfo = chart1.drawYAxis(chart1.series.data[0]);
		chart1.drawGrid(xInfo, yInfo);
		chart1.drawLine(chart1.series.data[0], xInfo, yInfo);
		chart1.drawArea(xInfo, yInfo, chart1.series.data[0]);
	},	
	
	drawChart3 : function(){
		var that = this;
		var opt = {
			title : {
				text : that.title + that.series3[0].group
			},
			yAxis : {
				unit : that.series3[0].data.unit
			},
			line:{
				isCircle: true,	// 绘制圆点
			},
			area:{
				showArea : false
			}
		};
		var temp = $.extend(true, {}, this.option, opt);
		var chart1 = xCharts(this.WindSvg.node(), temp);
		chart1.FormateData(this.series3);
		chart1.drawBackground();
		chart1.drawTitle();
		var xInfo = chart1.drawXAxis(chart1.series.label[0]);
		var yInfo = chart1.drawYAxis(chart1.series.data[0]);
		chart1.drawGrid(xInfo, yInfo);
		chart1.drawLine(chart1.series.data[0], xInfo, yInfo);
		chart1.drawArea(xInfo, yInfo, chart1.series.data[0]);
	},	
	
	drawChart4 : function(){
		var that = this;
		var opt = {
			title : {
				text : that.title + that.series4[0].group
			},
			yAxis : {
				unit : that.series4[0].data.unit
			},
			line:{
				isCircle: true,	// 绘制圆点
			},
			area:{
				showArea : false
			}
		};
		var temp = $.extend(true, {}, this.option, opt);
		var chart1 = xCharts(this.RainSvg.node(), temp);
		chart1.FormateData(this.series4);
		chart1.drawBackground();
		chart1.drawTitle();
		var xInfo = chart1.drawXAxis(chart1.series.label[0]);
		var yInfo = chart1.drawYAxis(chart1.series.data[0]);
		chart1.drawGrid(xInfo, yInfo);
		chart1.drawLine(chart1.series.data[0], xInfo, yInfo);
		chart1.drawArea(xInfo, yInfo, chart1.series.data[0]);
	},	
	
});

//气象云-天气预报-天气临近预报
zhnx.chart.weatherTimePrediction = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.weatherTimePrediction.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.weatherTimePrediction,
	_defaults : {},
	
	 BackgroundSvgUrl: "svg/weather/border/tianqilinjinkuang.svg",
	 titleText: "银川市天气临近预报",
	 titleColor: "#ffaa00",
	 titleSize: 24,
	 titleX: 165,
	 titleY: 45,
	 rectColor: "#124999",		//矩形颜色
	 rectOpacity: 0.7,		//矩形透明度
	 rectWidth: 60,
	 rectHeight: 60,
	 unit: "°C",
	 rectHourColor: "#ffaa00",	//时间颜色
	 rectHourSize: 18,
	 rectDateColor: "white",	//日期颜色
	 rectDateSize: 12,
	 padding: {top: 20,right:20,bottom: 20,left:20},
	 lineColor: "#ffaa00", //折线颜色
	 lineTextColor: "white",
	
	 init : function(args){
	        this.baseInit(this.args.selector);
//	        this.svg = zhnx.svg;
//	        this.width = zhnx.width;
//	        this.height = zhnx.height;
	        
	        this.series = args.series;
	        this.unit =  this.series.unit !=undefined ? this.series.unit : this.unit;
	        this.wind = this.series.data.wind;
	        this.windPower = this.series.data.windPower;
	        this.weather = this.series.data.weather;
	        this.tempData = this.series.data.data;
	        
	        this.titleText = args.titleText !=undefined ? args.titleText : this.titleText;
	        this.titleColor = args.titleColor !=undefined ? args.titleColor : this.titleColor;
	        this.titleSize = args.titleSize !=undefined ? args.titleSize : this.titleSize;
	        
	        
	        
	        this.svg.attr("font-family","Microsoft Yahei")
	        this.bgSvg = this.svg.append("g").attr("class","bgSvg");	//背景组
	        this.title_g = this.svg.append("g").attr("class","title");	//标题组
	        this.timeRect = this.svg.append("g").attr("class","timeRect");	//时间组
	        this.svgImg = this.svg.append("g").attr("class","svgImg");	//天气组
//	        this.svgImg = this.svg.append("g").attr("class","svgImg");	//天气组
	        this.drawImg = this.svg.append("g").attr("class","drawImg");	//数据线组
	        this.bottomText = this.svg.append("g").attr("class","bottomText");	//底部文字组
	        
	        this.drawBg();
	        this.drawTitle();
	        this.drawTimeRext();
	        this.svgData();
	  	    this.drawlineData();
	  	    this.drawBottomText();
	  	    
	  	    this.drawRepeat();
	 },
	 drawBg: function(){
	        var that = this;

	        zhnx.utils.loadSvg(that.BackgroundSvgUrl, function(importedNode){
	            var plane = that.bgSvg.node().appendChild(importedNode.cloneNode(true));
	            d3.select(plane).attr({
	                "width": 955,
	                "height":616.9
	            });
	        });
	  },
	  drawTitle: function(){
		  var that = this;
		  
		  this.title_g.append("text").attr({
			  "x" : this.titleX,
				"y" : this.titleY,
				"text-anchor" : "middle",
				"font-size" : this.titleSize,
				"font-weight" : "bold",
				"dy" : ".35em",
				"fill" : this.titleColor
			}).text(this.titleText);
	  },
	  drawTimeRext : function(){
		  var that = this;
		  
		  this.timeRect.select(".rextImg").remove();
		  this.timeRect.select(".rectHour").remove();
		  this.timeRect.select(".rectdate").remove();
//		  var test = [1,1,1,1,1,1,1]
		  var rextImg = this.timeRect.append("g").attr("class","rextImg");	//矩形
		  rextImg.selectAll("rect").data(this.tempData).enter().append("rect").attr({
			  "fill":this.rectColor,
			  "opacity":this.rectOpacity,
			  "width":this.rectWidth,
			  "height":this.rectHeight,
			  "x":function(d,i){return 55+133*i},
			  "y":this.rectHeight+30
		  })
		  var date = new Date();
	        var changeHour = [];    //时间
	        var changeMonth = [];	//月
	        var changeDate = [];    //月，日
	        var lastdate;
	        for(var i = 0;i<7;i++){
	            var newHour = date.getHours () + 2*(i+1);//获取当前小时的后面几小时
	            var newDate = date.getDate();//获取当日
	            var newMonth = date.getMonth()+1;//获取当日

	            newDate = newHour>=24 ? (newDate+1) : newDate;//时间>=24，日期就+1
	            if(newHour>24){//处理页面中显示时间
	                newHour = newHour-24;
	                newHour = "0"+newHour;
	            }
	            else if(newHour==24){
	                newHour = "0"+"0";
	            }
	            var getYear = date.getFullYear(); //获取当年
	            lastdate = new Date(getYear, date.getMonth()+1, 0).getDate();//获取当月最后一天

	            if(newDate>lastdate){//改变后日期>当月最后一天
	                newMonth = newMonth+1;
	                newDate = new Date(getYear, newMonth, 1).getDate();//获取下月第一天
	            }
	            if(newMonth>12){
	                getYear = getYear+1;
	                newMonth = new Date(getYear).getMonth()+1;//获取当年第一个月
	            }
	            changeHour.push(newHour);//处理后的时
	            changeMonth.push(newMonth);//处理后的月
	            changeDate.push([newMonth,newDate]);//处理后的月+日
	        }
	        
	       var rectHour = this.timeRect.append("g").attr("class","rectHour");	//时间
	       rectHour.selectAll("text").data(changeHour).enter().append("text").attr({
				  "fill":this.rectHourColor,
				  "text-anchor" : "middle",
				  "font-size": this.rectHourSize,
				  "x":function(d,i){return 85+133*i},
				  "y":this.rectHeight+60
			  }).text(function(d){return d+"时";})
		  
			  var rectdate = this.timeRect.append("g").attr("class","rectdate");	//日期
	       rectdate.selectAll("text").data(changeDate).enter().append("text").attr({
				  "fill":this.rectDateColor,
				  "text-anchor" : "middle",
				  "font-size": this.rectDateSize,
				  "x":function(d,i){return 85+133*i},
				  "y":this.rectHeight+80
			  }).text(function(d){return d[0]+"月"+d[1]+"日";}) 
			    
	  },
	  svgData: function(){
		  var that = this;
		  
		  this.svgImg.select(".weather").remove();
		  
		  var weather_g = this.svgImg.append("g").attr("class", "weather");
			for(var i=0; i<this.weather.length; i++){
				var weatherSvgName = this.weather[i];
				that.drawSvgData(weather_g, weatherSvgName, i);			
			}
	  },
	  drawSvgData : function(weatherSvgG, weatherSvgUrl, i){
		  var that = this;
		  
		  zhnx.utils.loadWeatherIconSvg(weatherSvgUrl, 50, 50, weatherSvgG.append("g").node(), function(plane){
				d3.select(plane).attr({
					"x" : function(){return 60+133*i},
					"y" : that.rectHeight+30+60+20
				});
				var svgText = d3.select(plane).attr("zn");
				weatherSvgG.append("text").attr({
					"x" : function(){return 85+133*i},
					"y" :that.rectHeight+30+50+60+45,
					"fill" : "#ffaa00",
					"text-anchor" : "middle",
					"font-size" : 14
				}).text(svgText);
			});
	  },
	  drawlineData: function(args){
		  var that = this;
		  
		 
		  if(!this.drawImg.select(".drawLine").empty())
		    {
		        this.drawImg.select(".drawLine").remove();
		    }

		 this.drawLine=this.drawImg.append("g")
		 	.attr({
		 		"class": "drawLine",
		 		"transform": 'translate('+85+','+this.height/2+')'
		 	})
		 	var lineHeight = this.height/2+30
			this.drawLine.attr({
				"width": this.width*6/7,
				"height": this.height/2-10
				});
		 
		this.maxNum = d3.max(this.tempData)
		
	var g_lines = this.drawLine.append("g").attr("class", "g_lines");
	var g_circles = this.drawLine.append("g").attr("class", "g_circles");
	var g_text = this.drawLine.append("g").attr("class", "g_text");
	for(var j=0; j<this.tempData.length; j++)
	{
//		var x1 = j*(this.width-14)/(this.tempData.length);
		var x1 = 133*j;
	    var y1 = lineHeight-(this.tempData[j]*lineHeight/this.maxNum);
	    var x2 = (j+1)>=this.tempData.length ? j*133 : (j+1)*133;
//	    var x2 = (j+1)>=this.tempData.length ? (j)*(this.width)/(this.tempData.length) : (j+1)*(this.width)/(this.tempData.length);
	    var y2 = (j+1)>=this.tempData.length ? (lineHeight-(this.tempData[j]*lineHeight/this.maxNum)) : (lineHeight-(this.tempData[j+1]*lineHeight/this.maxNum))

	    /*------绘制折线*/
	    g_lines.append("line").attr({
	            "class":"line",
	            "x1":x1,
	            "y1":y1,
	            "x2":x1,
	            "y2":y1,
	            "stroke-width":"2px",
	            "stroke":this.lineColor
	        })
	        .transition().delay(100+200*j).duration(200).ease("linear").attr("x2", x2).attr("y2", y2);

	    /*------绘制折线圆圈*/
	    g_circles.append("circle")
		    .attr({
		    	"class":"g_circles"
		    })
	        .attr("cx",function(){ return x1;})
	        .attr("cy",function(){ return y1;})
	        .attr("r",function(){ return "5px";})
	        .attr({
	        	"fill": this.lineColor,
	        	"opacity": 0
	        })
	        .transition()
	        .delay(100+200*j)
	        .duration(200)
	        .attr("opacity",1)

	    /*------绘制折线文字*/
	    g_text
	        .append("text")
	        .text(function(){ return that.tempData[j]+that.unit;})
	        .attr({
	        	"fill": this.lineTextColor ,
	        	"x": x1,
	        	"y": y1,
	        	"dy": "-1em",
	        	"dx": "-1em",
	        	"opacity": 0
	        })
	        .transition()
	        .delay(100+200*j)
	        .duration(200)
	        .attr("opacity",1)
		}
	  },
	  drawBottomText: function(){
		  var that = this;
		  
		  this.bottomText.selectAll("g").remove();
//		  this.bottomText.selectAll(".rightText").remove();
		  
		  this.bottomText.attr({
			  "font-size":14,
			  "fill":"white",
			  "transform":"translate("+0+","+(617-60)+")"
		  })
		  
		  var leftText = this.bottomText.append("g").selectAll("text").data(this.wind).enter()
		  .append("text")
		  .attr({
			  "class":"leftText",
			  "text-anchor" : "end",
			  "dx":function(d,i){return 90+133*i}
			  
		  }).text(function(d){return d;})
		  
		  var rightText = this.bottomText.append("g").selectAll("text").data(this.windPower).enter()
		  .append("text")
		  .attr({
			  "class":"rightText",
			  "text-anchor" : "start",
			  "dx":function(d,i){return 110+133*i}
		  }).text(function(d){return d;})
	  },
	  drawRepeat: function(){
		  var that = this;
		  setInterval(function(){
			  
		        that.drawTimeRext();
		        that.svgData();
		        that.drawlineData();
		        that.drawBottomText();
		  },1000*60);
	  }
	  
})

// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 教育云组件开发
//
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 教育云三通两平台
zhnx.chart.eduSTLPTTitle = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduSTLPTTitle.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.eduSTLPTTitle,
	_defaults : {},
	
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.title = args.title;
		
		this.addBackground();
		this.addTitle();
	},
	
	addTitle : function(){
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 140,
			"y" : 35,
			"text-anchor" : "middle",
			"font-size" : 34,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00"
		}).text(this.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg("svg/education/stlpt_title.svg", function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 320,
	            "height": 77
			});
		});
	}
});
zhnx.chart.eduSTLPTVisitors = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduSTLPTVisitors.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.eduSTLPTVisitors,
	_defaults : {},
	
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.name = args.name;
		this.value = args.value;
		this.addBackground();
		this.drawValue();
	},
	
	drawValue : function(){
		var that = this;
		this.svg.append("g").append("text").attr({
			"x" : 10,
			"y" : 40,
			"text-anchor" : "start",
			"font-size" : 22,
			"font-weight" : "normal",
			"dy" : ".35em",
			"fill" : "#FFF"
		}).text(that.name);
		this.svg.append("g").append("text").attr({
			"x" : 200,
			"y" : 40,
			"text-anchor" : "middle",
			"font-size" : 28,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#Fff"
		}).text(that.value);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg("svg/education/visitor.svg", function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 320,
	            "height": 77
			});
		});
	}
});

//教育云右边组件-标题
zhnx.chart.eduRightTitle=function(args){
	this.args=$.extend({},this._defaults,args);
	this.init(this.args);
}
zhnx.chart.eduRightTitle.prototype=$.extend({},zhnx.chart.base,{
	constructor:zhnx.chart.eduRightTitle,
	_defaults : {},
	titleSVGurl:"svg/education/quanquyoucebiaoti.svg",
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.title = args.title;
		
		this.drawBackground();
		this.drawTitle();
	},
	//绘制标题-全区总体情况
	drawTitle : function(){
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 140,
			"y" : 35,
			"text-anchor" : "middle",
			"font-size" : 30,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00",
			"font-family" : "Microsoft Yahei"
		}).text(this.title);
	},
	//绘制背景
	drawBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background_right_title");
		zhnx.utils.loadSvg(that.titleSVGurl, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 280,
	            "height": 70
			});
		});
	}
});
//教育云右边固定组件
zhnx.chart.eduRightResource=function(args){
	this.args=$.extend({},this._defaults,args);
	this.init(this.args);
}
zhnx.chart.eduRightResource.prototype=$.extend({},zhnx.chart.base,{
	constructor:zhnx.chart.eduRightResource,
	_defaults : {},
	contentSVGurl:"svg/education/quanquyoucetubaiodikuagn.svg",
	
	init:function(args){
		this.baseInit(this.args.selector);
		//获取数据源
		this.threeTitles=args.title;
		this.SVGUrl=args.svgResource;
		
		this.schoolNum=args.schoolNum;
		this.schoolType=args.schoolType;
		this.studentNum=args.studentNum;
		this.studentType=args.studentType;
		this.teacherNum=args.teacherNum;
		this.teacherType=args.teacherType;
		this.drawBgOfSchool();
		this.drawBgOfStudent();
		this.drawBgOfTeacher();
		//this.drawThreeFrame();
	},

	//绘制背景-全区学校情况
	drawBgOfSchool : function(){
		var that = this;
		var width=872;
		var height=284;
		var SVGcontainer = this.svg.append("g").attr("class", "zone_shcool");
		zhnx.utils.loadSvg(that.contentSVGurl, function(importedNode){
			var plane = SVGcontainer.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x":16,
				//"y":105,
	            "width": width,
	            "height": height
			});
		});
		that.drawIconOfSchool(SVGcontainer);
		//
		that.drawSchoolContentOne(SVGcontainer);
		that.drawSchoolContentTwo(SVGcontainer);
		that.drawSchoolContentThree(SVGcontainer);
		that.drawSchoolContentFour(SVGcontainer);
		that.drawTitleOfSchool();
	},

	//绘制各模块文本标题- 学校
	drawTitleOfSchool:function(){
		var that =this;
		var SVGcontainer = this.svg.append("g").attr("class", "text_school");
		var title=SVGcontainer.append("text")
	          .attr({
	        	  "x" : 135,
	  			  "y" : 22,
	  			  "text-anchor" : "middle",
	  			  "font-size" : 24,
	  			  "font-weight" : "bold",
	  			  "dy" : ".35em",
	  			  "fill" : "#ffaa00",
	  			 "font-family" : "Microsoft Yahei"
	        }).text(that.threeTitles[0]);
		},
		//绘制小图标-学校
		drawIconOfSchool:function(SVGcontainer){
			var that =this;
			zhnx.utils.loadSvg(that.SVGUrl[0], function(importedNode){
				//var 
				var plane = SVGcontainer.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"x" :70,
					"y" : 85,
		            "width": 120,
		            "height": 120
				});
				
				
			});
			},
			
		// 绘制内容-全区学校情况	
			
	drawSchoolContentOne:function(SVGcontainer){
		var that =this;
		//标题
		var title=SVGcontainer.append("text")
		                      .attr({
		                    	  "x" : 393,
		              			  "y" : 85,
		              			  "text-anchor" : "middle",
		              			  "font-size" : 18,
		              			  "font-weight" : "bold",
		              			  "dy" : ".35em",
		              			  "fill" : "#00AAAA",
		         	  			 "font-family" : "Microsoft Yahei"
		                    	  }).text(that.schoolType[0]);
		//数量
		var title=SVGcontainer.append("text")
        .attr({
      	      "x" : 393,
			  "y" : 127,
			  "text-anchor" : "middle",
			  "font-size" : 18,
			  "font-weight" : "bold",
			  "dy" : ".35em",
			  "fill" : "#ffaa00",
	  		  "font-family" : "Microsoft Yahei"
      	  }).text(that.schoolNum[0]+"所");
	},
	//
	drawSchoolContentTwo:function(SVGcontainer){
		var that =this;
		//标题
		var title=SVGcontainer.append("text")
		                      .attr({
		                    	  "x" : 393,
		              			  "y" :183,
		              			  "text-anchor" : "middle",
		              			  "font-size" : 18,
		              			  "font-weight" : "bold",
		              			  "dy" : ".35em",
		              			  "fill" : "#00AAAA",
		         	  			 "font-family" : "Microsoft Yahei"
		                    	  }).text(that.schoolType[1]);
		//数量
		var title=SVGcontainer.append("text")
        .attr({
      	      "x" : 393,
			  "y" : 220,
			  "text-anchor" : "middle",
			  "font-size" : 18,
			  "font-weight" : "bold",
			  "dy" : ".35em",
			  "fill" : "#ffaa00",
	  			 "font-family" : "Microsoft Yahei"
      	  }).text(that.schoolNum[1]+"所");
		
	
	},
	//
	drawSchoolContentThree:function(SVGcontainer){
		var that =this;
		//标题
		var title=SVGcontainer.append("text")
		                      .attr({
		                    	  "x" : 698,
		                    	  "y" : 85,
		              			  "text-anchor" : "middle",
		              			  "font-size" : 18,
		              			  "font-weight" : "bold",
		              			  "dy" : ".35em",
		              			  "fill" : "#00AAAA",
		         	  			 "font-family" : "Microsoft Yahei"
		                    	  }).text(that.schoolType[2]);
		//数量
		var title=SVGcontainer.append("text")
        .attr({
      	      "x" :698,
			  "y" : 127,
			  "text-anchor" : "middle",
			  "font-size" : 18,
			  "font-weight" : "bold",
			  "dy" : ".35em",
			  "fill" : "#ffaa00",
	  			 "font-family" : "Microsoft Yahei"
      	  }).text(that.schoolNum[2]+"所");
		
		 /*SVGcontainer.append("rect").attr({
				"x" : 440,
				"y" : 178,
				"width" : 100,
				"height" : 22,
				"rx" : 6,
				"ry" : 6,
				"fill" : "#093564",
				"opacity" : 0.5
			});*/
	},
	//
	drawSchoolContentFour:function(SVGcontainer){
		var that =this;
		//标题
		var title=SVGcontainer.append("text")
		                      .attr({
		                    	  "x" :698,
		              			  "y" : 183,
		              			  "text-anchor" : "middle",
		              			  "font-size" : 18,
		              			  "font-weight" : "bold",
		              			  "dy" : ".35em",
		              			  "fill" : "#00AAAA",
		         	  			 "font-family" : "Microsoft Yahei"
		                    	  }).text(that.schoolType[3]);
		//数量
		var title=SVGcontainer.append("text")
        .attr({
      	      "x" : 698,
			  "y" : 220,
			  "text-anchor" : "middle",
			  "font-size" : 18,
			  "font-weight" : "bold",
			  "dy" : ".35em",
			  "fill" : "#ffaa00",
	  			 "font-family" : "Microsoft Yahei"
      	  }).text(that.schoolNum[3]+"所");
		
		/* SVGcontainer.append("rect").attr({
				"x" : 440,
				"y" : 248,
				"width" : 100,
				"height" : 22,
				"rx" : 6,
				"ry" : 6,
				"fill" : "#093564",
				"opacity" : 0.5
			});*/
	},
	//
    //	
	//
    //
	//
	//		
	//绘制背景-全区学生情况
	drawBgOfStudent : function(){
		var that = this;
		var width=872;
		var height=284;
		var SVGcontainer = this.svg.append("g").attr("class", "zone_student");
		zhnx.utils.loadSvg(that.contentSVGurl, function(importedNode){
			var plane = SVGcontainer.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x":16,
				"y":309,
				"width": width,
		        "height":height
			});
		});
		that.drawIconOfStudent(SVGcontainer);
		that.drawStudentContentOne(SVGcontainer);
		that.drawStudentContentTwo(SVGcontainer);
		that.drawStudentContentThree(SVGcontainer);
		that.drawStudentContentFour(SVGcontainer);
		that.drawTitleOfStudent();
		
	},
	//绘制各模块文本标题- 学生
	drawTitleOfStudent:function(){
		var that =this;
		var SVGcontainer = this.svg.append("g").attr("class", "text_student");
		var title=SVGcontainer.append("text")
		                      .attr({
		                    	  "x" : 135,
		              			  "y" : 331,
		              			  "text-anchor" : "middle",
		              			  "font-size" : 24,
		              			  "font-weight" : "bold",
		              			  "dy" : ".35em",
		              			  "fill" : "#ffaa00",
		         	  			 "font-family" : "Microsoft Yahei"
		                    	  }).text(that.threeTitles[1]);
		                     
		},
		//绘制小图标-学生
		drawIconOfStudent:function(SVGcontainer){
			var that =this;
			zhnx.utils.loadSvg(that.SVGUrl[1], function(importedNode){
				//var 
				var plane = SVGcontainer.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"x" : 70,
					"y" :394,
		            "width": 120,
		            "height": 120
				});
				
				
			});
			},
			//绘制内容-学生
			
			drawStudentContentOne:function(SVGcontainer){
				var that =this;
				//标题
				var title=SVGcontainer.append("text")
				                      .attr({
				                    	  "x" : 393,
				              			  "y" : 394,
				              			  "text-anchor" : "middle",
				              			  "font-size" : 18,
				              			  "font-weight" : "bold",
				              			  "dy" : ".35em",
				              			  "fill" : "#00AAAA",
				         	  			 "font-family" : "Microsoft Yahei"
				                    	  }).text(that.studentType[0]);
				//数量
				var title=SVGcontainer.append("text")
		        .attr({
		      	      "x" : 393,
					  "y" : 436,
					  "text-anchor" : "middle",
					  "font-size" : 18,
					  "font-weight" : "bold",
					  "dy" : ".35em",
					  "fill" : "#ffaa00",
			  			 "font-family" : "Microsoft Yahei"
		      	  }).text(that.studentNum[0]+"人");
				
				
			},
			//
			drawStudentContentTwo:function(SVGcontainer){
				var that =this;
				//标题
				var title=SVGcontainer.append("text")
				                      .attr({
				                    	  "x" : 393,
				              			  "y" : 492,
				              			  "text-anchor" : "middle",
				              			  "font-size" : 18,
				              			  "font-weight" : "bold",
				              			  "dy" : ".35em",
				              			  "fill" : "#00AAAA",
				         	  			 "font-family" : "Microsoft Yahei"
				                    	  }).text(that.studentType[1]);
				//数量
				var title=SVGcontainer.append("text")
		        .attr({
		      	      "x" : 393,
					  "y" : 530,
					  "text-anchor" : "middle",
					  "font-size" : 18,
					  "font-weight" : "bold",
					  "dy" : ".35em",
					  "fill" : "#ffaa00",
			  			 "font-family" : "Microsoft Yahei"
		      	  }).text(that.studentNum[1]+"人");
				
				
			},
			//
			drawStudentContentThree:function(SVGcontainer){
				var that =this;
				//标题
				var title=SVGcontainer.append("text")
				                      .attr({
				                    	  "x" : 698,
				              			  "y" : 394,
				              			  "text-anchor" : "middle",
				              			  "font-size" : 18,
				              			  "font-weight" : "bold",
				              			  "dy" : ".35em",
				              			  "fill" : "#00AAAA",
				         	  			 "font-family" : "Microsoft Yahei"
				                    	  }).text(that.studentType[2]);
				//数量
				var title=SVGcontainer.append("text")
		        .attr({
		      	      "x" : 698,
					  "y" : 436,
					  "text-anchor" : "middle",
					  "font-size" : 18,
					  "font-weight" : "bold",
					  "dy" : ".35em",
					  "fill" : "#ffaa00",
			  			 "font-family" : "Microsoft Yahei"
		      	  }).text(that.studentNum[2]+"人");
				
				
			},
			//
			drawStudentContentFour:function(SVGcontainer){
				var that =this;
				//标题
				var title=SVGcontainer.append("text")
				                      .attr({
				                    	  "x" : 698,
				              			  "y" : 492,
				              			  "text-anchor" : "middle",
				              			  "font-size" : 18,
				              			  "font-weight" : "bold",
				              			  "dy" : ".35em",
				              			  "fill" : "#00AAAA",
				         	  			 "font-family" : "Microsoft Yahei"
				                    	  }).text(that.studentType[3]);
				//数量
				var title=SVGcontainer.append("text")
		        .attr({
		      	      "x" : 698,
					  "y" : 530,
					  "text-anchor" : "middle",
					  "font-size" : 18,
					  "font-weight" : "bold",
					  "dy" : ".35em",
					  "fill" : "#ffaa00",
			  			 "font-family" : "Microsoft Yahei"
		      	  }).text(that.studentNum[3]+"人");
				
				
			},
	//
	//
    //
	//
	//
	//
	
	//绘制背景-全区教职工情况
	drawBgOfTeacher : function(){
		var that = this;
		var width=872;
		var height=284;
		var SVGcontainer = this.svg.append("g").attr("class", "zone_teacher");
		zhnx.utils.loadSvg(that.contentSVGurl, function(importedNode){
			var plane = SVGcontainer.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x":16,
				"y":623,
				"width": width,
		        "height": height
			});
		});
		that.drawIconOfTeacher(SVGcontainer);
		that.drawTeacherContentOne(SVGcontainer);
		that.drawTeacherContentTwo(SVGcontainer);
		that.drawTeacherContentThree(SVGcontainer);
		that.drawTeacherContentFour(SVGcontainer);
		that.drawTitleOfTeacher();
	},
	//绘制各模块文本标题- 老师
	drawTitleOfTeacher:function(){
		var that =this;
		var SVGcontainer = this.svg.append("g").attr("class", "text_student");
		var title=SVGcontainer.append("text")
		                      .attr({
		                    	  "x" : 150,
		              			  "y" : 645,
		              			  "text-anchor" : "middle",
		              			  "font-size" : 24,
		              			  "font-weight" : "bold",
		              			  "dy" : ".35em",
		              			  "fill" : "#ffaa00",
		         	  			 "font-family" : "Microsoft Yahei"
		                    	  }).text(that.threeTitles[2]);
		                     
		},
		//绘制小图标-老师
		drawIconOfTeacher:function(SVGcontainer){
			var that =this;
			zhnx.utils.loadSvg(that.SVGUrl[2], function(importedNode){
				//var 
				var plane = SVGcontainer.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"x" : 70,
					"y" : 708,
		            "width": 120,
		            "height": 120
				});
				
				
			});
			},

		//
		drawTeacherContentOne:function(SVGcontainer){
			var that =this;
			//标题
			var title=SVGcontainer.append("text")
			                      .attr({
			                    	  "x" : 393,
			              			  "y" : 708,
			              			  "text-anchor" : "middle",
			              			  "font-size" : 18,
			              			  "font-weight" : "bold",
			              			  "dy" : ".35em",
			              			  "fill" : "#00AAAA",
			         	  			 "font-family" : "Microsoft Yahei"
			                    	  }).text(that.teacherType[0]);
			//数量
			var title=SVGcontainer.append("text")
	        .attr({
	      	      "x" : 393,
				  "y" : 750,
				  "text-anchor" : "middle",
				  "font-size" : 18,
				  "font-weight" : "bold",
				  "dy" : ".35em",
				  "fill" : "#ffaa00",
		  			 "font-family" : "Microsoft Yahei"
	      	  }).text(that.teacherNum[0]+"人");
		},
		//
		drawTeacherContentTwo:function(SVGcontainer){
			var that =this;
			//标题
			var title=SVGcontainer.append("text")
			                      .attr({
			                    	  "x" : 393,
			              			  "y" :806,
			              			  "text-anchor" : "middle",
			              			  "font-size" : 18,
			              			  "font-weight" : "bold",
			              			  "dy" : ".35em",
			              			  "fill" : "#00AAAA",
			         	  			 "font-family" : "Microsoft Yahei"
			                    	  }).text(that.teacherType[1]);
			//数量
			var title=SVGcontainer.append("text")
	        .attr({
	      	      "x" : 393,
				  "y" : 844,
				  "text-anchor" : "middle",
				  "font-size" : 18,
				  "font-weight" : "bold",
				  "dy" : ".35em",
				  "fill" : "#ffaa00",
		  			 "font-family" : "Microsoft Yahei"
	      	  }).text(that.teacherNum[1]+"人");
		},
		drawTeacherContentThree:function(SVGcontainer){
			var that =this;
			//标题
			var title=SVGcontainer.append("text")
			                      .attr({
			                    	  "x" : 698,
			              			  "y" :708,
			              			  "text-anchor" : "middle",
			              			  "font-size" : 18,
			              			  "font-weight" : "bold",
			              			  "dy" : ".35em",
			              			  "fill" : "#00AAAA",
			         	  			 "font-family" : "Microsoft Yahei"
			                    	  }).text(that.teacherType[2]);
			//数量
			var title=SVGcontainer.append("text")
	        .attr({
	      	      "x" : 698,
				  "y" : 750,
				  "text-anchor" : "middle",
				  "font-size" : 18,
				  "font-weight" : "bold",
				  "dy" : ".35em",
				  "fill" : "#ffaa00",
		  			 "font-family" : "Microsoft Yahei"
	      	  }).text(that.teacherNum[2]+"人");
		},
		drawTeacherContentFour:function(SVGcontainer){
			var that =this;
			//标题
			var title=SVGcontainer.append("text")
			                      .attr({
			                    	  "x" : 698,
			              			  "y" : 806,
			              			  "text-anchor" : "middle",
			              			  "font-size" : 18,
			              			  "font-weight" : "bold",
			              			  "dy" : ".35em",
			              			  "fill" : "#00AAAA",
			         	  			 "font-family" : "Microsoft Yahei"
			                    	  }).text(that.teacherType[3]);
			//数量
			var title=SVGcontainer.append("text")
	        .attr({
	      	      "x" : 698,
				  "y" : 844,
				  "text-anchor" : "middle",
				  "font-size" : 18,
				  "font-weight" : "bold",
				  "dy" : ".35em",
				  "fill" : "#ffaa00",
		  			 "font-family" : "Microsoft Yahei"
	      	  }).text(that.teacherNum[3]+"人");
		},
		//
		//
		//
		//
		//
		//
	
	drawThreeFrame : function(){
		for(var i=0; i<this.SVGUrl.length; ++i){
			var SVGFrame = this.svg.append("g").attr("class", "three_svg");
			this.drawEachCharts(SVGFrame, that.contentSVGurl, i,that.SVGUrl[i]);
			
		}
	},
	
	//绘制图表内容
	//bg,text,img
	drawEachCharts:function(SVGFrame,contentSVGurl,j,SVGUrl){
		var that=this;
		//绘制背景
		zhnx.utils.loadSvg(contentSVGurl,function(importedNode){
			var plane=SVGFrame.node().appendChild(importedNode.cloneNode(true));
			  
			d3.select(plane).attr({
				"x" : 60,
				"y" : 270+140*j-25,
	            "width": 800,
	            "height": 200
			});
			
			SVGFrame.append("text").attr(
					{   "x" : 140,
						"y" : 35,
						"text-anchor" : "middle",
						"font-size" : 17,
						"font-weight" : "bold",
						"dy" : ".35em",
						"fill" : "#ffaa00",
			  			 "font-family" : "Microsoft Yahei"
					}).text(that.threeTitles[j]);
			
			zhnx.utils.loadSvg(SVGUrl, function(importedNode){
				//var 
				var plane = SVGFrame.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"x" : 100,
					"y" : 60,
		            "width": 50,
		            "height": 50
				});
				
				
			});
			
		});
		this.drawText(j);
		
	},
	
	
	//绑定文本
	drawText:function(j){
		var that = this;
		var textSVG = this.svg.append("g").attr("class", "value");
		var test1 = textSVG.append("g").attr("class", "test1");
		var test2 = textSVG.append("g").attr("class", "test2");
	    for(var i=0;i<this.schoolNum.length;i++){
	    	test1.append("text").attr({
	    		"x" : 70+140*i,
				"y" : 160,
				"fill" : "#ffaa00",
				"font-weight" : "bold",	
				"text-anchor" : "middle",
				"dy" : ".35em",
	  			 "font-family" : "Microsoft Yahei"
	    	}).text(that.schoolType[i]);
	    	
	    	test2.append("text").attr({
	    		 "x" : 70+140*i,
					"y" : 160,
					"fill" : "#ffaa00",
					"font-weight" : "bold",	
					"text-anchor" : "middle",
					"dy" : ".35em",
		  			 "font-family" : "Microsoft Yahei"
	    	 }).text(that.schoolNum[i]+"所");
	    }
		
			
		
	}
	
});


zhnx.chart.eduSTLPTResource = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduSTLPTResource.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.eduSTLPTResource,
	_defaults : {},
	
	backgroundURL : "svg/education/plantBorder1.svg",
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.title = args.title;
		this.mode = args.mode;
		this.value = args.series.values;
		this.icons = args.series.icons;
		this.rato = args.series.rato;
		this.yPos = [28, 85, 250, 310, 370 , 410];
		this.addBackground();
		this.addTitle();
		
		this.drawValue();
		
	},
	
	addIcons : function(){
		var icons = this.svg.append("g").attr("class", "icons");
		for(var i=0; i<this.icons.length; ++i){
			this.loadSVG(icons, this.icons[i], i);
		}
	},
	
	loadSVG : function(wh, strName, j){
		var that = this;
		zhnx.utils.loadSvg(strName, function(importedNode){
			var plane = wh.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 158+305*j-60,
				"y" : that.yPos[1],
	            "width": 120,
	            "height": 120
			});
			var text = d3.select(plane).attr("zn");
			wh.append("text").attr({
				"x" : 158+305*j,
				"y" : that.yPos[2],
				"fill" : "#fff",
				"text-anchor" : "middle",
				"font-size" : 20,
				"font-family" : "Microsoft Yahei"
			}).text(text);
		});
	},	
	
	drawValue : function(){
		this.addIcons();
		this.drawModeOne();
		this.drawRato();		
	},
	
	drawModeOne : function(){
		var that = this;
		var value = this.svg.append("g").attr("class", "value");
		for(var i=0; i<this.value.length; ++i){
			value.append("g").append("text").attr({
				"x" : 158+305*i,
				"y" : that.yPos[3],
				"fill" : "#feab01",
				"text-anchor" : "middle",
				"dy" : ".35em"
	    	}).each(function(){
	    		d3.select(this).append("tspan").attr({
	    			"font-size": 36,
	    			"font-weight" : "bold",	
	    		}).text(that.value[i]);
	    		d3.select(this).append("tspan").attr({
	    			"dx": 10,
	    			"font-size": 24,
	    			"font-weight" : "lighter",	
	    		}).text("人");
	    	});
		}
	},
	
	drawRato : function(){
		var that = this;
		var value = this.svg.append("g").attr("class", "value");
		for(var i=0; i<this.rato.length; ++i){
			value.append("text").attr({
				"x" : 158+305*i,
				"y" : that.yPos[4],
				"fill" : "#ffaa00",
				"font-weight" : "bold",	
				"text-anchor" : "middle",
				"dy" : ".35em"
	    	}).each(function(){
	    		d3.select(this).append("tspan").attr({
	    			"font-size": 30
	    		}).text(that.rato[i]);
	    		d3.select(this).append("tspan").attr({
	    			"dx": 5,
	    			"font-size": 30
	    		}).text("%");
	    	});
			value.append("rect").attr({
				"x" : 158+305*i-120,
				"y" : that.yPos[5],
				"width" : 240,
				"height" : 12,
				"rx" : 6,
				"ry" : 6,
				"fill" : "#22d0ff",
				"opacity" : 0.3
			});
			var rato = this.rato[i]*240/100;
			value.append("rect").attr({
				"x" : 158+305*i-120,
				"y" : that.yPos[5],
				"width" : 0,
				"height" : 12,
				"rx" : 6,
				"ry" : 6,
				"fill" : "#22d0ff"
			}).transition().duration(500).attr("width", rato);
		}
	},
	
	addTitle : function(){
		var that = this;
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 175,
			"y" : that.yPos[0],
			"text-anchor" : "middle",
			"font-size" : 28,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00"
		}).text(this.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(that.backgroundURL, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 0,
				"y" : 0,
	            "width": 930,
	            "height": 480
			});
		});
	}
});
zhnx.chart.eduSTLPTManagement = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduSTLPTManagement.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.eduSTLPTManagement,
	_defaults : {},
	
	backgroundURL : "svg/education/plantBorder3.svg",
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.title = args.title;
		this.mode = args.mode;
		this.icons = args.series.icons;
		this.rato = args.series.rato;
		this.yPos = [28, 85, 250, 300, 320 , 360];
		this.addBackground();
		this.addTitle();
		
		this.drawValue();
		
	},
	
	addIcons : function(){
		var icons = this.svg.append("g").attr("class", "icons");
		for(var i=0; i<this.icons.length; ++i){
			this.loadSVG(icons, this.icons[i], i);
		}
	},
	
	loadSVG : function(wh, strName, j){
		var that = this;
		zhnx.utils.loadSvg(strName, function(importedNode){
			var plane = wh.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 158+305*j-60,
				"y" : that.yPos[1],
	            "width": 120,
	            "height": 120
			});
			var text = d3.select(plane).attr("zn");
			wh.append("text").attr({
				"x" : 158+305*j,
				"y" : that.yPos[2],
				"fill" : "#fff",
				"text-anchor" : "middle",
				"font-size" : 20,
				"font-family" : "Microsoft Yahei"
			}).text(text);
		});
	},	
	
	drawValue : function(){
		this.addIcons();
		this.drawRato();		
	},
	
	drawRato : function(){
		var that = this;
		var value = this.svg.append("g").attr("class", "value");
		for(var i=0; i<this.rato.length; ++i){
			value.append("text").attr({
				"x" : 158+305*i,
				"y" : that.yPos[4],
				"fill" : "#ffaa00",
				"text-anchor" : "middle",
				"dy" : ".35em"
	    	}).each(function(){
	    		d3.select(this).append("tspan").attr({
	    			"font-size": 36,
	    			"font-weight" : "bold",
	    		}).text(that.rato[i]);
	    		d3.select(this).append("tspan").attr({
	    			"dx": 5,
	    			"font-size": 24,
	    			"font-weight" : "lighter",	
	    		}).text("%");
	    	});
			value.append("rect").attr({
				"x" : 158+305*i-120,
				"y" : that.yPos[5],
				"width" : 240,
				"height" : 12,
				"rx" : 6,
				"ry" : 6,
				"fill" : "#22d0ff",
				"opacity" : 0.3
			});
			var rato = this.rato[i]*240/100;
			value.append("rect").attr({
				"x" : 158+305*i-120,
				"y" : that.yPos[5],
				"width" : 0,
				"height" : 12,
				"rx" : 6,
				"ry" : 6,
				"fill" : "#22d0ff"
			}).transition().duration(500).attr("width", rato);
		}
	},
	
	addTitle : function(){
		var that = this;
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 175,
			"y" : that.yPos[0],
			"text-anchor" : "middle",
			"font-size" : 28,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00"
		}).text(this.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(that.backgroundURL, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 0,
				"y" : 0,
	            "width": 930,
	            "height": 435
			});
		});
	}
});
zhnx.chart.eduSTLPTRRT = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduSTLPTRRT.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.eduSTLPTRRT,
	_defaults : {},
	
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.title = args.title;
		this.value = args.value;
		this.type = args.type;
		this.data = args.data;
		this.addBackground();
		this.addTitle();
		this.drawValue();
	},
	
	drawValue : function(){
		var that = this;
		var textAry = ["占教师总数", "占学生总数", "占专任总数"];
		var value = this.svg.append("g").attr("class", "value");
		for(var i=0; i<this.type.length; ++i){
			value.append("text").attr({
				"x" : 160+290*i,
				"y" : 75,
				"text-anchor" : "middle",
				"font-size" : 20,
				"font-weight" : "bold",
				"dy" : ".35em",
				"fill" : "#fff"
			}).text(that.value[i]);
			value.append("text").attr({
				"x" : 180+275*i,
				"y" : 115,
				"text-anchor" : "middle",
				"font-size" : 18,
				"font-weight" : "normal",
				"dy" : ".35em",
				"fill" : "#fff"
			}).text(that.type[i]);
			value.append("text").attr({
				"x" : 160+280*i,
				"y" : 160,
				"font-weight" : "bold",	
				"text-anchor" : "middle",
				"dy" : ".35em"
	    	}).each(function(){
	    		d3.select(this).append("tspan").attr({
	    			"font-size": 16,
	    			"fill" : "#fff"
	    		}).text(textAry[i]);
	    		d3.select(this).append("tspan").attr({
	    			"dx": 5,
	    			"font-size": 28,
	    			"fill" : "#ffaa00"
	    		}).text(that.data[i]+"%");
	    	});
			value.append("rect").attr({
				"x" : 65+270*i,
				"y" : 180,
				"width" : 200,
				"height" : 8,
				"rx" : 4,
				"ry" : 4,
				"fill" : "#54320a",
				"opacity" : 1
			});
			var rato = that.data[i]*200/100;
			value.append("rect").attr({
				"x" : 65+270*i,
				"y" : 180,
				"width" : 0,
				"height" : 8,
				"rx" : 4,
				"ry" : 4,
				"fill" : "#00beff"
			}).transition().duration(500).attr("width", rato);
		}
	},
	
	addTitle : function(){
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 140,
			"y" : 25,
			"text-anchor" : "middle",
			"font-size" : 20,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00"
		}).text(this.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg("svg/education/renrentong.svg", function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 870,
	            "height": 240
			});
		});
	}
});
zhnx.chart.eduSTLPTBBT = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduSTLPTBBT.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.eduSTLPTBBT,
	_defaults : {},
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.title = args.title;
		this.series1 = args.series1;
		this.series2 = args.series2;
		this.resourceSVG = this.svg.append("svg").attr("width", 410).attr("height", 310).attr("x", 30).attr("y", 70);
		this.flowSVG = this.svg.append("svg").attr("width", 410).attr("height", 310).attr("x", 490).attr("y", 70);
		this.addBackground();
		this.addTitle();
		this.drawChart();
	},
	
	drawChart : function(){
		this.drawResource();
		this.drawFlow();
	},
	
	drawResource : function(){
		var that = this;
		var option = {
				padding : {
					top : 50,
					right : 20,
					bottom : 20,
					left : 50
				},
				color : ["#00beff"],
				title : {
					text : that.series1.title,
					textAlign : 'left',
					left : 70,
					textStyle : {
						color : "#fff",
						fontSize : 24
					}
				},
				xAxis : {
					unit : '年',
					gap : true,
					gapWidth : 50,
					axisPathStyle : {
						stroke: "#05a8f7",
					},
					axisLineStyle : {
						stroke: "#05a8f7",
					}
				},
				yAxis : {
					unit : '个',
					axisPathStyle : {
						stroke: "#05a8f7",
					},
					axisLineStyle : {
						stroke: "#05a8f7",
					}
				},
				bar:{
//					barWidth : 20,
					textStyle:{
						color : '#ffaa00',
						fontSize : 12
					},
				},
			};
		var chart1 = xCharts(that.resourceSVG.node(), option);
		chart1.FormateData(that.series1.series);
		chart1.drawTitle();
		var xInfo = chart1.drawXAxis(chart1.series.label[0]);
		var yInfo = chart1.drawYAxis(chart1.series.data[0]);
		chart1.drawBar(xInfo, yInfo, chart1.series.data[0]);
	},
	
	drawFlow : function(){
		var that = this;
		var option = {
			padding : {
				top : 50,
				right : 60,
				bottom : 20,
				left : 50
			},
			color : ["#0C6FC0", "#03AD4A"],
			title : {
				text : that.series2.title,
				textAlign : 'left',
				left : 70,
				textStyle : {
					color : "#fff",
					fontSize : 20
				}
			},
			xAxis : {
				unit : '月',
				gap : true,
				gapWidth : 30,
				axisPathStyle : {
					stroke: "#05a8f7",
				},
				axisLineStyle : {
					stroke: "#05a8f7",
				}
			},
			yAxis : {
				unit : '次',
				axisPathStyle : {
					stroke: "#05a8f7",
				},
				axisLineStyle : {
					stroke: "#05a8f7",
				}
			},
			area : {
				showCircle: true,
				showText: false,
// showLastText : true,
			},
			line : {
				lineStyle: {
					interpolate: "cardinal"		// 定义线绘制形状,step\basis等，默认为linear
				},
				isText : false,
				isCircle : false,
				lineAnimate : "left",
			}
		};
		var chart1 = xCharts(that.flowSVG.node(), option);
		chart1.FormateData(that.series2.series);
		chart1.drawTitle();
		chart1.drawLegend(chart1.series.legend[0]);
		var xInfo = chart1.drawXAxis(chart1.series.label[0]);
		var yInfo = chart1.drawYAxis(chart1.series.data[0]);
		chart1.drawLine(chart1.series.data[0], xInfo, yInfo);
		chart1.drawArea(xInfo, yInfo, chart1.series.data[0]);
	},
	
	addTitle : function(){
		var that = this;
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 185,
			"y" : 28,
			"text-anchor" : "middle",
			"font-size" : 28,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00"
		}).text(this.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg("svg/education/plantBorder4.svg", function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 950,
	            "height": 430
			});
		});
	}
});
zhnx.chart.eduSTLPTXXTRRT = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduSTLPTXXTRRT.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.eduSTLPTXXTRRT,
	_defaults : {},
	
	backgroundURL : "svg/education/plantBorder2.svg",
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.chartArea = this.svg.append("g").attr("class", "chartArea");
		this.title = args.title;
		this.series = args.series;

		this.addBackground();
		this.addTitle();
		this.drawNav();
		
		this.navClick(0);
	},
	
	navClick : function(index){
		this.selectedIndex = index;
		this.setNavSelected();
		this.chartArea.selectAll("*").remove();
		if(index == 0){
			this.drawRRT();
		}else{
			this.drawXXT();
		}
	},
	navClickCommand: function(commandArgs){
		
	},
	drawRRT : function(){
		var that = this;
		this.addIcons(this.series.data1.icons);
		var val = this.chartArea.append("g").attr("class", "values");
		val.selectAll("text").data(that.series.data1.value).enter().append("text").attr({
			"x" : function(d, i){ return 150+310*i; },
			"y" : 280,
			"fill" : "#ffaa00",
			"font-size" : 24,
			"font-weight" : "bold",
			"text-anchor" : "middle",
		}).text(function(d){return d;});
		var type = this.chartArea.append("g").attr("class", "type");
		type.selectAll("text").data(that.series.data1.type).enter().append("text").attr({
			"x" : function(d, i){ return 150+310*i; },
			"y" : 330,
			"fill" : "#fff",
			"font-size" : 20,
			"font-weight" : "normal",
			"text-anchor" : "middle",
		}).text(function(d){return d;});
		var text = this.chartArea.append("g").attr("class", "text");
		text.selectAll("text").data(that.series.data1.text).enter().append("text").attr({
			"x" : function(d, i){ return 150+310*i-3; },
			"y" : 370,
			"fill" : "#fff",
			"font-size" : 14,
			"font-weight" : "normal",
			"text-anchor" : "end",
			"dy" : ".35em"
		}).text(function(d){return d;});
		var ratio = this.chartArea.append("g").attr("class", "ratio");
		ratio.selectAll("text").data(that.series.data1.ratio).enter().append("text").attr({
			"x" : function(d, i){ return 150+310*i+3; },
			"y" : 370,
			"fill" : "#ffaa00",
			"font-size" : 30,
			"font-weight" : "bold",
			"text-anchor" : "start",
			"dy" : ".35em"
		}).text(function(d){return d+"%";});
		var bgRect = this.chartArea.append("g").attr("class", "bgRect");
		bgRect.selectAll("rect").data(that.series.data1.ratio).enter().append("rect").attr({
			"x" : function(d, i){return 150+310*i-120;},
			"y" : 410,
			"width" : 240,
			"height" : 12,
			"rx" : 6,
			"ry" : 6,
			"fill" : "#22d0ff",
			"opacity" : 0.3
		});
		var Rect = this.chartArea.append("g").attr("class", "Rect");
		Rect.selectAll("rect").data(that.series.data1.ratio).enter().append("rect").attr({
			"x" : function(d, i){return 150+310*i-120;},
			"y" : 410,
			"width" : 0,
			"height" : 12,
			"rx" : 6,
			"ry" : 6,
			"fill" : "#22d0ff"
		}).transition().duration(1000).attr("width", function(d, i){
			return d/100*240;
		});
	},
	
	drawXXT : function(){
		var that = this;
		this.addIcons(this.series.data2.icons);
		var val = this.chartArea.append("g").attr("class", "values");
		val.selectAll("text").data(that.series.data2.ratio).enter().append("text").attr({
			"x" : function(d, i){ return 150+310*i; },
			"y" : 340,
			"fill" : "#ffaa00",
			"font-size" : 30,
			"font-weight" : "bold",
			"text-anchor" : "middle",
		}).text(function(d){return d+"%";});
		var type = this.chartArea.append("g").attr("class", "type");
		type.selectAll("text").data(that.series.data2.type).enter().append("text").attr({
			"x" : function(d, i){ return 150+310*i; },
			"y" : 280,
			"fill" : "#fff",
			"font-size" : 20,
			"font-weight" : "normal",
			"text-anchor" : "middle",
		}).text(function(d){return d;});
		var bgRect = this.chartArea.append("g").attr("class", "bgRect");
		bgRect.selectAll("rect").data(that.series.data2.ratio).enter().append("rect").attr({
			"x" : function(d, i){return 150+310*i-120;},
			"y" : 380,
			"width" : 240,
			"height" : 12,
			"rx" : 6,
			"ry" : 6,
			"fill" : "#22d0ff",
			"opacity" : 0.3
		});
		var Rect = this.chartArea.append("g").attr("class", "Rect");
		Rect.selectAll("rect").data(that.series.data2.ratio).enter().append("rect").attr({
			"x" : function(d, i){return 150+310*i-120;},
			"y" : 380,
			"width" : 0,
			"height" : 12,
			"rx" : 6,
			"ry" : 6,
			"fill" : "#22d0ff"
		}).transition().duration(1000).attr("width", function(d, i){
			return d/100*240;
		});
	},
	
	addIcons : function(icons){
		var icon = this.chartArea.append("g").attr("class", "icons");
		for(var i=0; i<icons.length; ++i){
			this.loadSVG(icon, icons[i], i);
		}
	},
	
	loadSVG : function(wh, strName, j){
		var that = this;
		zhnx.utils.loadSvg(strName, function(importedNode){
			var plane = wh.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 150+310*j-50,
				"y" : 140,
	            "width": 100,
	            "height": 100
			});
		});
	},
	
	setNavSelected : function(){
		var that = this;
		var xPos = 32 + this.selectedIndex * 184;
		this.svg.select(".selectRect").transition().duration(500).attr("x", xPos);
		this.svg.selectAll(".navText").each(function(d, i){
			if(that.selectedIndex == i){
				d3.select(this).attr("fill", "#fff");
			}else{
				d3.select(this).attr("fill", "#ffaa00");
			}
		});
	},
	
	drawNav : function(){
		var that = this;
		var select = this.svg.append("g").attr("class", "select");
		zhnx.utils.loadSvg("svg/education/selected.svg", function(importedNode){
			var plane = select.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"class" : "selectRect",
				"x" : 32,
				"y" : 69,
	            "width": 147,
	            "height": 33
			});
		});
		var nav = this.svg.append("g").attr("class", "nav");
		zhnx.utils.loadSvg("svg/education/nav.svg", function(importedNode){
			var g_nav = nav.selectAll("g").data(that.series.nav).enter().append("g").attr({
				"transform" : function(d, i){
					return "translate(" + (20+184*i) + ", 65)"; 
				},
				"cursor" : "pointer"
			}).on("click", function(d, i){
				that.navClick(i);
				that.navClickCommand({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.navClick(" + i + ")",
        			execMode: "evalfunc"
        		});
			});
			nav.selectAll("g").each(function(d, i){
				var plane = d3.select(this).node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 164,
					"height":40
				});
				d3.select(this).append("text").attr({
					"class" : "navText",
					"x" : 88,
					"y" : 20,
					"font-size" : 16,
					"text-anchor" : "middle",
					"dy" : ".35em",
					"fill" : function(){
						return i==0 ? "#fff" : "#ffaa00";
					}
				}).text(d);
			});		
		});
	},
	
	addTitle : function(){
		var that = this;
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 185,
			"y" : 28,
			"text-anchor" : "middle",
			"font-size" : 28,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00"
		}).text(this.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg(that.backgroundURL, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 950,
	            "height": 460
			});
		});
	}
});

zhnx.chart.eduSTLPTXXT = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduSTLPTXXT.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.eduSTLPTXXT,
	_defaults : {},
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.title = args.title;
		this.values = args.values;
		this.icons = args.icons;

		this.addBackground();
		this.addTitle();
		this.drawValue();
		this.addIcons();
	},
	
	drawValue : function(){
		var that = this;
		var value = this.svg.append("g").attr("class", "value");
		for(var i=0; i<this.values.length; ++i){
			value.append("text").attr({
				"x" : 75+280*i,
				"y" : 70,
				"text-anchor" : "middle",
				"font-size" : 28,
				"font-weight" : "bold",
				"dy" : ".35em",
				"fill" : "#ffaa00"
			}).text(that.values[i]+"%");
			value.append("rect").attr({
				"x" : 50+280*i,
				"y" : 130,
				"width" : 200,
				"height" : 8,
				"rx" : 4,
				"ry" : 4,
				"fill" : "#093564",
				"opacity" : 0.5
			});
			var rato = that.values[i]*200/100;
			value.append("rect").attr({
				"x" : 50+280*i,
				"y" : 130,
				"width" : 0,
				"height" : 8,
				"rx" : 4,
				"ry" : 4,
				"fill" : "#00beff"
			}).transition().duration(500).attr("width", rato);
		}
	},
	
	addIcons : function(){
		var icons = this.svg.append("g").attr("class", "icons");
		for(var i=0; i<this.icons.length; ++i){
			this.loadSVG(icons, this.icons[i], i);
		}
	},
	
	loadSVG : function(wh, strName, j){
		var that = this;
		zhnx.utils.loadSvg(strName, function(importedNode){
			var plane = wh.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"x" : 240+280*j-25,
				"y" : 65,
	            "width": 50,
	            "height": 50
			});
			var text = d3.select(plane).attr("zn");
			wh.append("text").attr({
				"x" : 50+280*j,
				"y" : 110,
				"fill" : "#fff",
				"text-anchor" : "start",
				"font-size" : 18
			}).text(text);
		});
	},	
	
	addTitle : function(){
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 140,
			"y" : 25,
			"text-anchor" : "middle",
			"font-size" : 20,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00"
		}).text(this.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg("svg/education/xiaoxiaotong.svg", function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 870,
	            "height": 180
			});
		});
	}
});

// 教育云柱状图
zhnx.chart.eduBar = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.eduBar.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.eduBar,
	_defaults : {},	
	circleColor: ["#4981bc","#4981bc","#ffff33"],//不变的内外圈颜色定义
	neiCircleNum:100,//内圈数量
	animationTime:1000,//定义动画时间 
	waiCircleMultiple: 5,       // 外层半径倍数,
	neiInnerMultiple: 2,        // 内圈不随数据变化的内半径
	neiOuterMultiple: 1.1,        // //内圈不随数据变化的外半径
	
	
	init : function(args){
		this.baseInit(this.args.selector);
	    
		this.waiCircleR = parseInt(Math.min(this.width,this.height)/this.waiCircleMultiple);
		this.innerRadius = this.waiCircleR/this.neiInnerMultiple ;              // 内圈不随数据变化的内半径
		this.outerRadius = this.innerRadius*this.neiOuterMultiple ;        // 内圈不随数据变化的外半径
		this.svg.attr("font-family", "Microsoft YaHei");
		this.title = args.title;
		this.border = args.border;
		this.series = args.series;
		this.chartSVG = this.svg.append("svg").attr({
			"x" : 10,
			"y" : 60,
			"width" : 930,
			"height" : 400
		});
		
		this.chartRingSVG = this.svg.append("svg").attr({
			"x" : 10,
			"y" : 60,
			"width" : 930,
			"height" : 400
		});
		// 定义内外圈圆环svg
		this.chartPreschoolEducationSVG=this.svg.append("svg").attr({
			"x":10,
			"y":60,
			"width":930,
			"height":400
		});
		this.schoolTypeSVG=this.svg.append("svg").attr({
			"x":10,
			"y":60,
			"width":930,
			"height":400
		});
		this.addBackground();
		this.addTitle();
		this.drawChart();
//		this.drawPreschoolEducation();
//		this.schoolTypeCircle();
	},
	
	drawChart : function(){
		if(this.border == "chartBorder"){
			var args = {
				option : {
					color : ["#00beff", "#E2E217", "#E5109E"]
				},
				series : this.series
			};
			this.drawBar(this.chartSVG, args);
		}else{
			this.chartSVG.attr("y", 120).attr("height", 350);
			this.selectedIndex = 0;
			this.drawNav();
			this.drawData(this.selectedIndex);
		}
	},
	
	drawData : function(index){
		this.chartSVG.selectAll("*").remove();
		if(index==3){
			var args = {
					option : {
						bar:{
//							barWidth : 13
							},
						
						color : ["#00beff", "#1AD31A", "#EAC31F", "#FF1717", "#C017FF"]
					},
					series : this.series.series[index]
				};
		}else{
			var args = {
					option : {
						
						color : ["#00beff", "#1AD31A", "#EAC31F", "#FF1717", "#C017FF"]
					},
					series : this.series.series[index]
				};
		}
		this.drawBar(this.chartSVG, args);	
	},
	// 全区学前教育-学校办学规模内外圈图
	drawPreschoolEducation:function(){

        var innerDataList = [];
        //数据填充,100个1的数组
        for(var j = 0;j<this.neiCircleNum;j++){
        	innerDataList.push(1);
        }
		
  // 定义布局
	    
	    var pie=d3.layout.pie().value(function(d){
	    	return d;
	    });
	    //绑定值
	    var piedata=pie(innerDataList);
	   
	  var svg= this.chartPreschoolEducationSVG
	                         .selectAll("g")
	                         .data(piedata)//绑定内圈数据
	                         .enter()
	                         .append("g");
	    //定义弧生成器
	    var innerRadius = 80;
	    var outerRadius = 95;
	    var inner_arc=d3.svg.arc()
	                    .innerRadius(this.innerRadius)
	                    .outerRadius(this.outerRadius);
	    
	 
	    //绘制路径
	    svg.append("path")//绘制 内圈的路径 
	              .attr("fill",this.circleColor[0])
	              .transition()   //开启一个动画过渡
	              .duration(this.animationTime)  //定义动画 
	              .attrTween("d",function(d,i){
	            	  var start={
	            			  startAngle:piedata[i].startAngle,
	            			  endAngle:piedata[i].startAngle
	            	  };
	            	  var finish={
	            			  startAngle:piedata[i].startAngle,
	            			  endAngle:piedata[i].endAngle
	            	  };
	            	  var i=d3.interpolate(start,finish);
	            	  return function(d){
	            		  return inner_arc(i(d));
	            	  }
	              });
	    
  
	    //绘制外圈圆形
	    this.chartPreschoolEducationSVG.append("circle")
	              .attr({
	            	  "opacity":0,
	            	  "class":"waiCircle",
	            	  "r":this.waiCircleR,
	            	  "fill":"none",
	            	  "stroke":this.circleColor[1],
	            	  "stroke-width":1
	              })
	               .transition()
	               .duration(this.animationTime)
	               .attr({ "opacity":1 });
	
	  
	  
	   
	},
	
	//全区中小学教育-办学类型分析
	 schoolTypeCircle:function(){
		var that=this;
		this.schoolTypeSVG.append("g")
		                  .append("circle")
		                  .attr({
		                	  "opacity":0,
		                	  "r":this.waiCircleR,
		                	  "fill":"none",
		                	  "stroke":that.circleColor[2],
		                	  "stroke-width":1
		                  });
		
		                this.schoolTypeSVG.append("circle")
                            .attr({
		                	  "opacity":0,
		                	  "r":this.waiCircleR,
		                	  "fill":"none",
		                	  "stroke":this.circleColor[1],
		                	  "stroke-width":1
		                  })
                              .transition()
                              .duration(this.animationTime)
                              .attr({"opacity":1})
		                  
		 
 
		 
	},
// drawRingData: function(index){
// var that = this;
//// this.chartRingSVG.append("circle").attr({
//// "r": 100,
//// "x":200,
//// "y": 100,
//// "fill": "none",
//// "stroke": "white",
//// "stroke-width": 1
//// })
// var args = {
// option : {
// color : ["#00beff", "#1AD31A", "#EAC31F", "#FF1717", "#C017FF"],
// pie:{
// radius: [0.5, 0.7],
//					
// center:{
//	 show: false}
//	 }
// },
// series : this.series.series[index]
// };
// this.drawRing(this.chartRingSVG, args);
// },
	
	navClick : function(index){
		this.selectedIndex = index;
		this.setNavSelected();
		this.drawData(index);
	},
	navClickCommand: function(commandArgs){
		
	},
	setNavSelected : function(){
		var that = this;
		var xPos = 32 + this.selectedIndex * 184;
		this.svg.select(".selectRect").transition().duration(500).attr("x", xPos);
		this.svg.selectAll(".navText").each(function(d, i){
			if(that.selectedIndex == i){
				d3.select(this).attr("fill", "#fff");
			}else{
				d3.select(this).attr("fill", "#ffaa00");
			}
		});
	},
	
	drawNav : function(){
		var that = this;
		var select = this.svg.append("g").attr("class", "select");
		zhnx.utils.loadSvg("svg/education/selected.svg", function(importedNode){
			var plane = select.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"class" : "selectRect",
				"x" : 32,
				"y" : 69,
	            "width": 147,
	            "height": 33
			});
		});
		var nav = this.svg.append("g").attr("class", "nav");
		zhnx.utils.loadSvg("svg/education/nav.svg", function(importedNode){
			var g_nav = nav.selectAll("g").data(that.series.nav).enter().append("g").attr({
				"transform" : function(d, i){
					return "translate(" + (20+184*i) + ", 65)"; 
				},
				"cursor" : "pointer"
			}).on("click", function(d, i){
				that.navClick(i);
				that.navClickCommand({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.navClick(" + i + ")",
        			execMode: "evalfunc"
        		});
			});
			nav.selectAll("g").each(function(d, i){
				var plane = d3.select(this).node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 164,
					"height":40
				});
				d3.select(this).append("text").attr({
					"class" : "navText",
					"x" : 88,
					"y" : 20,
					"font-size" : 16,
					"text-anchor" : "middle",
					"dy" : ".35em",
					"fill" : function(){
						return i==0 ? "#fff" : "#ffaa00";
					}
				}).text(d);
			});		
		});
	},
	
	addTitle : function(){
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 200,
			"y" : 35,
			"text-anchor" : "middle",
			"font-size" : 28,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00"
		}).text(this.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		var url = "svg/education/"+this.border+".svg";
		zhnx.utils.loadSvg(url, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 965,
	            "height": 475
			});
		});
	}
});


//带导航的混合图
zhnx.chart.mixtureChart = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.mixtureChart.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.mixtureChart,
	_defaults : {},		
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.title = args.title;
		this.chartType = args.chartType;
		this.series = args.series;
		this.chartSVG = this.svg.append("svg").attr({
			"x" : 10,
			"y" : 120,
			"width" : 930,
			"height" : 350
		});
		
		this.addBackground();
		this.addTitle();
		this.drawNav();
		this.drawChart(0);
	},
	
	drawChart : function(index){
		this.chartSVG.selectAll("*").remove();
		var args = {
			option : {
				color : ["#00beff", "#1AD31A", "#EAC31F", "#FF1717", "#C017FF"]
			},
			series : this.series.series[index]
		};			
		switch(this.chartType[index]){
		case "ring" :
			if(index==0){
				var changeArgs =  {
						option: {
							padding : {
								top : 30,
								right : 50,
								bottom : 40,
								left : 30
							},
							pie:{
								center:{
									width:30,
									height:30
								},
								smallPie:{	//不需数据的环
									inner: 1.25,
									outer: 1.3,
								},
								pieCircle:{	//不需数据的圆
									r: 1.35
								},
								pieCircle2:{	//不需数据的圆2
									show: true,		//显示圆
								}
							}
						},
						 series : this.series.series[index]
					}
				
			}else if(index == 4){
				var changeArgs =  {
						 option : {
							 
							 color : [ 'rgba(9,209,206,0.5)', 'rgba(199,252,46,0.5)', 'rgba(146,255,97,0.5)', 'rgba(50,255,98,0.5)','rgba(255,99,204,0.5)','rgba(250,104,100,0.5)'],
								legend : {
									show : false
								},
								pie:{
									radius: [0.45, 0.63],
									roseType : 'false',
									center:{
										show: false
									},
									itemStyle: {
										normal: {
											borderColor: ['rgb(9,209,206)', 'rgb(199,252,46)', 'rgb(146,255,97)', 'rgb(50,255,98)','rgb(255,99,204)','rgb(250,104,100)'],
											borderWidth: 2
										}
									},
									label: {
										normal: {
											textStyle: {
												color: ['rgb(9,209,206)', 'rgb(199,252,46)', 'rgb(146,255,97)', 'rgb(50,255,98)','rgb(255,99,204)','rgb(250,104,100)']
												}
											}
									},
									labelLine:{
										normal:{
											length: 20,
											length2: 20,
											lineStyle:{
												color: "white"
											}
										}
									},
									smallPie:{	//不需数据的环
										inner: 0.55,
										outer: 0.6,
										color: "#009BD6",
										dataNum: 40,	//圆环里面有多少段
										intervalNum: 0.02,	//每段环之间间隔大小，0为没有间隔
									},
									pieCircle:{	//不需数据的圆
										r: 1.2,
										border: "#0778B4"
									}
								}	
						 },
						 
						 series : this.series.series[index]
					}
			}
			this.drawRing(this.chartSVG, changeArgs,index);
			break;
		case "bar" :
			if(index == 3){
				var args = {
						option : {
							bar:{
//								barWidth:13
							},
							color : ["#00beff", "#1AD31A", "#EAC31F", "#FF1717", "#C017FF"]
						},
						series : this.series.series[index]
					};
			}
			this.drawBar(this.chartSVG, args);
			break;
		default :
			break;
		}
	},
	
	navClick : function(index){
		this.selectedIndex = index;
		this.setNavSelected();
		this.drawChart(index);
	},
	navClickCommand: function(commandArgs){
		
	},
	pathBgXchartClickCommand: function(commandArgs){
		
	},
	pathXchartClickCommand: function(commandArgs){
		
	},
	setNavSelected : function(){
		var that = this;
		var xPos = 32 + this.selectedIndex * 184;
		this.svg.select(".selectRect").transition().duration(500).attr("x", xPos);
		this.svg.selectAll(".navText").each(function(d, i){
			if(that.selectedIndex == i){
				d3.select(this).attr("fill", "#fff");
			}else{
				d3.select(this).attr("fill", "#ffaa00");
			}
		});
	},
	
	drawNav : function(){
		var that = this;
		var select = this.svg.append("g").attr("class", "select");
		zhnx.utils.loadSvg("svg/education/selected.svg", function(importedNode){
			var plane = select.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"class" : "selectRect",
				"x" : 32,
				"y" : 69,
	            "width": 147,
	            "height": 33
			});
		});
		var nav = this.svg.append("g").attr("class", "nav");
		zhnx.utils.loadSvg("svg/education/nav.svg", function(importedNode){
			var g_nav = nav.selectAll("g").data(that.series.nav).enter().append("g").attr({
				"transform" : function(d, i){
					return "translate(" + (20+184*i) + ", 65)"; 
				},
				"cursor" : "pointer"
			}).on("click", function(d, i){
				that.navClick(i);
				that.navClickCommand({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.navClick(" + i + ");",
        			execMode: "evalfunc"
        		});
			});
			nav.selectAll("g").each(function(d, i){
				var plane = d3.select(this).node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 164,
					"height":40
				});
				d3.select(this).append("text").attr({
					"class" : "navText",
					"x" : 88,
					"y" : 20,
					"font-size" : 16,
					"text-anchor" : "middle",
					"dy" : ".35em",
					"fill" : function(){
						return i==0 ? "#fff" : "#ffaa00";
					}
				}).text(d);
			});		
		});
	},
	
	addTitle : function(){
		var title = this.svg.append("g").attr("class", "title");
		title.append("text").attr({
			"x" : 200,
			"y" : 35,
			"text-anchor" : "middle",
			"font-size" : 28,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00"
		}).text(this.title);
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		var url = "svg/education/navBorder.svg";
		zhnx.utils.loadSvg(url, function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 965,
	            "height": 475
			});
		});
	}
});


// 教育云环形图
zhnx.chart.eduConstitute = function(args){
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
};
zhnx.chart.eduConstitute.prototype = $.extend({}, zhnx.chart.base, {
    constructor: zhnx.chart.eduConstitute,
    _defaults: {},

    BackgroundSvgUrl: "svg/education/chartBorder.svg",
    smallBoxUrl : "svg/education/leftTable.svg",
// navBgUrl: "svg/education/stlpt_title.svg",

    totalTitle: "",
    isTable: true,  // 是否含左侧图表,true含,默认为true
    isNeiCircle: true,  // 是否绘制内圈（不含数据），默认为true绘制
    isWaiCircle: true,  // 是否绘制外圈（不含数据），默认为true绘制
    neiCircleNum: 100,   // 内圈数据个数（不为动态）
    circleColor: ["#4981bc","#4981bc"],    // 不随数据变化的环的颜色，[内层,外层]
    waiCircleMultiple: 5,       // 外层半径倍数
    neiInnerMultiple: 2,        // 内圈不随数据变化的内半径
    neiOuterMultiple: 1.1,        // //内圈不随数据变化的外半径
    waiCircleStrokeWidth: 1,    // 外层线宽
    circleDataColor: ["rgb(43,166,225)","rgb(255,103,204)","rgb(154,153,247)","rgb(52,204,103)","rgb(218,223,0)","rgb(252,170,96)"],        // 数据圆环颜色
    circleDataBorder: "none",	//数据圆环边颜色
    circleDataBorderWidth: 0,
    dataInnerMultiple: 1.4,        // 数据变化的内半径倍数
    dataOuterMultiple: 1.3,        // 数据变化的外半径倍数
    dataInnerMultipleNei: 1.6,      // 数据变化内圈的内半径倍数
    dataOuterMultipleNei: 1.4,      // 数据变化内圈的外半径倍数
    isDoubleCircle: true,           // 是否有两圈数据相同的圆环，默认有true
    colorRranSparency: 0.6,      // 数据内圈透明度
    ifRranSparency: false,        // 数据圆环是否需要有透明度,默认不需要
    circleStrokeWidth: 2,       // 圆环边宽度
    animateTime: 1000,          // 动画时间
    lineCircleColor: "white",       // 引出线圆点、线、文字颜色（不含数字比例）
    lineCircleR: 3,             // 引出线圆点半径
    lineStrokeWidth: 1,         // 引出线宽度
    lineHMultiple: 1.8,         // 引出线第1段倍数
    lineWMultiple: 2.5,         // 引出线第2段倍数
    circelStart: 1,             // 引出线圆点开始位置，1表示在圆环中心
    unit: "%",                     // 单位
    isPercent: true,            // 是否为百分比显示数据，true是
    fontSize: 14,
    isNav: true,                // 是否含导航，默认含有true
    nav: [],
    navFontSize: 14,            // 拼接单位为px
    navColor: "#f4a218",
    clickNavColor: "white",       // 导航选中颜色
    titleColor: "#ffaa00",
    tableName: [],           // 左侧表格文字
    tableUnit: "人",         // 左侧表格单位
    tableTextFontSize: 18,   // 左侧表格文字大小
    tableNumFontSize: 18,   // 左侧表格数字大小
    isTableBeiShuW: 1.5,     // 左侧含表格，环图位置水平
    isTableBeiShuH: 2,     // 左侧含表格，环图位置竖直
    noneTableBeiShuW: 2,     // 左侧不含表格，环图位置水平
    noneTableBeiShuH: 2,     // 左侧不含表格，环图位置竖直
    // navIsInterface: "true", //

    init: function(args){
        this.baseInit(args.selector);

// this.svg = zhnx.svg;
// this.width = zhnx.width;
// this.height = zhnx.height;

        this.series = args.series;
        
        this.totalTitle = args.totalTitle !=undefined ? args.totalTitle : this.totalTitle;
        this.isTable = args.isTable !=undefined ? args.isTable : this.isTable;
        this.isNeiCircle = args.isNeiCircle !=undefined ? args.isNeiCircle : this.isNeiCircle;
        this.isWaiCircle = args.isWaiCircle !=undefined ? args.isWaiCircle : this.isWaiCircle;
        this.neiCircleNum = args.neiCircleNum !=undefined ? args.neiCircleNum : this.neiCircleNum;
        this.circleColor = args.circleColor !=undefined ? args.circleColor : this.circleColor;
        this.waiCircleMultiple = args.waiCircleMultiple !=undefined ? args.waiCircleMultiple : this.waiCircleMultiple;
        this.neiInnerMultiple = args.neiInnerMultiple !=undefined ? args.neiInnerMultiple : this.neiInnerMultiple;
        this.neiOuterMultiple = args.neiOuterMultiple !=undefined ? args.neiOuterMultiple : this.neiOuterMultiple;
        this.waiCircleStrokeWidth = args.waiCircleStrokeWidth !=undefined ? args.waiCircleStrokeWidth : this.waiCircleStrokeWidth;
        this.circleDataColor = args.circleDataColor !=undefined ? args.circleDataColor : this.circleDataColor;
        this.circleDataBorder = args.circleDataBorder !=undefined ? args.circleDataBorder : this.circleDataBorder;
        this.circleDataBorderWidth = args.circleDataBorderWidth !=undefined ? args.circleDataBorderWidth : this.circleDataBorderWidth;
        this.dataInnerMultiple = args.dataInnerMultiple !=undefined ? args.dataInnerMultiple : this.dataInnerMultiple;
        this.dataOuterMultiple = args.dataOuterMultiple !=undefined ? args.dataOuterMultiple : this.dataOuterMultiple;
        this.isDoubleCircle = args.isDoubleCircle !=undefined ? args.isDoubleCircle : this.isDoubleCircle;
        this.lineCircleColor = args.lineCircleColor !=undefined ? args.lineCircleColor : this.lineCircleColor;
        this.lineCircleR = args.lineCircleR !=undefined ? args.lineCircleR : this.lineCircleR;
        this.lineHMultiple = args.lineHMultiple !=undefined ? args.lineHMultiple : this.lineHMultiple;
        this.lineWMultiple = args.lineWMultiple !=undefined ? args.lineWMultiple : this.lineWMultiple;
        this.circelStart = args.circelStart !=undefined ? args.circelStart : this.circelStart;
        this.unit = args.unit !=undefined ? args.unit : this.unit;
        this.isPercent = args.isPercent !=undefined ? args.isPercent : this.isPercent;
        this.fontSize = args.fontSize !=undefined ? args.fontSize : this.fontSize;
        this.ifRranSparency = args.ifRranSparency !=undefined ? args.ifRranSparency : this.ifRranSparency;
        this.isNav = args.isNav !=undefined ? args.isNav : this.isNav;
        this.nav = args.nav !=undefined ? args.nav : this.nav;
        this.navFontSize = args.navFontSize !=undefined ? args.navFontSize : this.navFontSize;
        this.navColor = args.navColor !=undefined ? args.navColor : this.navColor;
        this.clickNavColor = args.clickNavColor !=undefined ? args.clickNavColor : this.clickNavColor;
        this.titleColor = args.titleColor !=undefined ? args.titleColor : this.titleColor;
        this.tableName = args.tableName !=undefined ? args.tableName : this.tableName;
        this.tableUnit = args.tableUnit !=undefined ? args.tableUnit : this.tableUnit;
        this.isTableBeiShuW = args.isTableBeiShuW !=undefined ? args.isTableBeiShuW : this.isTableBeiShuW;
        this.isTableBeiShuH = args.isTableBeiShuH !=undefined ? args.isTableBeiShuH : this.isTableBeiShuH;
        this.noneTableBeiShuW = args.noneTableBeiShuW !=undefined ? args.noneTableBeiShuW : this.noneTableBeiShuW;
        this.noneTableBeiShuH = args.noneTableBeiShuH !=undefined ? args.noneTableBeiShuH : this.noneTableBeiShuH;
       
        this.waiCircleR = parseInt(Math.min(this.width,this.height)/this.waiCircleMultiple);
        this.neiInnerCircle = this.waiCircleR/this.neiInnerMultiple ;              // 内圈不随数据变化的内半径
        this.neiOuterCircle = this.neiInnerCircle*this.neiOuterMultiple ;        // 内圈不随数据变化的外半径
        this.dataInnerCircle = this.waiCircleR/this.dataInnerMultiple ;        // 随数据变化的内半径
        this.dataOuterCircle = this.dataInnerCircle*this.dataOuterMultiple ;        // 随数据变化的外半径
        this.dataInnerCircleNei = this.waiCircleR/this.dataInnerMultipleNei ;        // 随数据变化内圈的内半径
        this.dataOuterCircleNei = this.dataInnerCircleNei*this.dataOuterMultipleNei ;        // 随数据变化内圈的外半径

        this.svg.selectAll(".drawDataSvg_g").remove();
        this.svg.selectAll(".drawSvg_g").remove();
        this.svg.selectAll(".drawDataSvgNei_g").remove();
        this.svg.selectAll(".circleText_g").remove();

        this.svg.attr("font-family","Microsoft YaHei");
        this.testRect =  this.svg.append("g").attr({ //在图形上面添加rect的透明上层，点击之后path平移移除
            "class":"rectG"
        })
        this.testRectNei =  this.svg.append("g").attr({ //在图形上面添加rect的透明上层，点击之后path平移移除
            "class":"rectG"
        })
        this.bgSvg_g = this.svg.append("g").attr("class", "bgSvg_g");   // 背景的组
        this.smallSvg_g = this.svg.append("g").attr("class", "smallSvg_g"); // 小图框的组
        this.drawSvg_g = this.svg.append("g").attr("class", "drawSvg_g"); // 绘制图的组
        this.drawDataSvg_g = this.svg.append("g").attr("class", "drawDataSvg_g"); // 绘制数据图的组
        this.drawDataSvgNei_g = this.svg.append("g").attr("class", "drawDataSvgNei_g"); // 绘制数据图内圈的组
        this.drawTotalTitle = this.svg.append("g").attr("class", "totalTitle"); // 标题的组
        this.circleText_g = this.svg.append("g").attr("class", "circleText_g"); // 引出文字的组
        this.navText_g = this.svg.append("g").attr("class", "navText_g"); // 导航的组
        this.isLegend_g = this.svg.append("g").attr("class", "isLegend_g"); // 图例的组

        if(this.isNav){this.drawNavBg()} // isNav判断是否需要导航,默认需要true
        
        this.drawTitle();           // 绘制大标题
        this.drawData(0);           // 默认进入的是第一个数据
        this.drawBackgroundSvg();  // 绘制大背景的svg
        this.isDrawCircle();        // 绘制不变化的circle
        // this.taketurns(); //重复调用
    },
    drawBackgroundSvg: function(){  // 绘制大背景的svg
        var that = this;

        zhnx.utils.loadSvg(that.BackgroundSvgUrl, function(importedNode){
            var plane = that.bgSvg_g.node().appendChild(importedNode.cloneNode(true));
            d3.select(plane).attr({
                "width": 964.3,
                "height":474.3
            });
        });
        
        if(this.isTable){   // 绘制左侧图表
            this.drawSmallBoxText();    // 绘制小表内文字
            this.drawSmallBoxSvg();    // 绘制里面表的svg

            
            this.smallSvg_g.attr({  "transform":"translate("+30+","+100+")" });
            this.drawSvg_g.attr({  "transform":"translate("+this.width/this.isTableBeiShuW+","+this.height/this.isTableBeiShuH+")" });
            this.drawDataSvg_g.attr({ "transform":"translate("+this.width/this.isTableBeiShuW+","+this.height/this.isTableBeiShuH+")" });
            this.drawDataSvgNei_g.attr({ "transform":"translate("+this.width/this.isTableBeiShuW+","+this.height/this.isTableBeiShuH+")" });
            this.circleText_g.attr({ "transform":"translate("+this.width/this.isTableBeiShuW+","+this.height/this.isTableBeiShuH+")" });
        }else{
            this.drawSvg_g.attr({  "transform":"translate("+this.width/this.noneTableBeiShuW+","+this.height/this.noneTableBeiShuH+")" });
            this.drawDataSvg_g.attr({  "transform":"translate("+this.width/this.noneTableBeiShuW+","+this.height/this.noneTableBeiShuH+")" });
            this.drawDataSvgNei_g.attr({  "transform":"translate("+this.width/this.noneTableBeiShuW+","+this.height/this.noneTableBeiShuH+")" });
            this.circleText_g.attr({  "transform":"translate("+this.width/this.noneTableBeiShuW+","+this.height/this.noneTableBeiShuH+")" });
            // this.navText_g.attr({
			// "transform":"translate("+this.width/2+","+this.height/2+")" })
        }
    },
    drawSmallBoxSvg: function(){    // 绘制里面表的svg
        var that = this;

        zhnx.utils.loadSvg(that.smallBoxUrl, function(importedNode){
            var plane = that.smallSvg_g.node().appendChild(importedNode.cloneNode(true));
            d3.select(plane).attr({
                "width": 268,
                "height":320
            });
        });
    },
    drawSmallBoxText: function(){
        var that = this;

        var textNumArray =  this.series[0].value;
        var textSum = this.textNumSum;
        textNumArray.unshift(textSum); // 数字数组最前面插入数字

        this.smallSvg_g.attr({
            "font-family": "Microsoft YaHei",
            "text-anchor": "middle"
        });
        // 文字
        this.smallSvg_g.append("g").attr("class","smallText").selectAll("text")
            .data(this.tableName)
            .enter()
            .append("text")
            .attr({
                "font-size": this.tableTextFontSize,
                "fill": "#01AEED",
                "dy": function(d,i){return 35-that.tableTextFontSize/2*i+85*i},
                "x": 268/2
            })
            .text(function(d){return d});

        // 数字
        this.smallSvg_g.append("g").attr("class","smallNum").selectAll("text")
            .data(textNumArray)
            .enter()
            .append("text")
            .attr({
                "font-size": this.tableNumFontSize,
                "fill": "#DC9404",
                "dy": function(d,i){return 75-that.tableTextFontSize/2*i+85*i},
                "x": 268/2
            })
            .text(function(d){return d+that.tableUnit})
    },
    drawTitle: function(){          // 绘制大标题
        var that = this;
        this.drawTotalTitle.append("text").attr({
        	"class": "title",
        	"x" : 200,
			"y" : 35,
			"text-anchor" : "middle",
			"font-size" : 28,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : this.titleColor
        }).text(that.totalTitle);
    },
    drawNavBg: function(){
        var that = this;
        
        var selectNav = this.navText_g.append("g").attr("class", "selectNav");
        zhnx.utils.loadSvg("svg/education/selected.svg", function(importedNode){
			var plane = selectNav.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
				"class" : "selectRect",
				"x" : 44,
				"y" : 83,
	            "width": 147,
	            "height": 33
			});
		});
		var nav = this.navText_g.append("g").attr("class", "nav");
		zhnx.utils.loadSvg("svg/education/nav.svg", function(importedNode){
			var g_nav = nav.selectAll("g").data(that.nav).enter().append("g").attr({
				"transform" : function(d, i){
					return "translate(" + (32+184*i) + ", "+79+")"; 
				},
				"cursor" : "pointer"
			}).on("click", function(d, i){
				that.drawData(i);
				that.navClick(i);
                that.drawSvgNeiCircle();
                that.drawSvgWaiCircle();
                that.navClickCommand({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.drawData(" + i + ");that.navClick(" + i + ");that.drawSvgNeiCircle();that.drawSvgWaiCircle();",
        			execMode: "evalfunc"
        		});
			});
			nav.selectAll("g").each(function(d, i){
				var plane = d3.select(this).node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"width": 164,
					"height":40
				});
				d3.select(this).append("text").attr({
					"class": "navText",
					"x" : 88,
					"y" : 20,
					"font-size" : that.navFontSize,
					"text-anchor" : "middle",
					"dy" : "0.35em",  
					"fill" : function(){
						return i==0 ? that.clickNavColor : that.navColor;
					}
				}).text(d);
			});		
		});
    },
    navClick: function(a){
    	var that= this;
    	that.svg.select(".selectRect").transition().duration(600).attr("x", (44+184*a));
		this.select = a;
		this.svg.selectAll(".navText").each(function(d, i){
			if(that.select == i){
				d3.select(this).attr("fill", that.clickNavColor);
			}else{
				d3.select(this).attr("fill", that.navColor);
			}
		});
    },
    navClickCommand: function(commandArgs){
    	
    },
    pathClickCommand: function(commandArgs){

    },
    commandText: function(commandArgs){
    	
    },
    drawData: function(clickNum){
        var that = this;

        // if(this.isTable){
        // this.drawSmallBoxText(clickNum); //绘制小表内文字
        // this.drawSmallBoxSvg(); //绘制里面表的svg
        // }

        var pie=d3.layout.pie()       // 定义饼状布局
            .value(function(d){  return d; });       // 值访问器

        var seriesValue = this.series[clickNum].value;
        var pieData=pie(seriesValue);

        this.drawDataSvg_g.selectAll("g").remove();

        var arcs = this.drawDataSvg_g.selectAll("g")
            .data(pieData)
            .enter()
            .append("g");

       this.dataArc = d3.svg.arc()
            .innerRadius(this.dataInnerCircle)
            .outerRadius(this.dataOuterCircle);

        arcs.append("path")
	        .on("click",function(d,i){
	        	var x = that.dataArc.centroid(d)[0]*0.2;
	        	var y = that.dataArc.centroid(d)[1]*0.2;
	        	that.clickMove(x,y,i);
	        	
	        	that.pathClickCommand({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.clickMove(" + x+","+y+","+i + ");",
        			execMode: "evalfunc"
        		});
	        })
            .attr({
            	"cursor": "pointer",
                "fill":function(d,i){return that.circleDataColor[i]},
                "stroke":function(d,i){
                	if(that.circleDataBorder instanceof Array){
                		return that.circleDataBorder[i]
                	}else{
                		return that.circleDataBorder
                	}
                },
                "stroke-width":that.circleDataBorderWidth
                })
            .transition()
            .duration(this.animateTime)
            .attrTween("d",function(d,i){
                var start = {
                    startAngle:pieData[i].startAngle,
                    endAngle: pieData[i].startAngle
                };
                var finish = {
                    startAngle:pieData[i].startAngle,
                    endAngle: pieData[i].endAngle
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return that.dataArc(i(d));
                }
            });

        // 绘制引出线开始的圆点
       var lineCircleStart =  arcs.append("circle")
            .attr("transform",function(d){
                var x = that.dataArc.centroid(d)[0]*that.circelStart;
                var y = that.dataArc.centroid(d)[1]*that.circelStart;
                return "translate("+x+","+y+")";
            })
            .attr({"r":0,"fill":this.lineCircleColor})
            .transition()
            .duration(this.animateTime)
            .attr("r",this.lineCircleR);

        // 绘制引出线
       var line_1 = arcs.append("line")
            .attr({
                "x1":function(d){ return that.dataArc.centroid(d)[0]*that.circelStart},
                "y1":function(d){ return that.dataArc.centroid(d)[1]*that.circelStart},
                "x2":function(d){ return that.dataArc.centroid(d)[0]*that.circelStart},
                "y2":function(d){ return that.dataArc.centroid(d)[1]*that.circelStart}
            })
            .attr({
                "fill":"none",
                "stroke": this.lineCircleColor,
                "stroke-width":this.lineStrokeWidth
            })
            .transition()
            .delay(this.animateTime)
            .duration(this.animateTime)
            .ease("linear")
            .attr({
                "x2":function(d){ return that.dataArc.centroid(d)[0]*that.lineHMultiple},
                "y2":function(d){ return that.dataArc.centroid(d)[1]*that.lineHMultiple}
            });

        var line_2 = arcs.append("line")
            .attr({
                "x1":function(d){ return that.dataArc.centroid(d)[0]*that.lineHMultiple},
                "y1":function(d){ return that.dataArc.centroid(d)[1]*that.lineHMultiple},
                "x2":function(d){ return that.dataArc.centroid(d)[0]*that.lineHMultiple},
                "y2":function(d){ return that.dataArc.centroid(d)[1]*that.lineHMultiple}
            })
            .attr({
                "fill":"none",
                "stroke": this.lineCircleColor,
                "stroke-width":this.lineStrokeWidth
            })
            .transition()
            .delay(this.animateTime*2)
            .duration(this.animateTime)
            .ease("linear")
            .attr({
                "x2":function(d){ return that.dataArc.centroid(d)[0]*that.lineWMultiple}
            });

        // 绘制引出线结束的圆点
        var lineCircleEnd = arcs.append("circle")
            .attr("transform",function(d){
                var x = that.dataArc.centroid(d)[0]*that.lineWMultiple;
                var y = that.dataArc.centroid(d)[1]*that.lineHMultiple;
                return "translate("+x+","+y+")";
            })
            .attr({"r":0,"fill":this.lineCircleColor})
            .transition()
            .delay(this.animateTime*3)
            .duration(this.animateTime)
            .attr("r",this.lineCircleR);

        // 绘制上部文字
        this.textNumSum = d3.sum(seriesValue);
        var textTopArray = [];
        var textTop = seriesValue;
        for(var j = 0;j<seriesValue.length;j++){
            textTopArray.push((seriesValue[j]*100/this.textNumSum).toFixed(2))
        }
        if(this.isPercent){
            textTop = textTopArray;
        }else{
            textTop = seriesValue;
        }

        var lineTextTop = arcs.append("text")
            .attr("transform",function(d,i){
                    var x = that.dataArc.centroid(d)[0]*that.lineWMultiple;
                    var y = that.dataArc.centroid(d)[1]*that.lineHMultiple;
                    return "translate("+x+","+y+")";
            })
            .attr({
                "font-weight":"bold",
                "text-anchor":"middle",
                "opacity":0,
                "dy":"-1em"
            })
            .transition()
            .delay(this.animateTime*3)
            .duration(this.animateTime)
            .attr("opacity",1)
            .text(function(d,i){ return textTop[i]+that.unit;})
            .attr({
                "fill":function(d,i){ return that.circleDataColor[i]; },
                "opacity": 1,
                "font-size": this.fontSize
            });

        // 绘制下部文字
        var textBottom = this.series[clickNum].type;
        var lineTextBottom = arcs.append("text")
            .attr("transform",function(d,i){
                var x = that.dataArc.centroid(d)[0]*that.lineWMultiple;
                var y = that.dataArc.centroid(d)[1]*that.lineHMultiple;
                return "translate("+x+","+y+")";
            })
            .attr({
                // "font-weight":"bold",
                "text-anchor":"middle",
                "opacity":0,
                "dy":"1.5em"
            })
            .transition()
            .delay(this.animateTime*3)
            .duration(this.animateTime)
            .attr("opacity",1)
            .text(function(d,i){ return textBottom[i];})
            .attr({
                "fill":this.lineCircleColor,
                "opacity": 1,
                "font-size": this.fontSize
            });


        if(this.isDoubleCircle){    // 判断是否绘制数据相同的内圈圆环
            this.isDrawDoubleCircle(seriesValue);
        }
    },
    clickMove: function(pathX,pathY,pathNum){
        var that = this;
        d3.selectAll("path").attr({"transform": "translate("+0+","+0+")"});
        this.drawDataSvg_g.selectAll("text").attr({"font-size":14});
        d3.select(this.drawDataSvg_g.selectAll("path")[0][pathNum]).transition().duration(100).ease('elastic').attr({
           "transform":function(){
                var x =pathX;
                var y=pathY;
                return "translate("+x+","+y+")"
            }
        })
        d3.select(this.drawDataSvgNei_g.selectAll("path")[0][pathNum]).transition().duration(100).ease('elastic').attr({
           "transform":function(){
                var x =pathX;
                var y=pathY;
                return "translate("+x+","+y+")"
            }
        })
        d3.select(this.drawDataSvg_g.selectAll("g")[0][pathNum]).selectAll("text").attr({"font-size":"1.5em"})
//        d3.select(this.drawDataSvgNei_g.selectAll("path")[0][pathNum]).transition().duration(100).ease('elastic').attr({
//            "transform":function(){
//                var x =pathX;
//                var y=pathY;
//                return "translate("+x+","+y+")"
//            }
//        })
        this.testRect.selectAll("rect").remove();
        this.testRectNei.selectAll("rect").remove();

        this.testRect.append("rect").attr({
            "width":this.width,
            "height":this.height,
            "fill":"rgba(255,255,255,0)",
            "z-index":"-1"
        }).on("click",function(){
            that.svgClick();
        })
        this.testRectNei.append("rect").attr({
            "width":this.width,
            "height":this.height,
            "fill":"rgba(255,255,255,0)",
            "z-index":"-1"
        }).on("click",function(){
            that.svgClick();
            that.commandText({
     			type: 'click',
     			context: that.id,
     			contextType: 'chaObj',
     			execString: 'that.svgClick()',
     			execMode: "evalfunc"
 			});
        })
    },
    svgClick: function(){
        var that = this;
        that.svg.selectAll("path").transition().duration(100).ease('elastic').attr({"transform": "translate("+0+","+0+")"});
        that.drawDataSvg_g.selectAll("text").attr({"font-size":14});
        that.svg.selectAll(".rectG").selectAll("rect").remove();
    },
    isDrawDoubleCircle: function(dataValue){
        var that = this;

        var pie=d3.layout.pie()       // 定义饼状布局
            .value(function(d){  return d; });       // 值访问器

        var pieData=pie(dataValue);

        this.drawDataSvgNei_g.selectAll("g").remove();

        var arcs = this.drawDataSvgNei_g.selectAll("g")
            .data(pieData)
            .enter()
            .append("g");

        this.dataArcNei = d3.svg.arc()
            .innerRadius(this.dataInnerCircleNei)
            .outerRadius(this.dataOuterCircleNei);

        arcs.append("path")
	        .on("click",function(d,i){
	        	var x = that.dataArcNei.centroid(d)[0]*0.2;
	        	var y = that.dataArcNei.centroid(d)[1]*0.2;
	        	that.clickMove(x,y,i);
	        	
	        	that.pathClickCommand({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: "that.clickMove(" + x+","+y+","+i + ");",
        			execMode: "evalfunc"
        		});
	        })
            .attr({
            	"cursor": "pointer",
                "fill":function(d,i){ return that.circleDataColor[i]; },
                "opacity":this.colorRranSparency
            })
            .transition()
            .duration(this.animateTime)
            .attrTween("d",function(d,i){
                var start = {
                    startAngle:pieData[i].startAngle,
                    endAngle: pieData[i].startAngle
                };
                var finish = {
                    startAngle:pieData[i].startAngle,
                    endAngle: pieData[i].endAngle
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return that.dataArcNei(i(d));
                }
            });
    },
    isDrawCircle: function(){
        var that = this;

        if(this.isNeiCircle){this.drawSvgNeiCircle();}
        if(this.isWaiCircle){this.drawSvgWaiCircle();}
    },
    drawSvgNeiCircle: function(){
        var that = this;

        var innerData = [];
        for(var j = 0;j<this.neiCircleNum;j++){
            innerData.push(1)
        }
        var inner_pie=d3.layout.pie()       // 定义饼状布局
            .value(function(d){  return d; });       // 值访问器

        var inner_pieData=inner_pie(innerData);

        this.drawSvg_g.selectAll("g").remove();

        var inner_arcs = this.drawSvg_g.selectAll("g")
            .data(inner_pieData)
            .enter()
            .append("g")
            .each(function(d){
                var margin = 0.02;
                d.startAngle += margin;
                d.endAngle -= margin;
            });

        var inner_arc = d3.svg.arc()
            .innerRadius(this.neiInnerCircle)
            .outerRadius(this.neiOuterCircle);

        inner_arcs.append("path") // 内圈
            .attr("fill",this.circleColor[0])
            .transition()
            .duration(this.animateTime)
            .attrTween("d",function(d,i){
                var start = {
                    startAngle:inner_pieData[i].startAngle,
                    endAngle: inner_pieData[i].startAngle
                };
                var finish = {
                    startAngle:inner_pieData[i].startAngle,
                    endAngle: inner_pieData[i].endAngle
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return inner_arc(i(d));
                }
            });
    },
    drawSvgWaiCircle: function(){
        var that = this;

        this.drawSvg_g.selectAll("circle").remove();

        this.drawSvg_g.append("circle")
            .attr({
                "opacity":0,
                "class":"waiCircle",
                "r":this.waiCircleR,
                "fill":"none",
                "stroke":this.circleColor[1],
                "stroke-width":1
            })
            .transition()
            .duration(this.animateTime)
            .attr({ "opacity":1 })
    },
    repaint: function(){
        var that = this;

    }
});
////环图调用xChart
zhnx.chart.pieChartTest = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.pieChartTest.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.pieChartTest,
	_defaults : {},
	
	option : {
		padding : {
			top : 55,
			right : 40,
			bottom : 40,
			left : 40
		},
		background : {
			show : true,
			url : "svg/weather/border/HourlyTemperature_Pressure_RainfallBorder.svg",
			width : 910,
			height : 240
		},
		title : {
			text : "",
			textAlign : 'left', 
			left : 70,
			top : 23,
			textStyle : {
				fontSize : 18
			}
		},
		legend : {
			show : true,
			right : -400,
			orient: 'horizontal',	//图例横向
			icon:{
				shape: 'circleArc' // 'circle', emptyCircle
			}
		},
		pie:{
			selectedMode:'multiple',
			radius: [0, 0.7],
			label: {
				normal: {
					show: true
					}
			}
		}	
		
	},
	
	init : function(args){
		var that = this;
		var opt = $.extend(true, {}, this.option, args.option);
		this.chart = xCharts(this.args.selector.get(0), opt);
		this.chart.FormateData(args.series);
//		chart.drawTitle();
//		chart.drawBackground();
		this.chart.drawLegend(args.series.data[0].label);
		var series = args.series,data = args.series.data[0].data,label = args.series.data[0].label
		this.chart.drawPie(args.series.data[0].data, args.series.data[0].label);
		this.chart.setOuterEvent({
			pathClick: function(dStart,dEnd,idx){

				that.pathXchartClickCommand({
					type: 'click',
					context: that.id,
					contextType: 'chaObj',
					execString: "that.chart.pieClick("+dStart+","+dEnd+","+idx+");",
					execMode: "evalfunc"
				});
			}
		});
		this.chart.setOuterEvent({
			svgRectClick: function(dStart,dEnd,idx){
				
				that.pathBgXchartClickCommand({
					type: 'click',
					context: that.id,
					contextType: 'chaObj',
					execString: "that.chart.pieBgClick();",
					execMode: "evalfunc"
				});
			}
		});
	},
	pathXchartClickCommand: function(commandArgs){
		console.log(commandArgs)
	},
	pathBgXchartClickCommand: function(commandArgs){
		console.log(commandArgs)
	}
});

//卫生云组件

//卫生云右侧上部
zhnx.chart.healthRightTop=function(args){
	this.args=$.extend({},this._defaults,args);
	this.init(this.args);
}
zhnx.chart.healthRightTop.prototype=$.extend({},zhnx.chart.base,{
	constructor:zhnx.chart.healthRightTop,
	_defaults : {},
	
	bgUrl:"svg/health/border/regionalPlatform/right/rightTop.svg",
	
	init : function(args){
		this.baseInit(this.args.selector);
		
		this.series = args.series;
		
		this.svg.attr("font-family","Microsoft YaHei")
		this.bg = this.svg.append("g").attr("class", "rightTopBg");
		this.leftText = this.svg.append("g").attr("class","leftText");
		this.dataText = this.svg.append("g").attr("class","dataText").attr({
			"transform":"translate("+190+","+68+")"
		})
		
		this.dataInit();
	},
	dataInit: function(){
		var that = this;

		for(var i = 0;i<this.series.length;i++){
			this.title = this.series[i].title;
			this.unit = this.series[i].unit;
			this.leftTopName = this.series[i].leftTopName;
			this.leftNumL = this.series[i].leftNumL;
			this.leftBottomName = this.series[i].leftBottomName;
			this.leftIcon = this.series[i].leftIcon;
			this.leftBottomNum = this.series[i].leftBottomNum;
			this.iconSvg = this.series[i].iconSvg;
			this.type = this.series[i].type;
			this.value = this.series[i].value;
			for(var k = 0;k<this.iconSvg.length;k++){
				//绘制右侧
				that.drawSvg(this.unit,this.iconSvg[k],this.type,this.value,k,i)
			}
			//绘制左侧
			that.drawData(this.title,this.unit,this.leftTopName,this.leftNumL,this.leftBottomName,this.leftIcon,this.leftBottomNum,i);
			//绘制背景
			that.drawBg(i);
		}	
	},
	drawBg: function(j){
		var that = this;
		
		zhnx.utils.loadSvg(that.bgUrl, function(importedNode){
				var plane = that.bg.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
		            "width": 910,
		            "height": 265,
		            "y":(265+15)*j
				});
				//that.drawData(title_bg,unit_bg,j)
		});
		
	},
	drawData: function(title,unit,leftTopName,leftNumL,leftBottomName,leftIcon,leftBottomNum,num){
		var that = this;
		
		//绘制标题
		this.leftText.append("text").attr({
			"fill":"#ffaa00",
			"text-anchor":"middle",
			"font-size":24,
			"font-weight":"bold",
			"x": 110,
			"y" : 33+(265+15)*num,
		}).text(title)
		//绘制左侧第1排文字
		this.leftText.append("g").attr("class","text1").append("text").attr({
			"fill":"white",
			"text-anchor":"middle",
			"font-size":22,
			"x": 120,
			"y" : 90+(265+15)*num,
		}).text(leftTopName)
		//绘制左侧第2排数字
		this.leftText.append("g").attr("class","text2").append("text").attr({
			"fill":"#ffaa00",
			"text-anchor":"middle",
			"font-weight":"bold",
			"font-size":42,
			"x": 120,
			"y" : 165+(265+15)*num,
		}).text(leftNumL)
		
		//绘制左侧第3排文字
		this.leftText.append("g").attr("class","text3").append("text").attr({
			"fill":"white",
			"text-anchor":"middle",
			"font-size":14,
			"x": 100,
			"y" : 220+(265+15)*num,
		}).text(leftBottomName)
		
		zhnx.utils.loadSvg("svg/health/rightIcon/" + leftIcon + ".svg", function(importedNode){
				var plane = that.leftText.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
		            "width": 18,
		            "height": 22,
		            "x": 140,
					"y" : 200+(265+15)*num,
				});
		});
		
		this.leftText.append("g").attr("class","text3").append("text").attr({
			"fill":"white",
			"text-anchor":"middle",
			"font-size":14,
			"x": 170,
			"y" : 220+(265+15)*num,
		}).text(leftBottomNum)
		
		
	},
	drawSvg: function(unit,svgUrl,type,value,numK,num){
		var that = this;

		zhnx.utils.loadSvg("svg/health/rightIcon/" + svgUrl + ".svg", function(importedNode){
			
			var dataTextPlane = that.dataText.node().appendChild(importedNode.cloneNode(true));
			d3.select(dataTextPlane).attr({
	            "width": 58,
	            "height": 58,
	            "x":90+165*numK,
	            "y":(265+15)*num
			});
	            
			//第一排文字
	        that.dataText.append("g").attr("class","type").selectAll("text")
	        .data(type).enter().append("text").attr({
	    		"fill":"white",
	    		"text-anchor":"middle",
	    		"font-size":14,
	    		"y":90+(265+15)*num,
	    		"dx": function(d,i){return 120+165*i}
	    	}).text(function(d){return d;})
	            
	    	//第二排文字
	    	 that.dataText.append("g").attr("class","value").selectAll("text")
	        .data(value).enter().append("text").attr({
	    		"fill":"#ffaa00",
	    		"text-anchor":"middle",
	    		"font-size":24,
	    		"y":140+(265+15)*num,
	    		"dx": function(d,i){return 120+165*i}
	    	}).text(function(d){return d+unit;})
			
		});
	}
});
//区域卫生资源右边-最下
zhnx.chart.healthRightBottom=function(args){
	this.args=$.extend({},this._defaults,args);
	this.init(this.args);
}

zhnx.chart.healthRightBottom.prototype=$.extend({},zhnx.chart.base,{
	constructor:zhnx.chart.healthRightBottom,
	_defaults:{},
	bgSVGURL:"svg/health/border/regionalPlatform/right/rightBottom.svg",
	bedSVGURL:"svg/health/rightIcon/shiyouchuangweishu.svg",
	
	
	init:function(args){
		this.baseInit(this.args.selector);
		//获取数据集合
		this.dataList=args.dataList;
		this.title=args.title;
		this.typeList=args.dataList.type;
		this.numList=args.dataList.num;
		
		this.bgSVG = this.svg.append("g").attr("class", "rightBottomAll");
		this.textSVG = this.svg.append("g").attr("class", "rightBottomText");
		
		this.drawBg();
		this.drawBedNumIcon();
		this.initData();
	},
	//绘制背景 、标题
	drawBg: function(){
		var that=this;
		zhnx.utils.loadSvg(that.bgSVGURL, function(importedNode){
				var plane = that.bgSVG.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
		            "width": 910,
		            "height": 231.7
				});
				
				that.bgSVG.append("text").attr({
					"fill":"#ffaa00",
					"text-anchor":"middle",
					"font-size":24,
					"font-weight":"bold",
					"x": 110,
					"y" : 33,
				}).text(that.title);
		});
	},
	
	//绘制右边
	initData:function(){
		var that=this;
		for(var i=1;i<that.dataList.num.length;i++){
			this.titleText=that.dataList.type[i];
			this.titleNum=that.dataList.num[i];
			
			that.drawData(this.titleText,this.titleNum,i);
		}
	},
	drawData:function(titleText,titleNum,i){
		//文字
		this.textSVG.append("text").attr({
			"fill":"white",
			"text-anchor":"start",
			"font-size":24,
			"x": 540,
			"y" : 35+70*i
		}).text(titleText)
		//数字
		this.textSVG.append("text").attr({
			"fill":"#ffaa00",
			"text-anchor":"start",
			"font-size":24,
			"x": 700,
			"y" : 35+70*i
		}).text(titleNum)
	},
	//绘制床位数icon
	drawBedNumIcon:function(){
       var that = this;
	  
	   //绘制图片icon
		zhnx.utils.loadSvg(that.bedSVGURL, function(importedNode){
				var plane =that.textSVG.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
					"x":60,
					"y":75,
		            "width": 118,
		            "height": 96
				});
		//添加数据
				that.textSVG.append("text").attr({
					"fill":"white",
					"text-anchor":"middle",
					"font-size":24,
					"font-weight":"bold",
					"x": 290,
					"y" : 110,
				}).text(that.typeList[0]);
		
				that.textSVG.append("text").attr({
					"fill":"#ffaa00",
					"text-anchor":"middle",
					"font-size":40,
					"font-weight":"bold",
					"x": 290,
					"y" : 163,
				}).text(that.numList[0]);
		
				
				
		});
	},
	
})
//卫生云右侧中部
zhnx.chart.healthRightMiddle=function(args){
	this.args=$.extend({},this._defaults,args);
	this.init(this.args);
}
zhnx.chart.healthRightMiddle.prototype=$.extend({},zhnx.chart.base,{
	constructor:zhnx.chart.healthRightMiddle,
	_defaults : {},
	
	bgUrl:"svg/health/border/regionalPlatform/right/rightMiddle.svg",
	title:"",
	unit:"",
	
	init : function(args){
		this.baseInit(this.args.selector);
		
		this.series = args.series;

		this.title = args.title !=undefined ? args.title:this.title;
		this.unit = args.unit !=undefined ? args.unit:this.unit;
		
		this.svg.attr("font-family","Microsoft YaHei")
		this.bg = this.svg.append("g").attr("class", "rightBottomBg");
		this.textData = this.svg.append("g").attr("class", "textData");
		
		this.drawBg();
		this.dataInit();
	},
	drawBg: function(){
		var that = this;
		
		zhnx.utils.loadSvg(that.bgUrl, function(importedNode){
				var plane = that.bg.node().appendChild(importedNode.cloneNode(true));
				d3.select(plane).attr({
		            "width": 910,
		            "height": 231.7
				});
				
				that.bg.append("text").attr({
					"fill":"#ffaa00",
					"text-anchor":"middle",
					"font-size":24,
					"font-weight":"bold",
					"x": 110,
					"y" : 33,
				}).text(that.title)
		});
	},
	dataInit: function(){
		var that = this;
		for(var i = 0;i<this.series.value.length;i++){
			this.value = this.series.value[i];
			this.type = this.series.type[i];
			this.iconUrl = this.series.iconUrl[i];
			this.dataUnit = this.unit[i];
			that.drawData(this.iconUrl,this.type,this.value,this.dataUnit,i)
		}
	},
	drawData: function(iconUrl,type,value,unit,num){
		var that = this;
		zhnx.utils.loadSvg("svg/health/rightIcon/" + iconUrl + ".svg", function(importedNode){
			var plane = that.textData.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 92,
	            "height": 65,
	            "x": 60+450*num,
				"y" : 100
			});
		});
		//文字
		this.textData.append("text").attr({
			"fill":"white",
			"text-anchor":"start",
			"font-size":24,
			"x": 180+450*num,
			"y" : 110
		}).text(type+unit)
		//数字
		this.textData.append("text").attr({
			"fill":"#ffaa00",
			"text-anchor":"start",
			"font-size":40,
			"x": 180+450*num,
			"y" : 160
		}).text(value)
	}
});
//全区人口统计-医疗服务统计

zhnx.chart.populationAndMedicalService=function(args){
	this.args=$.extend({},this._defaults,args);
	this.init(this.args);
}
//原型扩展
zhnx.chart.populationAndMedicalService.prototype=$.extend({},zhnx.chart.base,{
	constructor:zhnx.chart.populationAndMedicalService,
	_defaults : {},
	array:[0,1,2,3],
	id:0,
	nav:[0,1,2,3],
	option : {
		padding : {
			top : 75,
			right : 100,
			bottom : 40,
			left : 100
		},
		color:["#05a8f7"],
		xAxis : {
			unit : '年份',
			gap : true,
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		yAxis : {
			unit : '',
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		grid : {
			borderColor : "#05a8f7"
		},
		legend:{
//			right : -200,
//			top : -10,
			icon:{
				shape: 'circle'
				}
		},
		area : {
			showCircle: true,
			showText: false,
			showLastText : true
		},
		line : {
			lineStyle: {
				strokeColor:"#05a8f7",
				interpolate: "cardinal"		// 定义线绘制形状,step\basis等，默认为linear
			},
			isText : false,
			isCircle : false,
			lineAnimate : "left",
		}
	},
   init:function(args){
	   //绘制背景框
	   
	   this.baseInit(this.args.selector);
	   
	   this.dataList=args.dataList;
	   this.title=this.dataList.title;
	   this.type=this.dataList.type;
	   this.bgSVGURL=this.dataList.bgSVGURL;
	   this.rectSVGURL=this.dataList.rectSVGURL;
	   this.unit=this.dataList.unit;
	   //折线图数据
	   //折线数据
	   this.seriesAll=this.dataList.seriesAll;
	   this.optionData = args.option;
	   this.svgList=args.svgList;
	   this.firstTitleList=args.firstTitleList;
	   this.secondTitleList=args.secondTitleList;
	   this.compare=this.dataList.compare;
	   this.compareList=args.compareList;
	   //刚进入，默认选中第一个
	   //
	   this.bgSVG = this.svg.append("g").attr("class", "centermedicalservicebigbg");
	   //矩形背景
	   this.selectSVGBg = this.svg.append("g").attr("class", "selectSVGClass");
	   //datasvg设置监听切换组件页面,将文字的svg实例化顺序放在矩形背景svg之后，让文字在背景的
	   this.dataSVG = this.svg.append("g").attr("class", "centermedicalservicedatabg");
	  //矩形opacity背景
	   this.selectOpacitySVGBg = this.svg.append("g").attr("class", "opacitySVGClass");
		this.drawSVGBg(this.bgSVGURL,this.title);
		this.initData();
		this.drawRectOpcity();
		this.drawRect(this.rectSVGURL);

		this.drawChart(0);
		//默认设置为0，而后根据点击进行切换
//		this.drawTitleChange(0);
		
//		this.drawCircle();
   },
   
   drawSVGBg:function(bgSVGURL,title){
	  var that=this;
	  var width;
	  var height;
	  switch(that.type){
	  case "pupaliation":
		  width=955;
		  height=480;
		  break;
	  case "medical":
		  width=952;
		  height=930;
		  break;
	  }
	   zhnx.utils.loadSvg("svg/health/mapLeftIcon/regionalPlatform/"+bgSVGURL+".svg", function(importedNode){
		   var plane = that.bgSVG.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": this.width,
	            "height":this.height
			});
	   });
	   
	   var titleSVG = that.svg.append("g").attr("class",  "centermedicalservicetltlebg");
	  
	   titleSVG.append("text").attr({
			  "fill":"#ffaa00",
			  "text-anchor":"middle",
			  "font-size":24,
			  "font-weight":"bold",
			  "x": 145,
			  "y" : 43,
		  }).text(title);
   },
 
	initData:function(){
		var that =this;
		for(var i=0;i<that.dataList.svgList.length;i++){

			//获取需要绘制的每个条目
			//svg图标
			this.svgIcon=that.dataList.svgList[i];
			//标题
            this.dataTitle=that.dataList.firstTitleList[i];
			//数值
            var dataNumLength = that.dataList.seriesAll[i].data[0].data.length;
            this.dataNum = that.dataList.seriesAll[i].data[0].data[dataNumLength-1];
//            this.dataNum=that.dataList.secondTitleList[i];
			//变化率百分数
            this.changeData=that.dataList.compareList[i];
			this.unitList=that.dataList.unitList[i];
			//增长-下降
           this.upOrDownSVG=that.dataList.compareListSVG[i];
		  this.compare=that.dataList.compare;
		  that.drawData(this.unitList,this.svgIcon,this.dataTitle,this.dataNum,this.changeData,this.upOrDownSVG,this.compare,i);
		}
	},
   //添加数据
    drawData:function(unitList,svgIcon,dataTitle,dataNum,changeData,upOrDownSVG,compare,i){
        var width;
        var height;
    	var yDistence=105;
    	var that = this;
    	switch(that.type){
    	
    	case "pupaliation":
    		width=42;
    		height=60;
    		
    		break;
    	case "medical":
    		width=50;
    		height=58;
    		break;
    	}
    	//icon图标
		zhnx.utils.loadSvg("svg/health/mapLeftIcon/regionalPlatform/"+svgIcon+".svg", function(importedNode){

			var plane = that.dataSVG.node().appendChild(importedNode.cloneNode(true));

			d3.select(plane).attr({
	            "width": width,
	            "height": height,
	            "x": 60+228*i,
				"y" : yDistence
			});
		});
		//每个模块设置不透明背景，方便监听，默认每个设置一个白色背景
	
		switch(that.type){
		case "pupaliation":
			that.dataSVG.append("text").attr({
				"fill":"white",
				"text-anchor":"start",
				"font-size":16,
				"font-weight":"bold",
				"x": 110+230*i,
				"y" : 130
			}).text(dataTitle);
			//数据
			that.dataSVG.append("text").attr({
				"fill":"#ffaa00",
				"text-anchor":"start",
				"font-size":16,
				"font-weight":"bold",
				"x": 110+230*i,
				"y" : 155
			}).text(dataNum);
			
			//数据
			that.dataSVG.append("text").attr({
				"fill":"#ffaa00",
				"text-anchor":"start",
				"font-size":8,
				"font-weight":"bold",
				"x": 160+230*i,
				"y" : 157
			}).text(unitList);
			break;
			
		case "medical":
			//数据
			that.dataSVG.append("text").attr({
				"fill":"#ffaa00",
				"text-anchor":"start",
				"font-size":16,
				"font-weight":"bold",
				"x": 110+230*i,
				"y" : 155
			}).text(dataNum);
			//标题
			that.dataSVG.append("text").attr({
				"fill":"white",
				"text-anchor":"start",
				"font-size":16,
				"font-weight":"bold",
				"x": 110+230*i,
				"y" : 130
			}).text(dataTitle+that.unit);
			break;
		};
		
	
		
		//数据
		that.dataSVG.append("text").attr({
			"fill":"#ffaa00",
			"text-anchor":"start",
			"font-size":16,
			"font-weight":"bold",
			"x": 110+230*i,
			"y" : 155
		}).text(dataNum);
		
		//最后一行
		
		that.dataSVG.append("text").attr({
			"fill":"white",
			"text-anchor":"start",
			"font-size":14,
			"font-weight":"bold",
			"x": 80+230*i,
			"y" : 195
		}).text(compare);
		
		//同比增长-下降
		
		zhnx.utils.loadSvg("svg/health/mapLeftIcon/regionalPlatform/"+upOrDownSVG+".svg", function(importedNode){
			var plane = that.dataSVG.node().appendChild(importedNode.cloneNode(true));

			d3.select(plane).attr({
	            "width": 18,
	            "height": 22,
	            "x": 154+230*i,
				"y" : 180
			});
		});
		//变化率
		that.dataSVG.append("text").attr({
			"fill":"white",
			"text-anchor":"start",
			"font-size":14,
			"font-weight":"bold",
			"x": 173+230*i,
			"y" :195
		}).text(changeData);
    },
    
  //平移
	setNavSelected : function(){
		var that = this;
		var xDistence;
		var length;
		switch(that.type){
		case "pupaliation":
			xDistence=42;
			length=226;
			break;
			
		case "medical":
			xDistence=60;
			length=223;
			break;
		}
		var xPos = xDistence+that.selectedIndex *length; 

		that.svg.select(".selectRect").transition().duration(500).attr("x", xPos);
	},
    //绘制白色透明的背景矩形框
    drawRectOpcity:function(){
    	var that=this;
    	that.selectOpacitySVGBg.selectAll("rect").data(that.array).enter().append("rect").attr({

			"transform" : function(d, i){
				return "translate(" + (60+215*i) + ", 75)"; 

			},
			
			"x" : function(d,i){return 0;}, 
			"y":13,
			"width" : 215,
			"height" : 120,
			"fill" : "#fff",
			"cursor" : "pointer",
			"opacity":0
			
		}).on("click", function(d,i){
			
			that.navClick(i);
			that.navClickCommand({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: "that.navClick(" + i + ");",
    			execMode: "evalfunc"
    		});
		});
    },
  //点击一次绘制一次
	navClick : function(index){
		//定义下表
		this.selectedIndex = index;
		this.setNavSelected();
		this.drawChart(index);
//		this.drawTitleChange(index);
	},
	navClickCommand: function(commandArgs){
		
	},
    drawRect:function(rectSVGURL){
    	var that=this;
    	var width;
    	var height;
    	var xDistence;
    	var yDistence;
    	
    	switch(that.type){
    	case "pupaliation":
          width=220;
          height=142;
          xDistence=42;
          yDistence=71;

    		break;
    	case "medical":
    	 width=194;
         height=116;
         xDistence=60;
         yDistence=88;
     	
         
    		break;
    	}
		zhnx.utils.loadSvg("svg/health/mapLeftIcon/regionalPlatform/"+rectSVGURL+".svg", function(importedNode){
			var plane = that.selectSVGBg.node().appendChild(importedNode.cloneNode(true));

			d3.select(plane).attr({
				"class" : "selectRect",
				"x" : xDistence,
				"y" : yDistence,
	            "width": width,
	            "height": height,
			})
		});
    	
    },
    //两个区域折线图-点击传入数据进行绘制
    
	drawChart : function(index){
		//绘制之前清除图例
		var that = this;
		//折线svg
//		console.log(index)
		this.svg.selectAll(".centerchart").remove();
		   this.chartSVG = this.svg.append("svg").attr({"x":50,"y":170})
		   .attr("class", "centerchart").append("g").attr("width", 850).attr("height",300) ;
		   switch(that.type){
		   case "pupaliation":
//			   console.log("pupaliation")
			 var opt={
				   color:["#05a8f7"],
					line:{
						lineStyle:{
							strokeColor:"#05a8f7",
						}
					},
					legend:{
						icon:{
							shape: 'circle'
							}
					}
		   	}
		   break;
		   case "medical":
//			   console.log("medical")
			   var opt={
				   color:["#00FF82"],
					line:{
						lineStyle:{
							strokeColor:"rgb(0,255,126)",
						}
					},
					legend:{
						icon:{
							shape: 'circle'
							}
					},
//					area:{
//						fillStyle:{
//							endColor : '#00FF82'
//						}
//					}
		   	}
		   }
		   
		var temp = $.extend(true, {}, this.option,opt); 
//		console.log(temp)
		var chart = xCharts(that.chartSVG.node(),temp); 
		
		chart.FormateData(that.seriesAll);
		chart.idx.g=index;
		var xInfo = chart.drawXAxis(chart.series.label[index]);
		var yInfo = chart.drawYAxis(chart.series.data[index]);
		chart.drawGrid(xInfo, yInfo);
		chart.drawLegend(chart.series.legend[index]);
		chart.drawLine(chart.series.data[index], xInfo, yInfo);
		chart.drawArea(xInfo, yInfo, chart.series.data[index]);
	},
});

//区域卫生平台地图右下角-环图
zhnx.chart.regionalHealthCircle = function (args) {
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
};
zhnx.chart.regionalHealthCircle.prototype = $.extend({}, zhnx.chart.base, {
    constructor: zhnx.chart.regionalHealthCircle,
    _defaults: {},

    circleColor : "rgb(112,114,113)",
    circleR : 0,       //加载页面圆环半径
    svgHeight:70,
    lineColor: "rgb(106,174,211)",//环图引出线
    animateTime: 1500,
    titleIconWidth: 80, //点击进入后图标的宽度
    clickBgUrl:"svg/health/border/regionalPlatform/regionalPlatformMapLeft/xiangQingJiFanHui.svg",//详情、返回
    bgUrl: "svg/health/border/regionalPlatform/regionalPlatformMapRight/yiLiaoFuWuTongJiXiaBuDiKuang.svg",//大背景
    loadFenGe:"svg/health/border/regionalPlatform/regionalPlatformMapRight/yiLiaoFuWuTongJiXiaBuFenGeXian.svg",//分割线
    xuanZhongBg:"svg/health/border/regionalPlatform/regionalPlatformMapRight/yiLiaoFuWuXiaoLvDiSe.svg",
    
    option : {
		padding : {
			top :80,
			right : 80,
			bottom : 50,
			left : 100
		},
		color : ["rgb(204,255,62)"],
		xAxis : {
			unit : '年份',
			gap : true,
			gapWidth : 60,
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		yAxis : {
			unit : '',
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		grid : {
			borderColor : "#05a8f7"
		},
		legend:{
			right : -200,
			top : -10,
			icon:{
				shape: 'circle'
				}
		},
		area : {
			showCircle: true,
			showText: false,
			showLastText : true,
			lastTextSvg:"svg/health/border/regionalPlatform/shuZiDiKuang.svg"
		},
		line : {
			lineStyle: {
				strokeColor:"rgb(204,255,62)",
				interpolate: "cardinal"		// 定义线绘制形状,step\basis等，默认为linear
			},
			isText : false,
			isCircle : false,
			lineAnimate : "left",
		}
	},
    init: function (args) {
        this.baseInit(this.args.selector);
        
        this.series = args.series;
        this.title = args.title;
        this.iconUrl = args.iconUrl;
        this.fenGeUrl = args.fenGeUrl;//各页面分割线
        this.interSeries1 = args.interSeries1;
        this.interSeries2 = args.interSeries2;
        this.interSeries3 = args.interSeries3;
        this.circleColor = args.circleColor !=undefined ? args.circleColor:this.circleColor
        this.textTop = this.interSeries3.textTop;
        this.valueTop = this.interSeries3.valueTop;
        this.unitTop = this.interSeries3.unitTop;
        this.textCircle = this.interSeries3.textCircle;
        this.valueCircle = this.interSeries3.valueCircle;
        this.unitCircle = this.interSeries3.unitCircle;

        this.svg.attr({
        	"font-family":"Microsoft YaHei",
//        	"transform":"translate("+0+","+20+")"
        });

        this.testRect =  this.svg.append("g").attr({ //在图形上面添加rect的透明上层，点击之后path平移移除
            "class":"rectG"
        })
        this.bg = this.svg.append("g").attr({"class":"background","transform":"translate("+0+","+20+")"});//大背景
        this.svgBg = this.svg.append("g").attr({"class":"svgBg","transform":"translate("+0+","+20+")"});//
        this.svgFg = this.svg.append("g").attr({"class":"svgFg","transform":"translate("+0+","+20+")"});//分割svg
        this.drawImg = this.svg.append("g").attr({"class":"drawImg","transform":"translate("+0+","+20+")"});//加载进入的页面g
        this.drawImgClickOne = this.svg.append("g").attr({"class":"drawImgClickOne"});//点击进入的第1页面g
        this.drawInnerData1 = this.svg.append("g").attr({"class":"drawInnerData1"});//点击进入的第2页面g
        this.drawImgClickThree = this.svg.append("g").attr({"class":"drawImgClickThree"});//点击进入的第3页面g
        this.clickTopTitle = this.svg.append("g").attr({"class":"clickTopTitle","transform":"translate("+0+","+20+")"});

        this.drawBg();
        this.dataLoadInit();
        this.drawLoadSvgText(); //绘制加载进入的文字
//        this.drawFenGeSvg(1);
//        this.drawClickTopTitle(1);
//        this.clickTwoInit();
//        this.drawClickLine(0)
        
    },
    drawBg: function(){
    	var that = this;
    	zhnx.utils.loadSvg(this.bgUrl, function(importedNode){
			var plane = that.bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 892,
	            "height": 404
			});
		});
    },
    dataLoadInit: function(){   //处理加载进入的数据
        var that = this;
        that.clickTopTitle.selectAll("*").remove();//点击清除页面
        that.drawImgClickOne.selectAll("*").remove();//点击清除页面
        that.drawImgClickThree.selectAll("*").remove();//点击清除页面
        that.drawInnerData1.selectAll("*").remove();
        that.svgFg.selectAll("*").remove();//点击清除页面
        for(var i = 0;i<this.series.length;i++){
            for(var j = 0;j<this.series[i].length;j++){
                this.circleR = this.series[i].length<=1 ? 60 : 50;
                this.circleDataColor = this.series[i][j].circleDataColor;
                this.unit = this.series[i][j].unit;
                this.type = this.series[i][j].type;
                this.value = this.series[i][j].value;
                that.drawLoadImgData(this.circleDataColor,this.unit,this.type,this.value,i,j)
               
            }
            that.drawSvg(that.iconUrl,i);
        }
        
        
    },
    drawLoadImgData: function(circleDataColor,unit,type,value,numI,numJ){    //绘制加载进入的部分
        var that = this;

        var imgText = this.drawImg.append("g").attr("class","imgText");
        var img_g = this.drawImg.append("g").attr({
            "class":"img_g",
            "transform":function(){
                var  translateX;
                var  translateY;
                if(numI==2){
                    translateX = -65+360*numI+140*numJ;
                    translateY = that.height/2+20;
                }else{
                    translateX = 90+360*numI+140*numJ;
                    translateY = that.height/2+20;
                }
               return "translate("+translateX+","+translateY+")"
            }
        });

        img_g.append("circle").attr({   //底部圆圈
            "r": this.circleR,
            "fill": "none",
            "stroke":this.circleColor,
            "stroke-width":1
        });

        img_g.append("circle").attr({   //底部圆环
            "r": this.circleR-15,
            "fill": "none",
            "stroke":this.circleColor,
            "stroke-width":10
        });
        var newTextArrayBot = "";
        var textNumBot = 8;
        if(type.length>textNumBot){
            var testBot = type.substring(0,textNumBot)//截取个数
            var testBot2 = type.substring(textNumBot,type.length)
            newTextArrayBot=testBot+","+testBot2;//使用符号将前后连接起来
        }else{
        	newTextArrayBot = type
        }
        var textAllBot = imgText.append("text").attr({
        	"fill": "white",
            "x": function(){
                if(numI==2){
                    return -65+360*numI+150*numJ;
                }else{
                    return  90+360*numI+140*numJ;
                }
            },
            "text-anchor":"middle",
            "font-size": 14,
            "y": 14*2+this.height/2+this.circleR/2+20
        })
        var strsBot = newTextArrayBot.split(",") ;
        textAllBot.selectAll("tspan")
            .data(strsBot)
            .enter()
            .append("tspan")
            .attr("x",textAllBot.attr("x"))
            .attr("dy","1.5em")
            .text(function(d){return d;});
//        imgText.append("text").attr({   //底部数据文字描述
//            "fill": "white",
//            "x": function(){
//                if(numI==2){
//                    return -70+360*numI+145*numJ;
//                }else{
//                    return  90+360*numI+140*numJ;
//                }
//            },
//            "text-anchor":"middle",
//            "font-size": 14,
//            "y": 14*2+this.height/2+this.circleR+20
//        }).text(type);

        imgText.append("text").attr({   //中间数据文字描述
            "fill": "#ffaa00",
            "x": function(){
                if(numI==2){
                    return -65+360*numI+140*numJ;
                }else{
                    return  90+360*numI+140*numJ;
                }
            },
            "text-weight":"bold",
            "text-anchor":"middle",
            "font-size": 18,
            "y": this.height/2+18/2+20
        }).text(value+unit)

        //数据圆环
        var gaugeCircleX = d3.scale.linear().range([Math.PI/2,2*Math.PI+Math.PI/2]).domain([0,1]);
            var circlePie=d3.layout.pie()       //定义饼状布局
            .value(function(d){  return d; });       //值访问器

        var circlePieData=circlePie([1,1,1,1,1,1]);
        img_g.selectAll("g").remove();
        var circleArcs = img_g.selectAll("g")
            .data(circlePieData)
            .enter()
            .append("g");
        var dataCircleArc = d3.svg.arc()
            .innerRadius(that.circleR-15-5)
            .outerRadius(that.circleR-10);

        circleArcs.append("path")
            .attr({
                "fill":circleDataColor,
                "opacity":1
            })
            .transition()
            .duration(1000)
            .attrTween("d", function(d) {            //插值
                var start = {
                    startAngle:Math.PI/2,
                    endAngle: Math.PI/2
                };
                var finish={
                    startAngle:Math.PI/2,        //设置开始角度访问器
                    endAngle:gaugeCircleX(value/100)       //设置结束角度访问器
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return dataCircleArc(i(d));
                }
            });
    },
    drawSvg: function(iconUrl,num){
    	var that = this;
    	//图标
            zhnx.utils.loadSvg("svg/health/mapRightIcon/regionalPlatform/" + iconUrl[num] + ".svg", function(importedNode){
    			var plane = that.svgBg.node().appendChild(importedNode.cloneNode(true));
    			d3.select(plane).attr({
    	            "width": 102,
    	            "height": that.svgHeight,
    	            "x": 110+280*num,
    	            "y":30
    			});
    		});
            zhnx.utils.loadSvg(that.clickBgUrl, function(importedNode){//详情图标
            	for(var i = 0;i<iconUrl.length;i++){
            		var plane = that.svgBg.node().appendChild(importedNode.cloneNode(true));
        			d3.select(plane).attr({
        	            "width": 105,
        	            "height": 30,
        	            "x": 160+290*num-105/2,
        	            "y":that.height-50-60/2-10
        			});
            	}
    		});
            zhnx.utils.loadSvg(that.loadFenGe, function(importedNode){//分割线
            		var plane = that.svgBg.node().appendChild(importedNode.cloneNode(true));
        			d3.select(plane).attr({
        	            "width": 892,
        	            "height": 404
        			});
    		});
    },
    drawLoadSvgText: function(){    //绘制加载进入的上部文字
        var that = this;
        var titleText = this.drawImg.append("g").attr("class","titleText");
        
        titleText.selectAll("text").data(this.title).enter().append("text").attr({
            "fill": "#ffaa00",
            "x": function(d,i){
                 return  160+285*i;
            },
            "font-weight":"bold",
            "text-anchor":"middle",
            "font-size": 24,
            "y": this.svgHeight+40+30
        }).text(function(d){return d;});


        titleText.append("g").selectAll("text").data(this.title).enter().append("text").attr({
            "fill": "white",
            "x": function(d,i){
                return  160+290*i;
            },
            "text-anchor":"middle",
            "font-size": 16,
            "y": this.height-70,
            "cursor":"pointer"
        }).text("查看详情")
        //添加矩形热区
    	titleText.append("g").selectAll("rect").data(this.title).enter().append("rect").attr({
	    		"width": 105,
	            "height": 30,
	            "x": function(d,i){return 160+290*i-105/2},
	            "y":that.height-50-60/2-10,
	            "fill":"rgba(255,255,255,0)",
	            "cursor":"pointer"
    	})
            .on("click",function(d,i){
//                that.drawImg.selectAll("*").remove();//点击清除加载页面
//                that.svgBg.selectAll("*").remove();
                
                that.drawFenGeSvg(i);//点击详情时切换分割的背景
                that.drawClickTopTitle(i);//点击详情切换返回和对应的字
                that.clickNumPage(i);//点击详情后切换对应面
//                if(i==0){
//                    that.clickOneInit();
//                }
//                else if(i==1){
//                	 that.clickTwoInit();
//                     that.drawClickLine(0)
//
//                }
//                else if(i==2){
//                    that.clickThreeInit();
//                }
                that.commandDetailedClick({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: 'that.drawFenGeSvg(' + i + ')'+';that.drawClickTopTitle('+i+')'+';that.clickNumPage('+i+')',
        			execMode: "evalfunc"
        		});
                
                
            })
    },
    clickNumPage: function(pageNum){
    	var that = this;
    	that.drawImg.selectAll("*").remove();//点击清除加载页面
      that.svgBg.selectAll("*").remove();
    	if(pageNum==0){
            that.clickOneInit();
        }
        else if(pageNum==1){
        	 that.clickTwoInit();
             that.drawClickLine(0)

        }
        else if(pageNum==2){
            that.clickThreeInit();
        }
    },
    drawFenGeSvg: function(num){
    	var that = this;
    	//绘制分割svg
        zhnx.utils.loadSvg("svg/health/border/regionalPlatform/regionalPlatformMapRight/"+that.fenGeUrl[num]+".svg", function(importedNode){//分割线
    		var plane = that.svgFg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 892,
	            "height": 404
			});
        });
    },
    drawClickTopTitle: function(num){   //绘制点击之后上部相同部分，返回
        var that = this;

        //绘制文字前图标
        zhnx.utils.loadSvg("svg/health/mapRightIcon/regionalPlatform/"+that.iconUrl[num]+".svg", function(importedNode){//按钮
    		var plane = that.clickTopTitle.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 102,
	            "height": 50,
	            "x": 10,
	            "y": 10
			});
        });
        
        //绘制文字
        this.clickTopTitle.append("text").attr({
            "fill": "#ffaa00",
            "x": this.titleIconWidth+30,
            "text-anchor":"start",
            "font-size": 24,
            "font-weight":"bold",
            "y": 48
        }).text(this.title[num]);
        
        //绘制返回按钮
        this.clickTopTitle.append("text").attr({
            "fill": "white",
            "x": this.width-80,
            "text-anchor":"middle",
            "font-size": 16,
            "y": 44,
            "cursor":"pointer"
        }).text("返回")
            .on("click",function(){
//                that.clickTopTitle.selectAll("*").remove();//点击清除页面
//                that.drawImgClickOne.selectAll("*").remove();//点击清除页面
//                that.drawImgClickThree.selectAll("*").remove();//点击清除页面
//                that.drawInnerData1.selectAll("*").remove();
//                that.svgFg.selectAll("*").remove();//点击清除页面
                
                that.dataLoadInit();//绘制加载进入页面
                that.drawLoadSvgText(); //绘制加载进入的文字
                that.commandReturnClick({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: 'that.dataLoadInit()'+';that.drawLoadSvgText()',
        			execMode: "evalfunc"
    			});
            })
          //绘制返回按钮背景
            zhnx.utils.loadSvg(that.clickBgUrl, function(importedNode){//按钮
        		var planeBg = that.clickTopTitle.node().appendChild(importedNode.cloneNode(true));
    			d3.select(planeBg).attr({
    	            "width": 105,
    	            "height": 30,
    	            "x": that.width-80-105/2,
    	            "y": 48/2
    			});
            });
    },
    clickOneInit: function(){
        var that = this;

        for(var i = 0;i<this.interSeries1.length;i++){
                this.smallText = this.interSeries1[i].text.smallText;
                this.smallCenterText = this.interSeries1[i].text.smallCenterText;
                this.smallCircleColor = this.interSeries1[i].text.smallCircleColor;
                this.smallType = this.interSeries1[i].value.smallType;
                this.smallValue = this.interSeries1[i].value.smallValue;
                that.drawClickOneInit(this.smallText,this.smallCenterText,this.smallCircleColor,this.smallType,this.smallValue,i);
        }
    },
    drawClickOneInit: function(smallText,smallCenterText,smallCircleColor,smallType,smallValue,num){
        var that = this;

        var innerR = 70,outerR = 90,lineHMultiple=1.5,lineWMultiple=2;
        this.dataSvg_g = this.drawImgClickOne.append("g").attr("class", "dataSvg_g"+num).attr({
            "transform":"translate("+(this.width/4+this.width*num*2/4)+","+this.height/1.7+")"
        });
        var pie=d3.layout.pie()       //定义饼状布局
            .value(function(d){  return d; });       //值访问器

        var pieData=pie(smallValue);

        this.dataSvg_g.selectAll("g").remove();

        var arcs = this.dataSvg_g.selectAll("g")
            .data(pieData)
            .enter()
            .append("g");
        var dataArc = d3.svg.arc()
            .innerRadius(innerR)
            .outerRadius(outerR);

        arcs.append("path")
	        .on("click",function(d,i){
	        	 var x = dataArc.centroid(d)[0]*0.1;
	             var y = dataArc.centroid(d)[1]*0.1;
	             that.clickMove(x,y,i,num);
	             
	             that.commandPieClick({
	     			type: 'click',
	     			context: that.id,
	     			contextType: 'chaObj',
	     			execString: 'that.clickMove(' +x+','+y+','+i+','+ num + ')',
	     			execMode: "evalfunc"
	 			});
	        })
            .attr({
            	"cursor": "pointer",
                "fill":function(d,i){ return smallCircleColor[i]; },
                "opacity":1
            })
            .transition()
            .duration(this.animateTime)
            .attrTween("d",function(d,i){
                var start = {
                    startAngle:pieData[i].startAngle,
                    endAngle: pieData[i].startAngle
                };
                var finish = {
                    startAngle:pieData[i].startAngle,
                    endAngle: pieData[i].endAngle
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return dataArc(i(d));
                }
            });

        //绘制引出线
        var line_1 = arcs.append("line")
            .attr({
                "x1":function(d){ return dataArc.centroid(d)[0]},
                "y1":function(d){ return dataArc.centroid(d)[1]},
                "x2":function(d){ return dataArc.centroid(d)[0]},
                "y2":function(d){ return dataArc.centroid(d)[1]}
            })
            .attr({
                "fill":"none",
                "stroke": this.lineColor,
                "stroke-width":1
            })
            .transition()
            .delay(this.animateTime)
            .duration(this.animateTime)
            .ease("linear")
            .attr({
                "x2":function(d){ return dataArc.centroid(d)[0]*lineHMultiple},
                "y2":function(d){ return dataArc.centroid(d)[1]*lineHMultiple}
            });

        var line_2 = arcs.append("line")
            .attr({
                "x1":function(d){ return dataArc.centroid(d)[0]*lineHMultiple},
                "y1":function(d){ return dataArc.centroid(d)[1]*lineHMultiple},
                "x2":function(d){ return dataArc.centroid(d)[0]*lineHMultiple},
                "y2":function(d){ return dataArc.centroid(d)[1]*lineHMultiple}
            })
            .attr({
                "fill":"none",
                "stroke": this.lineColor,
                "stroke-width":1
            })
            .transition()
            .delay(this.animateTime*2)
            .duration(this.animateTime)
            .ease("linear")
            .attr({
                "x2":function(d){ return dataArc.centroid(d)[0]*lineWMultiple}
            });

        //绘制上部文字
        var lineTextTop = arcs.append("text")
            .attr("transform",function(d,i){
                var x = dataArc.centroid(d)[0]*lineWMultiple;
                var y = dataArc.centroid(d)[1]*lineHMultiple;
                return "translate("+x+","+y+")";
            })
            .attr({
                "text-anchor":"middle",
                "opacity":0,
                "dy":"-1em"
            })
            .transition()
            .delay(this.animateTime*3)
            .duration(this.animateTime)
            .attr("opacity",1)
            .text(function(d,i){
                return smallType[i]})
            .attr({
                "fill":"white",
                "opacity": 1,
                "font-size": 14
            });

        //数据下面描述
        
        this.drawImgClickOne.append("g").append("text").attr({
            "x":this.width/4+this.width*num*2/4,
            "y":this.height-40,
            "fill":"white",
            "font-size": 16,
            "text-anchor":"middle"
        }).text(smallText)

        //数据中间描述
        this.drawImgClickOne.append("g").append("text").attr({
            "x":this.width/4+this.width*num*2/4,
            "y":this.height/1.7+10,
            "fill":"white",
            "font-size": 20,
            "text-anchor":"middle",
            "font-weight":"bold"
        }).text(smallCenterText)
    },
    clickMove: function(pathX,pathY,pathNum,num){
        var that = this;

        this.dataG = this.svg.select(".dataSvg_g"+num)
        d3.selectAll("path").transition().duration(100).ease('elastic').attr({"transform": "translate("+0+","+0+")"});
        this.dataG.selectAll("text").attr({"font-size":14});
        d3.select(this.dataG.selectAll("path")[0][pathNum]).attr({
            "transform":function(){
                var x =pathX;
                var y=pathY;
                return "translate("+x+","+y+")"
            }
        });
        d3.select(this.dataG.selectAll("text")[0][pathNum]).attr({
            "font-size":18
        });
        this.testRect.selectAll("rect").remove();

        this.testRect.append("rect").attr({
                "width":this.width,
                "height":this.height,
                "fill":"rgba(255,255,255,0)",
                "z-index":"-1"
            }).on("click",function(){
                that.svgClick();
                that.commandText({
	     			type: 'click',
	     			context: that.id,
	     			contextType: 'chaObj',
	     			execString: 'that.svgClick()',
	     			execMode: "evalfunc"
	 			});
            })
    },
    svgClick: function(){
        var that = this;
        that.svg.selectAll("path").transition().duration(100).ease('elastic').attr({"transform": "translate("+0+","+0+")"});
        that.dataG.selectAll("text").attr({"font-size":14});
        that.svg.selectAll(".rectG").transition().duration(100).ease('elastic').selectAll("rect").remove();
    },
    clickTwoInit: function(){
        var that = this;
        this.drawXuanZhong();
        for(var i = 0;i<this.interSeries2.length;i++){
    		this.changeIcon = this.interSeries2[i].changeIcon;
    		this.changePercent = this.interSeries2[i].changePercent;
    		this.innerTop = this.interSeries2[i].innerTopText;
    		var dataLength = this.interSeries2[i].data[0].data.length;
    		this.innerValue = this.interSeries2[i].data[0].data[dataLength-1];
//    		this.innerIconImg = this.innerSeries1[i].innerIcon;
    		this.unitText = this.interSeries2[i].data[0].unit;
    		that.drawClickTwoInit(this.changeIcon,this.changePercent,this.innerTop,this.innerValue,this.unitText,i)
    	}
        this.clickOneChange();
    	this.clickNumInit(0);
    },
    //点击进入页面2
    drawClickTwoInit: function(changeIcon,changePercent,innerTop,innerValue,unitText,num){
    	var that = this;
    	
    	
    	var svg_g= this.drawInnerData1.append("g");
    	//一排文字
    	this.drawInnerData1.append("g").append("text").attr({
    		 	"fill":"white",
                "font-size":14,
                "text-anchor":"middle",
                "x": 120+220*num,
                "y":120
    	}).text(innerTop)
    	//二排数字
    	this.drawInnerData1.append("g").append("text").attr({
    		 	"fill":"#ffaa00",
                "font-size":32,
                "text-anchor":"end",
                "font-weight":"bold",
                "x": 160+220*num,
                "y":170
    	}).text(innerValue)
    	//二排数字单位
    	this.drawInnerData1.append("g").append("text").attr({
    		 	"fill":"#ffaa00",
                "font-size":14,
                "text-anchor":"start",
                "x": 170+220*num,
                "y":170
    	}).text(unitText)
    	//三排文字
    	this.drawInnerData1.append("g").append("text").attr({
    		 	"fill":"white",
                "font-size":14,
                "text-anchor":"start",
                "x": 50+220*num,
                "y":200
    	}).text("与上年相比")
    	//三排图标
    	zhnx.utils.loadSvg("svg/health/mapLeftIcon/regionalPlatform/"+changeIcon+".svg", function(importedNode){	//右侧返回背景
			var planeIcon = svg_g.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeIcon).attr({
	            "width": 18,
	            "height": 22,
	            "x":130+220*num,
	            "y":200-22/2
			})
		});
    	//三排数据
    	this.drawInnerData1.append("g").append("text").attr({
    		 	"fill":"white",
                "font-size":14,
                "text-anchor":"start",
                "x": 160+220*num,
                "y":200
    	}).text(changePercent)
    	
    },
    drawXuanZhong: function(){
    	var that = this;
    	//选中框
    	this.cickBg_g = this.drawInnerData1.append("g").attr({"class":"cickBg_g"});
    	zhnx.utils.loadSvg(this.xuanZhongBg, function(importedNode){	
			var planeXuanZhong = that.cickBg_g.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeXuanZhong).attr({
	            "width": 208,
	            "height": 112,
	            "x":10
			})
		});
    },
    clickOneChange: function(){
    	var that = this;
    	
    	this.drawInnerData1.selectAll("rect").data(this.interSeries2).enter().append("rect").attr({
    		"width":190,
    		"height":110,
    		"transform": function(d,i){
    			var translateX = 20+(190+30)*i ;
    			return "translate("+translateX+","+100+")"
    		},
    		"fill":"rgba(255,255,255,0)",
    		"cursor":"pointer"
    	}).on("click",function(d,i){
    		that.clickNumInit(i);//点击背景的切换
    		that.drawClickLine(i);//绘制对应折线的变化
    		that.commandChangeClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: 'that.clickNumInit(' + i + ')'+';that.drawClickLine('+i+')',
    			execMode: "evalfunc"
			});
    	})
    	
    },
    clickNumInit: function(numI){
    	var that = this;
    	this.changeNum = numI;
    	this.clickXChange();
    },
    clickXChange: function(){
    	var that = this;
    	var changeX = this.changeNum*(190+30);
    	this.svg.selectAll(".cickBg_g").transition().duration(500).attr("transform","translate("+changeX+","+100+")")
    },
    commandDetailedClick: function(commandArgs){//详情
    	
    },
    commandReturnClick: function(commandArgs){//返回
    	
    },
    commandChangeClick: function(commandArgs){//切换线图数据
    	
    },
    commandPieClick: function(commandArgs){
    	
    },
    commandText: function(commandArgs){
    	
    },
    drawClickLine: function(numClick){//点击页面1的线图
    	var that = this;
    	this.drawInnerData1.selectAll(".lineImg").remove();
    	this.lineImg = this.drawInnerData1.append("g").attr({
    		"class":"lineImg",
        	"transform":"translate("+30+","+170+")",
			"width" : 850,
			"height" : 270
        })
    	var opt = $.extend(true, {}, this.option);
		var chart = xCharts(this.lineImg.node(), opt);
		chart.FormateData(this.interSeries2);
		chart.idx.g = numClick;
		var xInfo = chart.drawXAxis(chart.series.label[numClick]);
		var yInfo = chart.drawYAxis(chart.series.data[numClick]);
		chart.drawGrid(xInfo, yInfo);
		chart.drawLegend(chart.series.legend[numClick]);
		chart.drawLine(chart.series.data[numClick], xInfo, yInfo);
		chart.drawArea(xInfo, yInfo, chart.series.data[numClick]);
    },
   
    clickThreeInit: function(){
        var that = this;
        for(var k = 0;k<this.interSeries3.textCircle.length;k++){
            this.textTop = this.interSeries3.textTop[k];
            this.valueTop = this.interSeries3.valueTop[k];
            this.textCircle = this.interSeries3.textCircle[k];
            this.valueCircle = this.interSeries3.valueCircle[k];
            that.drawClickThreeInit(this.textTop,this.valueTop,this.textCircle,this.valueCircle,k)
        }
    },
    drawClickThreeInit:function(textTop,valueTop,textCircle,valueCircle,numK){
        var that = this;

        this.drawImgClickThree.attr({ "text-anchor":"middle"});

      //上部文字
        var newText = "";
        var textNum = 8;
        if(textTop.length>textNum){
            var test = textTop.substring(0,textNum)//截取个数
            var test2 = textTop.substring(textNum,textTop.length)
            newText=test+","+test2;//使用符号将前后连接起来
        }
        var textAll = this.drawImgClickThree.append("text").attr({
            "x":120+220*numK,
            "y":100,
            "fill":"white",
            "font-size": 16
        })
        var strs = newText.split(",") ;
        textAll.selectAll("tspan")
            .data(strs)
            .enter()
            .append("tspan")
            .attr("x",textAll.attr("x"))
            .attr("dy","1.5em")
            .text(function(d){
                return d;
            });
//       this.drawImgClickThree.append("text").attr({
//           "x":120+220*numK,
//           "y":120,
//           "fill":"white",
//           "font-size": 16
//       }).text(function(){
//    	   return console.log(textTop.length)
//    	   return textTop
//       }
//    		   
//    		   
//    		   );

        //上部数字
        this.drawImgClickThree.append("text").attr({
            "x":120+220*numK,
            "y":190,
            "fill":"#ffaa00",
            "font-size": 24,
            "font-weight":"bold"
        }).text(valueTop);

        //上部数字单位
        this.drawImgClickThree.append("g").selectAll("text").data(this.interSeries3.valueTop).enter().append("text").attr({
            "x":120+220*numK+60,
            "y":190,
            "fill":"#ffaa00",
            "font-size": 14
        }).text(this.unitTop);

        //下部文字
        
        this.drawImgClickThree.append("text").attr({
            "x":120+220*numK,
            "y":this.height-40,
            "fill":"#ffaa00",
            "font-size": 16
        }).text(textCircle);

        //底部圆环及圆圈
        var bottomValue = [],valueNum = 50,inner=50,outer = 65,bottomR = 45;
        var circleImg = this.drawImgClickThree.append("g").attr({
            "class":"circleImg",
            "transform":"translate("+0+","+(this.height-40-bottomR*2)+")"
        });//圆圈
        var ringImgWai = this.drawImgClickThree.append("g").attr({ "class":"ringImgWai" });
        var ringImg = ringImgWai.selectAll("g").data(this.interSeries3.valueTop).enter().append("g").attr({
                "class":"ringImg",
                "transform":function(d,i){
                    translateX = 120+220*i;
                    translateY = that.height-40-bottomR*2;
                    return "translate("+translateX+","+translateY+")"
                }
            }); //圆环

        for(var i = 0;i<valueNum;i++){
            bottomValue.push(1)
        }
        circleImg.selectAll("circle").data(this.interSeries3.valueTop).enter().append("circle").attr({
            "r":bottomR,
            "fill":"none",
            "stroke":"rgb(113,111,112)",
            "stroke-width":1,
            "transform":function(d,i){
                translateX = 120+220*i;
                return "translate("+translateX+","+0+")"
            }
        });
        var circlePie=d3.layout.pie()       //定义饼状布局
            .value(function(d){  return d; });       //值访问器

        var circlePieData=circlePie(bottomValue);
        ringImg.selectAll("g").remove();
        var circleArcs = ringImg.selectAll("g")
            .data(circlePieData)
            .enter()
            .append("g")
            .each(function(d){
                var margin = 0.02;
                d.startAngle += margin;
                d.endAngle -= margin;
            });
        var dataCircleArc = d3.svg.arc()
            .innerRadius(inner)
            .outerRadius(outer);

        circleArcs.append("path")
            .attr({
                "fill":"rgb(113,111,112)",
                "opacity":1
            })
            .transition()
            .duration(this.animateTime)
            .attrTween("d",function(d,i){
                var start = {
                    startAngle:circlePieData[i].startAngle,
                    endAngle: circlePieData[i].startAngle
                };
                var finish = {
                    startAngle:circlePieData[i].startAngle,
                    endAngle: circlePieData[i].endAngle
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return dataCircleArc(i(d));
                }
            });
        //数据圆环及圆圈
        var dataNum =valueCircle;
        //定义颜色渐变
        var a = d3.rgb(254,30,22);	//开始颜色
        var b = d3.rgb(35,254,110);	//结束颜色
        var compute = d3.interpolate(a,b);

        var linear = d3.scale.linear()
            .domain([0,dataNum])
            .range([0,1]);
        var ringX = d3.scale.linear().range([0,2*Math.PI]).domain([0,1]);

        //var dataNum =61;
        //console.log(dataNum)
        var dataValue = [];
        for(var a = 0;a<30;a++){
            dataValue.push(1);

        }
        //console.log(dataValue.length)
        var ringImg_g = ringImgWai.append("g").attr({
            "class":"ringImg_g",
            "transform":function(){
                translateX = 120+220*numK;
                translateY = that.height-40-bottomR*2;
                return "translate("+translateX+","+translateY+")"
            }
        }); //圆环
        var circleDataPie=d3.layout.pie()       //定义饼状布局
            .value(function(d){  return d; });       //值访问器

        var circlePieDataChange=circleDataPie(dataValue);
        var circleArcsData = ringImg_g.append("g").selectAll("g")
            .data(circlePieDataChange)
            .enter()
            .append("g")
            .each(function(d,i){
                var margin = 0.05;
                d.startAngle += margin;
                d.endAngle -= margin;
            });
        var dataCircleArcChange = d3.svg.arc()
            .innerRadius(inner)
            .outerRadius(outer);

        circleArcsData.append("path")
            .attr({
                "fill":function(d,i){ return compute(linear(i))},
                "opacity":1
            })
            .transition()
            .duration(this.animateTime)
            .attrTween("d",function(d,i){
                var start = {
                    startAngle:0,
                    endAngle: 0
                };
                var finish = {
//                		startAngle:0,
//                		endAngle:
                    startAngle:-circlePieDataChange[i].startAngle*dataNum/100,
                    endAngle: -circlePieDataChange[i].endAngle*dataNum/100
                };
                var i = d3.interpolate(start, finish);
                return function (d) {
                    return dataCircleArcChange(i(d));
                }
            });

        //中间文字
        this.drawImgClickThree.append("text").attr({
            "x":120+220*numK,
            "y":this.height-40-bottomR*2+22/2,
            "fill":"#ffaa00",
            "font-size": 22,
            "font-weight":"bold"
        }).text(valueCircle+this.interSeries3.unitCircle);

        //绘制数据圆圈

    }

});

//区域卫生左下角公共卫生管理
zhnx.chart.publicHealth = function (args) {
    this.args = $.extend({}, this._defaults, args);
    this.init(this.args);
};
zhnx.chart.publicHealth.prototype = $.extend({}, zhnx.chart.base, {
    constructor: zhnx.chart.publicHealth,
    _defaults: {},

    totalTitle:"",
    bgUrl: "svg/health/border/regionalPlatform/regionalPlatformMapLeft/gongGongGuanLiDiKuang.svg",//大背景的url，不变化
    leftTextBg: "svg/health/border/regionalPlatform/regionalPlatformMapLeft/danganGuanLiDiKuang.svg",//左侧背景
    rightTextBg: "svg/health/border/regionalPlatform/regionalPlatformMapLeft/xiangQingJiFanHui.svg",//右侧返回背景
    loadDiUrl : "svg/health/border/regionalPlatform/regionalPlatformMapLeft/danganGuanLiDaKuang.svg",//加载进入图形的大框
    clickBgUrl:"svg/health/border/regionalPlatform/regionalPlatformMapLeft/xiangQingJiFanHui.svg",//详情、返回
    xuanZhongBg: "svg/health/border/regionalPlatform/regionalPlatformMapLeft/dangAnDiSe.svg",//选中底色
    //loadTitleBg: "svg/health/border/regionalPlatform/regionalPlatformMapLeft/danganGuanLiDaKuang.svg",
    
    option : {
		padding : {
			top :80,
			right : 80,
			bottom : 50,
			left : 80
		},
		color : ["rgb(205,61,254)"],
		xAxis : {
			unit : '年份',
			gap : true,
			gapWidth : 60,
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		yAxis : {
			unit : '',
			axisPathStyle : {
				stroke: "#05a8f7",
			},
			axisLineStyle : {
				stroke: "#05a8f7",
			}
		},
		grid : {
			borderColor : "#05a8f7"
		},
		area : {
			showCircle: true,
			showText: false,
			showLastText : true,
			lastTextSvg:"svg/health/border/regionalPlatform/shuZiDiKuang.svg"
		},
		line : {
			lineStyle: {
				strokeColor:"rgb(205,61,254)",
				interpolate: "cardinal"		// 定义线绘制形状,step\basis等，默认为linear
			},
			isText : false,
			isCircle : false,
			lineAnimate : "left",
		},
		legend : {
			show : false
		},
		pie:{
			selectedMode: 'multiple',
			radius: [0, 0.6],
			roseType : 'false',
			center:{
				show: false
			},
			itemStyle: {
				normal: {
					borderWidth: 0
				}
			},
			label: {
				normal: {
					show:true,
					doubleLable:{
						textColor:'#ffaa00'
					},
					textStyle: {
						color: "#fff"
						}
					}
			},
			labelLine:{
				normal:{
					lineStyle:{
						color: "white"
					}
				}
			},
			smallPie:{	//不需数据的环
				show:false
			},
			pieCircle:{	//不需数据的圆
				show:false
			}
		}
	},
    
    init: function(args){
        this.baseInit(this.args.selector);
//        this.svg = zhnx.svg;
//        this.width = zhnx.width;
//        this.height = zhnx.height;

        this.totalTitle = args.totalTitle !=undefined ? args.totalTitle : this.totalTitle;
        this.title = args.title;
        this.fenGeUrl = args.fenGeUrl;
        this.innerSeries1 = args.innerSeries1;
        this.innerSeries2 = args.innerSeries2;
        this.series = args.series;
        this.loadSmallText = args.loadSmallText;


        this.svg.attr("font-family","Microsoft YaHei");
        this.bg = this.svg.append("g").attr({"class":"background"});
        this.fenGeBg = this.svg.append("g").attr({"class":"fenGeBg"});//分割背景
        this.drawLoad = this.svg.append("g").attr({"class":"drawLoad"});//加载进入的组
        this.drawInnerData1 = this.svg.append("g").attr({"class":"drawInnerData1"});//点击页面1的组
        this.drawInnerData2 = this.svg.append("g").attr({"class":"drawInnerData2"});//点击页面2的组
        this.drawReturn = this.svg.append("g").attr({"class":"drawReturn"});//点击返回按钮的组
        this.drawReturnText = this.svg.append("g").attr({"class":"drawReturnText"})
       
        this.drawBg();//大背景
        this.drawTotalTitle();//大标题
        //this.drawReturnSvg(0);
        //this.drawClickSvg(0);//点击加载分割线
//        this.loadDataInit();//点击页面2
        //this.clickOneInit();//点击页面1
        //this.drawClickLine(0);//点击页面折线图
        
        
        this.loadDataInit();
        
    },
    drawBg: function(){//绘制大背景（切换不变）
    	var that = this;
    	zhnx.utils.loadSvg(this.bgUrl, function(importedNode){
			var planeBg = that.bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeBg).attr({
	            "width": 955,
	            "height": 445
			});
		});
    },
    drawTotalTitle: function(){
    	var that = this;
    	var totleTitle_g = this.svg.append("g")
    	totleTitle_g.append("text").attr({
    		"x" : 160,
			"y" : 35,
			"text-anchor" : "middle",
			"font-size" : 28,
			"font-weight" : "bold",
			"dy" : ".35em",
			"fill" : "#ffaa00"
		}).text(this.totalTitle);
    },
    loadDataInit: function(){
        var that = this;
        that.drawReturn.selectAll("*").remove();
        that.drawReturnText.selectAll("*").remove();
        that.drawInnerData1.selectAll("*").remove();
        that.drawInnerData2.selectAll("*").remove();
        that.fenGeBg.selectAll("*").remove();
        that.drawLoadPie();
        that.loadPie();
        for(var i = 0;i<this.series.data.length;i++){
        	
        	that.drawLoadDataInit(i)
        }
        
        this.drawLoadInitText();
    },
    drawLoadPie: function(){//加载页面的圆
    	var that = this;
    	this.dataPie1 = this.drawLoad.append("g").attr({
    		"class":"dataPie1",
    		"width":this.width/2-70,
    		"height":this.width/2-150,
    		"transform":"translate("+50+","+80+")"
    		});
    	var opt={
    			color : ["rgb(5,168,247)","rgb(226,188,27)","rgb(156,30,226)","rgb(17,188,146)","rgb(71,229,20)","rgb(172,230,21)","rgb(204,22,185)"]		
    		}
    	var optPie = $.extend(true, {}, this.option, opt);
		this.chart1 = xCharts(this.dataPie1.node(), optPie);
		this.chart1.FormateData(this.series);
		this.chart1.drawPie(this.chart1.series.data[0][0], this.chart1.series.legend[0][0]);
		this.chart1.setOuterEvent({
			pathClick: function(dStart,dEnd,idx){
				that.pathXchartClickCommand({
					type: 'click',
					context: that.id,
					contextType: 'chaObj',
					execString: "that.chart1.pieClick("+dStart+","+dEnd+","+idx+",0);",
					execMode: "evalfunc"
				});
			}
		});
		this.chart1.setOuterEvent({
			svgRectClick: function(dStart,dEnd,idx){
				that.pathBgXchartClickCommand({
					type: 'click',
					context: that.id,
					contextType: 'chaObj',
					execString: "that.chart1.pieBgClick();",
					execMode: "evalfunc"
				});
			}
		});
	},
	pathXchartClickCommand: function(commandArgs){
		//console.log(commandArgs)
	},
	pathBgXchartClickCommand: function(commandArgs){
		//console.log(commandArgs)
	},
	pathXchartClickCommand2: function(commandArgs){
		//console.log(commandArgs)
	},
	pathBgXchartClickCommand2: function(commandArgs){
		//console.log(commandArgs)
	},
    loadPie: function(){
    	var that = this;
    	this.dataPie2 = this.drawLoad.append("g").attr({
    		"class":"dataPie2",
    		"width":this.width/2-70,
    		"height":this.width/2-150,
    		"transform":"translate("+(50+418+30)+","+80+")"
    		});
    	var opt={
    			color : ["rgb(5,168,247)","rgb(226,188,27)","rgb(156,30,226)","rgb(17,188,146)","rgb(71,229,20)","rgb(172,230,21)","rgb(204,22,185)"]		
    		}
    	var optPie = $.extend(true, {}, this.option, opt);
		this.chart2 = xCharts(this.dataPie2.node(), optPie);
		this.chart2.FormateData(this.series);
		this.chart2.drawPie(this.chart2.series.data[0][1], this.chart2.series.legend[0][1]);
		this.chart2.setOuterEvent({
			pathClick: function(dStart,dEnd,idx){
				that.pathXchartClickCommand2({
					type: 'click',
					context: that.id,
					contextType: 'chaObj',
					execString: "that.chart2.pieClick("+dStart+","+dEnd+","+idx+",1);",
					execMode: "evalfunc"
				});
			}
		});
		this.chart2.setOuterEvent({
			svgRectClick: function(dStart,dEnd,idx){
				that.pathBgXchartClickCommand2({
					type: 'click',
					context: that.id,
					contextType: 'chaObj',
					execString: "that.chart2.pieBgClick();",
					execMode: "evalfunc"
				});
			}
		});
    },
    drawLoadDataInit: function(num){//加载进入页面svg
        var that = this;
        var smallBg = this.drawLoad.append("g").attr({"class":"smallBg"});
        zhnx.utils.loadSvg(this.loadDiUrl, function(importedNode){//左侧背景
			var planeLoadBg = smallBg.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeLoadBg).attr({
	            "width": 418,
	            "height": 338,
	            "x":50+(25+418)*num,
	            "y":75
			});
		});
        
        zhnx.utils.loadSvg(this.leftTextBg, function(importedNode){//小标题背景
			var planeLoadTitleBg = smallBg.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeLoadTitleBg).attr({
	            "width": 216,
	            "height": 44,
	            "x":that.width/4-80+(418+25)*num,
	            "y":90
			});
		});
        
        zhnx.utils.loadSvg(this.clickBgUrl, function(importedNode){//查看详情背景
			var planeLoadClickBg = smallBg.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeLoadClickBg).attr({
	            "width": 105,
	            "height": 30,
	            "x":that.width/2-105-50+(418+25)*num,
	            "y":that.height-100
			});
		});
    },
    drawLoadInitText: function(){//加载页面的文字
    	var that = this;
    	
    	var loadText = this.drawLoad.append("g").attr({"class":"loadText"});
    	//小标题
    	loadText.append("g").selectAll("text").data(this.title).enter().append("text").attr({
    		"fill":"#ffaa00",
            "font-size":20,
            "text-anchor":"middle",
            "font-weight":"bold",
            "x": function(d,i){return that.width/4+30+(418+30)*i},
            "y":95+25
    	}).text(function(d){return d;})
    	//底部文字
    	loadText.append("g").selectAll("text").data(this.loadSmallText).enter().append("text").attr({
    		"fill":"#ffaa00",
            "font-size":14,
            "text-anchor":"middle",
            "x": function(d,i){return 160+(418+30)*i},
            "y":that.height-70
    	}).text(function(d){return d+"：";})
    	//底部数字
    	var dataSum = [];
    	var unitArray = [];
    	for(var i = 0;i<this.series.data.length;i++){
        	this.valueData = this.series.data[i].data;
        	this.unit = this.series.data[i].unit;
        	var sumInit = d3.sum(this.valueData)
        	unitArray.push(this.unit)
        	dataSum.push(sumInit);
        }
    	loadText.append("g").selectAll("text").data(dataSum).enter().append("text").attr({
    		"fill":"#ffaa00",
            "font-size":14,
            "text-anchor":"start",
            "x": function(d,i){return 200+(418+30)*i},
            "y":that.height-70
    	}).text(function(d,i){return d+unitArray[i]})
    	
    	//查看详情
    	loadText.append("g").selectAll("text").data(this.loadSmallText).enter().append("text").attr({
    		"fill":"white",
            "font-size":14,
            "text-anchor":"middle",
            "x": function(d,i){return that.width/2-100+(418+25)*i},
            "y":that.height-50-10-20
    	}).text("查看详情")
    	//添加矩形热区
    	loadText.append("g").selectAll("rect").data(this.title).enter().append("rect").attr({
    		 	"width": 105,
	            "height": 30,
	            "x":function(d,i){return that.width/2-105-50+(418+25)*i},
	            "y":that.height-100,
	            "fill":"rgba(255,255,255,0)",
	            "cursor":"pointer"
    	})
    	.on("click",function(d,i){
//    		that.drawLoad.selectAll("*").remove();
    		that.drawClickSvg(i);//点击加载分割线
    		that.drawReturnSvg(i);//点击绘制返回
    		that.drawClickPage(i);//点击切换对应面
    		that.commandDetailedClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: 'that.drawClickSvg(' + i + ')'+';that.drawReturnSvg('+i+')'+';that.drawClickPage('+i+')',
    			execMode: "evalfunc"
			});
    	})
    	
    },
    drawClickPage: function(pageNum){
    	var that = this;
    	that.drawLoad.selectAll("*").remove();
    	if(pageNum==0){
    		that.clickOneInit();//点击页面1
              that.drawClickLine(0);//点击页面折线图
    		}
    		else if(pageNum==1){
    			that.clickTwoInit();//点击页面1
    		}
    },
    drawClickSvg: function(num){//点击加载分割线
    	var that = this;
    	
    	zhnx.utils.loadSvg("svg/health/border/regionalPlatform/regionalPlatformMapLeft/"+this.fenGeUrl[num]+".svg", function(importedNode){//左侧背景
			var plane = that.fenGeBg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 890,
	            "height": 350,
	            "x":35,
	            "y":75
			});
		});
    	
    },
    drawReturnSvg: function(clickNum){
    	var that = this;
    	that.drawReturnClickSvg();
    	that.drawReturnClick(clickNum);
    },
    drawReturnClickSvg: function(){
    	var that = this;
    	 zhnx.utils.loadSvg(this.leftTextBg, function(importedNode){//左侧背景
 			var plane = that.drawReturn.node().appendChild(importedNode.cloneNode(true));
 			d3.select(plane).attr({
 	            "width": 216,
 	            "height": 44,
 	            "x":50,
 	            "y":70
 			});
 		});
    	 
    	 zhnx.utils.loadSvg(this.rightTextBg, function(importedNode){	//右侧返回背景
 			var plane = that.drawReturn.node().appendChild(importedNode.cloneNode(true));
 			d3.select(plane).attr({
 	            "width": 105,
 	            "height": 30,
 	            "x":that.width-150,
 	            "y":80
 			});
 		});
        

    },
    drawReturnClick: function(clickNum){	//点击导航上部，相同部分
        var that = this;

        
        this.drawReturnText.append("text").attr({		//左侧文字
            "fill":"#ffaa00",
            "font-size":20,
            "text-anchor":"middle",
            "font-weight":"bold",
            "x": 50+216/2,
            "y":75+44/2
        }).text(this.title[clickNum]);
        
        
        this.drawReturnText.append("text").attr({		//右侧返回文字
            "fill":"white",
            "font-size":16,
            "text-anchor":"middle",
            "x": this.width-150+105/2,
            "y":100,
            "cursor":"pointer"
        }).text("返回")
            .on("click",function(){
//                that.drawReturn.selectAll("*").remove();
//                that.drawReturnText.selectAll("*").remove();
//                that.drawInnerData1.selectAll("*").remove();
//                that.drawInnerData2.selectAll("*").remove();
//                that.fenGeBg.selectAll("*").remove();
                
                that.loadDataInit();
                that.commandReturnClick({
        			type: 'click',
        			context: that.id,
        			contextType: 'chaObj',
        			execString: 'that.loadDataInit()',
        			execMode: "evalfunc"
    			});
            })
    },
    
    clickOneInit: function(){
    	var that = this;
    	this.drawXuanZhong();
    	for(var i = 0;i<this.innerSeries1.length;i++){
    		this.changeIcon = this.innerSeries1[i].changeIcon;
    		this.changePercent = this.innerSeries1[i].changePercent;
    		this.innerTop = this.innerSeries1[i].innerTopText;
    		var dataLength = this.innerSeries1[i].data[0].data.length;
    		this.innerValue = this.innerSeries1[i].data[0].data[dataLength-1];
    		this.innerIconImg = this.innerSeries1[i].innerIcon;
    		that.drawClickOneInit(this.changeIcon,this.changePercent,this.innerTop,this.innerValue,this.innerIconImg,i)
    	}
    	
    	this.clickOneChange();
    	this.clickNumInit(0);
    },
    drawClickOneInit: function(changeIcon,changePercent,innerTop,innerValue,innerIconImg,num){
    	var that = this;
    	
    	
    	var svg_g= this.drawInnerData1.append("g");
    	//左侧图标
    	zhnx.utils.loadSvg("svg/health/mapLeftIcon/regionalPlatform/"+innerIconImg+".svg", function(importedNode){	//右侧返回背景
			var planeLeft = svg_g.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeLeft).attr({
	            "width": 64,
	            "height": 56,
	            "x":100+450*num,
	            "y":that.height/3+20
			});
		});
    	
    	//一排文字
    	this.drawInnerData1.append("g").append("text").attr({
    		 	"fill":"white",
                "font-size":20,
                "text-anchor":"start",
                "x": 190+450*num,
                "y":this.height/3+20
    	}).text(innerTop)
    	//二排数字
    	this.drawInnerData1.append("g").append("text").attr({
    		 	"fill":"#ffaa00",
                "font-size":36,
                "text-anchor":"start",
                "font-weight":"bold",
                "x": 190+450*num,
                "y":this.height/3+30+10+20
    	}).text(innerValue)
    	//三排文字
    	this.drawInnerData1.append("g").append("text").attr({
    		 	"fill":"white",
                "font-size":14,
                "text-anchor":"start",
                "x": 190+450*num,
                "y":this.height/3+30+10+10+36
    	}).text("与上年相比")
    	//三排图标
    	zhnx.utils.loadSvg("svg/health/mapLeftIcon/regionalPlatform/"+changeIcon+".svg", function(importedNode){	//右侧返回背景
			var planeIcon = svg_g.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeIcon).attr({
	            "width": 18,
	            "height": 22,
	            "x":270+450*num,
	            "y":that.height/3+30+10+10+36-22
			})
		});
    	//三排数据
    	this.drawInnerData1.append("g").append("text").attr({
    		 	"fill":"white",
                "font-size":14,
                "text-anchor":"start",
                "x": 300+450*num,
                "y":this.height/3+30+10+10+36
    	}).text(changePercent)
    	
    },
    drawXuanZhong: function(){
    	var that = this;
    	//选中框
    	this.cickBg_g = this.drawInnerData1.append("g").attr({"class":"cickBg_g"});
    	zhnx.utils.loadSvg(this.xuanZhongBg, function(importedNode){	
			var planeXuanZhong = that.cickBg_g.node().appendChild(importedNode.cloneNode(true));
			d3.select(planeXuanZhong).attr({
	            "width": 400,
	            "height": 104,
	            "x":70
			})
		});
    },
    clickOneChange: function(){
    	var that = this;
    	
    	this.drawInnerData1.selectAll("rect").data(this.innerSeries1).enter().append("rect").attr({
    		"width":400,
    		"height":104,
    		"transform": function(d,i){
    			var translateX = 70+(400+30)*i ;
    			return "translate("+translateX+","+140+")"
    		},
    		"fill":"rgba(255,255,255,0)",
    		"cursor":"pointer"
    	}).on("click",function(d,i){
    		that.clickNumInit(i);//绘制切换底部
    		that.drawClickLine(i);//绘制切换对应的折线图
    		that.commandChangeClick({
    			type: 'click',
    			context: that.id,
    			contextType: 'chaObj',
    			execString: 'that.clickNumInit(' + i + ')'+';that.drawClickLine('+i+')',
    			execMode: "evalfunc"
			});
    	})
    	
    },
    commandDetailedClick: function(commandArgs){
//    	console.log(commandArgs)
    },
    commandReturnClick: function(commandArgs){
    	
    },
    commandChangeClick: function(commandArgs){
    	
    },
    clickNumInit: function(numI){
    	var that = this;
    	this.changeNum = numI;
    	this.clickXChange();
    },
    clickXChange: function(){
    	var that = this;
    	var changeX = this.changeNum*(400+30);
    	this.svg.selectAll(".cickBg_g").transition().duration(500).attr("transform","translate("+changeX+","+140+")")
    },
    drawClickLine: function(numClick){//点击页面1的线图
    	var that = this;
    	this.drawInnerData1.selectAll(".lineImg").remove();
    	this.lineImg = this.drawInnerData1.append("g").attr({
    		"class":"lineImg",
        	"transform":"translate("+50+","+180+")",
			"width" : 850,
			"height" : 270
        })
    	var opt = $.extend(true, {}, this.option);
		var chart = xCharts(this.lineImg.node(), opt);
		chart.FormateData(this.innerSeries1);
		chart.idx.g = numClick;
		var xInfo = chart.drawXAxis(chart.series.label[numClick]);
		var yInfo = chart.drawYAxis(chart.series.data[numClick]);
		chart.drawGrid(xInfo, yInfo);
		chart.drawLegend(chart.series.legend[numClick]);
		chart.drawLine(chart.series.data[numClick], xInfo, yInfo);
		chart.drawArea(xInfo, yInfo, chart.series.data[numClick]);
    },
    clickTwoInit: function(){
        var that = this;
        for(var i = 0;i<this.innerSeries2.length;i++){
            this.unit = this.innerSeries2[i].unit;
            this.circleDataColor = this.innerSeries2[i].circleDataColor;
            this.type = this.innerSeries2[i].type;
            this.textValue = this.innerSeries2[i].textValue;
            this.value = this.innerSeries2[i].value;
            that.drawClickTwoInit(this.unit,this.circleDataColor,this.type,this.textValue,this.value,i);
        }
    },
    drawClickTwoInit: function(unit,circleDataColor,type,textValue,value,num){
        var that = this;

        //一排文字
        this.drawInnerData2.append("g").selectAll("text").data(type).enter().append("text").attr({
            "fill":"white",
            "font-size":16,
            "text-anchor":"middle",
            "x": function(d,i){
                if(type.length==4){
                    return 150+220*i
                }
                else if(type.length==3){
                    return 190+300*i
                }
            },
            "y":this.height/3+this.height/3*num+20
        }).text(function(d){return d;})

        //二排数字(不含单位)
        this.drawInnerData2.append("g").selectAll("text").data(textValue).enter().append("text").attr({
            "fill":"#ffaa00",
            "font-size":32,
            "text-anchor":"end",
            "font-weight":"bold",
            "x": function(d,i){
                if(textValue.length==4){
                    return 200+220*i
                }
                else if(textValue.length==3){
                    return 240+290*i
                }
            },
            "y":this.height/3+this.height/3*num+32*1.5+20
        }).text(function(d){return d;});

        //二排数字单位
        this.drawInnerData2.append("g").selectAll("text").data(value).enter().append("text").attr({
            "fill":"#ffaa00",
            "font-size":14,
            "text-anchor":"start",
            "x": function(d,i){
                if(textValue.length==4){
                    return 190+220*i+20
                }
                else if(textValue.length==3){
                    return 250+280*i+20
                }
            },
            "y":this.height/3+this.height/3*num+32*1.5+20
        }).text(unit)

        //数据条底部(不变化)
        this.drawInnerData2.append("g").selectAll("rect").data(textValue).enter().append("rect").attr({
            "fill": "rgba(13,48,106,0.7)",
            "width":function(){
                if(textValue.length==4){
                    return that.width/4-40
                }
                else if(textValue.length==3){
                    return that.width/3-60
                }
            },
            "height":15,
            "rx":8,
            "ry":8,
            "x": function(d,i){
                if(textValue.length==4){
                    return 40+230*i
                }
                else if(textValue.length==3){
                    return 50+300*i
                }
            },
            "y":this.height/3+this.height/3*num+90
        });

        //底部数据条（变化）
        var dataX;
        if(textValue.length==4){
            dataX = d3.scale.linear().range([0,that.width/4-40]).domain([0,100]);
        }
        else if(textValue.length==3){
            dataX = d3.scale.linear().range([0,that.width/3-60]).domain([0,100]);
        }
        this.drawInnerData2.append("g").selectAll("rect").data(value).enter().append("rect").attr({
            "fill": function(d,i){return circleDataColor[i]},
            "width":0,
            "height":15,
            "rx":8,
            "ry":8,
            "x": function(d,i){
                if(textValue.length==4){
                    return 40+230*i
                }
                else if(textValue.length==3){
                    return 50+300*i
                }
            },
            "y":this.height/3+this.height/3*num+90
        })
            .transition()
            .duration(1000)
            .ease("linear")
            .attr({
                "width":function(d){ return dataX(d);}
            });

        //数据条文字
        this.drawInnerData2.append("g").selectAll("text").data(value).enter().append("text").attr({
            "fill": "white",
            "font-size":14,
            "text-anchor":"start",
            "dx":"1em",
            "dy":"0.5em",
            "x": function(d,i){
                if(textValue.length==4){
                    return 30+230*i+dataX(d)
                }
                else if(textValue.length==3){
                    return 30+310*i+dataX(d)
                }
            },
            "y":this.height/3+this.height/3*num+90
        }).text(function(d){return d+"%"})
    }

});

//集成系统右边部分
zhnx.chart.integrationRight = function (args) {
	this.args = $.extend({}, this._defaults, args);
	this.init(this.args);
}
zhnx.chart.integrationRight.prototype = $.extend({}, zhnx.chart.base,{
	constructor:zhnx.chart.integrationRight,
	_defaults : {},
	
	init : function(args){
		this.baseInit(this.args.selector);
		this.svg.attr("font-family", "Microsoft YaHei");
		this.series = args.series;

		this.addBackground();
		this.drawValue();
	},
	
	drawValue : function(){
		var that = this;
		var typeXPos = [300, 750, 180, 600, 150, 450, 750];
		var typeYPos = [100, 100, 450, 450, 800, 800, 800];
		var ratioXPos = [30, 470, 30, 470, 20, 320, 630];
		var ratioYPos = [260, 260, 600, 600, 950, 950, 950];
		var rectWidth = [400, 400, 400, 400, 260, 260, 260];
		var value = this.svg.append("g").attr("class", "value");
		for(var i=0; i<this.series.type.length; ++i){
			value.append("text").attr({
				"x" : typeXPos[i],
				"y" : typeYPos[i],
				"text-anchor" : "middle",
				"font-size" : 28,
				"font-weight" : "normal",
				"dy" : ".35em",
				"fill" : "#fff"
			}).text(that.series.type[i]);
			
			value.append("text").attr({
				"x" : typeXPos[i],
				"y" : typeYPos[i]+80,
				"text-anchor" : "middle",
				"dy" : ".35em",
				"fill" : "#feab01"
			}).each(function(){
				if(i != 3){
					d3.select(this).append("tspan").attr({
						"font-size" : 32,
						"font-weight" : "bold"
					}).text(that.series.value[i]);
					d3.select(this).append("tspan").attr({
						"font-size" : 24,
						"font-weight" : "normal",
					}).text("个");
				}else{
					d3.select(this).append("tspan").attr({
						"font-size" : 32,
						"font-weight" : "bold"
					}).text(that.series.value[i]);
					d3.select(this).append("tspan").attr({
						"dx" : 10,
						"font-size" : 24,
						"font-weight" : "normal",
					}).text("%");
				}
			});
			
			value.append("rect").attr({
				"x" : ratioXPos[i],
				"y" : ratioYPos[i],
				"width" : rectWidth[i],
				"height" : 12,
				"rx" : 6,
				"ry" : 6,
				"fill" : "#093564",
				"opacity" : 0.5
			});
			var rato = that.series.ratio[i]*rectWidth[i]/100;
			value.append("rect").attr({
				"x" : ratioXPos[i],
				"y" : ratioYPos[i],
				"width" : 0,
				"height" : 12,
				"rx" : 6,
				"ry" : 6,
				"fill" : "#00beff"
			}).transition().duration(800).attr("width", rato);
			
			value.append("text").attr({
				"x" : ratioXPos[i]+rato,
				"y" : ratioYPos[i]-20,
				"text-anchor" : "middle",
				"font-size" : 28,
				"font-weight" : "normal",
				"dy" : ".35em",
				"fill" : "#fff"
			}).text(that.series.ratio[i]+"%");
		}
	},
	
	addBackground : function(){
		var that = this;
		var bg = this.svg.append("g").attr("class", "background");
		zhnx.utils.loadSvg("svg/IntegratedSystem/IntegratedRightBorder.svg", function(importedNode){
			var plane = bg.node().appendChild(importedNode.cloneNode(true));
			d3.select(plane).attr({
	            "width": 910,
	            "height": 1010
			});
		});
	}
});

